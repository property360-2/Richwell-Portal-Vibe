
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  roleId: 'roleId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentNo: 'studentNo',
  programId: 'programId',
  yearLevel: 'yearLevel',
  gpa: 'gpa',
  hasInc: 'hasInc',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department',
  employmentStatus: 'employmentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  units: 'units',
  subjectType: 'subjectType',
  yearStanding: 'yearStanding',
  recommendedYear: 'recommendedYear',
  recommendedSemester: 'recommendedSemester',
  programId: 'programId',
  prerequisiteId: 'prerequisiteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subjectId: 'subjectId',
  professorId: 'professorId',
  maxSlots: 'maxSlots',
  availableSlots: 'availableSlots',
  semester: 'semester',
  schoolYear: 'schoolYear',
  schedule: 'schedule',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AcademicTermScalarFieldEnum = {
  id: 'id',
  schoolYear: 'schoolYear',
  semester: 'semester',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  termId: 'termId',
  dateEnrolled: 'dateEnrolled',
  totalUnits: 'totalUnits',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentSubjectScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  sectionId: 'sectionId',
  subjectId: 'subjectId',
  units: 'units',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  enrollmentSubjectId: 'enrollmentSubjectId',
  gradeValue: 'gradeValue',
  remarks: 'remarks',
  encodedBy: 'encodedBy',
  approved: 'approved',
  dateEncoded: 'dateEncoded',
  repeatEligibleDate: 'repeatEligibleDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IncResolutionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  oldGrade: 'oldGrade',
  newGrade: 'newGrade',
  professorId: 'professorId',
  approvedByRegistrar: 'approvedByRegistrar',
  dateSubmitted: 'dateSubmitted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  description: 'description',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.StudentOrderByRelevanceFieldEnum = {
  studentNo: 'studentNo'
};

exports.Prisma.ProfessorOrderByRelevanceFieldEnum = {
  department: 'department'
};

exports.Prisma.ProgramOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code',
  description: 'description'
};

exports.Prisma.SubjectOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name'
};

exports.Prisma.SectionOrderByRelevanceFieldEnum = {
  name: 'name',
  schoolYear: 'schoolYear',
  schedule: 'schedule'
};

exports.Prisma.AcademicTermOrderByRelevanceFieldEnum = {
  schoolYear: 'schoolYear'
};

exports.Prisma.GradeOrderByRelevanceFieldEnum = {
  remarks: 'remarks'
};

exports.Prisma.IncResolutionOrderByRelevanceFieldEnum = {
  oldGrade: 'oldGrade'
};

exports.Prisma.AnalyticsLogOrderByRelevanceFieldEnum = {
  action: 'action',
  description: 'description'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.StudentStatus = exports.$Enums.StudentStatus = {
  regular: 'regular',
  irregular: 'irregular',
  inactive: 'inactive'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  full_time: 'full_time',
  part_time: 'part_time'
};

exports.SubjectType = exports.$Enums.SubjectType = {
  major: 'major',
  minor: 'minor'
};

exports.YearLevel = exports.$Enums.YearLevel = {
  first: 'first',
  second: 'second',
  third: 'third',
  fourth: 'fourth'
};

exports.SectionStatus = exports.$Enums.SectionStatus = {
  open: 'open',
  closed: 'closed'
};

exports.SemesterType = exports.$Enums.SemesterType = {
  first: 'first',
  second: 'second',
  summer: 'summer'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled'
};

exports.GradeValue = exports.$Enums.GradeValue = {
  grade_1_0: 'grade_1_0',
  grade_1_25: 'grade_1_25',
  grade_1_5: 'grade_1_5',
  grade_1_75: 'grade_1_75',
  grade_2_0: 'grade_2_0',
  grade_2_25: 'grade_2_25',
  grade_2_5: 'grade_2_5',
  grade_2_75: 'grade_2_75',
  grade_3_0: 'grade_3_0',
  grade_4_0: 'grade_4_0',
  grade_5_0: 'grade_5_0',
  INC: 'INC',
  DRP: 'DRP'
};

exports.Prisma.ModelName = {
  Role: 'Role',
  User: 'User',
  Student: 'Student',
  Professor: 'Professor',
  Program: 'Program',
  Subject: 'Subject',
  Section: 'Section',
  AcademicTerm: 'AcademicTerm',
  Enrollment: 'Enrollment',
  EnrollmentSubject: 'EnrollmentSubject',
  Grade: 'Grade',
  IncResolution: 'IncResolution',
  AnalyticsLog: 'AnalyticsLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Administrator\\Desktop\\projects\\Richwell-Portal-Vibe\\richwell-portal\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Administrator\\Desktop\\projects\\Richwell-Portal-Vibe\\richwell-portal\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// backend/prisma/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ========== A. USER & ROLE MANAGEMENT ==========\n\nmodel Role {\n  id        Int      @id @default(autoincrement())\n  name      String   @unique @db.VarChar(50)\n  users     User[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"roles\")\n}\n\nmodel User {\n  id        Int        @id @default(autoincrement())\n  email     String     @unique @db.VarChar(100)\n  password  String     @db.VarChar(255)\n  roleId    Int\n  status    UserStatus @default(active)\n  createdAt DateTime   @default(now())\n  updatedAt DateTime   @updatedAt\n\n  role          Role           @relation(fields: [roleId], references: [id])\n  student       Student?\n  professor     Professor?\n  analyticsLogs AnalyticsLog[]\n\n  @@map(\"users\")\n}\n\nenum UserStatus {\n  active\n  inactive\n}\n\n// ========== B. STUDENT & PROFESSOR INFO ==========\n\nmodel Student {\n  id        Int           @id @default(autoincrement())\n  userId    Int           @unique\n  studentNo String        @unique @db.VarChar(50)\n  programId Int\n  yearLevel Int\n  gpa       Decimal?      @db.Decimal(3, 2)\n  hasInc    Boolean       @default(false)\n  status    StudentStatus @default(regular)\n  createdAt DateTime      @default(now())\n  updatedAt DateTime      @updatedAt\n\n  user           User            @relation(fields: [userId], references: [id])\n  program        Program         @relation(fields: [programId], references: [id])\n  enrollments    Enrollment[]\n  incResolutions IncResolution[]\n\n  @@map(\"students\")\n}\n\nenum StudentStatus {\n  regular\n  irregular\n  inactive\n}\n\nmodel Professor {\n  id               Int              @id @default(autoincrement())\n  userId           Int              @unique\n  department       String?          @db.VarChar(100)\n  employmentStatus EmploymentStatus @default(full_time)\n  createdAt        DateTime         @default(now())\n  updatedAt        DateTime         @updatedAt\n\n  user           User            @relation(fields: [userId], references: [id])\n  sections       Section[]\n  grades         Grade[]\n  incResolutions IncResolution[]\n\n  @@map(\"professors\")\n}\n\nenum EmploymentStatus {\n  full_time\n  part_time\n}\n\n// ========== C. ACADEMIC & CURRICULUM DATA ==========\n\nmodel Program {\n  id          Int      @id @default(autoincrement())\n  name        String   @db.VarChar(150)\n  code        String   @unique @db.VarChar(20)\n  description String?  @db.Text\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  students Student[]\n  subjects Subject[]\n\n  @@map(\"programs\")\n}\n\nmodel Subject {\n  id                  Int           @id @default(autoincrement())\n  code                String        @unique @db.VarChar(20)\n  name                String        @db.VarChar(150)\n  units               Int\n  subjectType         SubjectType\n  yearStanding        YearLevel?\n  recommendedYear     YearLevel?\n  recommendedSemester SemesterType?\n  programId           Int\n  prerequisiteId      Int?\n  createdAt           DateTime      @default(now())\n  updatedAt           DateTime      @updatedAt\n\n  program            Program             @relation(fields: [programId], references: [id])\n  prerequisite       Subject?            @relation(\"SubjectPrerequisite\", fields: [prerequisiteId], references: [id], onDelete: NoAction, onUpdate: NoAction)\n  prerequisites      Subject[]           @relation(\"SubjectPrerequisite\")\n  sections           Section[]\n  enrollmentSubjects EnrollmentSubject[]\n  incResolutions     IncResolution[]\n\n  @@map(\"subjects\")\n}\n\nenum SubjectType {\n  major\n  minor\n}\n\nenum YearLevel {\n  first\n  second\n  third\n  fourth\n}\n\nmodel Section {\n  id             Int           @id @default(autoincrement())\n  name           String        @db.VarChar(50)\n  subjectId      Int\n  professorId    Int\n  maxSlots       Int\n  availableSlots Int\n  semester       SemesterType\n  schoolYear     String        @db.VarChar(20)\n  schedule       String?       @db.VarChar(200)\n  status         SectionStatus @default(open)\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n\n  subject            Subject             @relation(fields: [subjectId], references: [id])\n  professor          Professor           @relation(fields: [professorId], references: [id])\n  enrollmentSubjects EnrollmentSubject[]\n\n  @@map(\"sections\")\n}\n\nenum SectionStatus {\n  open\n  closed\n}\n\nenum SemesterType {\n  first\n  second\n  summer\n}\n\nmodel AcademicTerm {\n  id         Int          @id @default(autoincrement())\n  schoolYear String       @db.VarChar(20)\n  semester   SemesterType\n  isActive   Boolean      @default(false)\n  createdAt  DateTime     @default(now())\n  updatedAt  DateTime     @updatedAt\n\n  enrollments Enrollment[]\n\n  @@unique([schoolYear, semester])\n  @@map(\"academic_terms\")\n}\n\n// ========== D. ENROLLMENT & GRADES ==========\n\nmodel Enrollment {\n  id           Int              @id @default(autoincrement())\n  studentId    Int\n  termId       Int\n  dateEnrolled DateTime         @default(now())\n  totalUnits   Int              @default(0)\n  status       EnrollmentStatus @default(pending)\n  createdAt    DateTime         @default(now())\n  updatedAt    DateTime         @updatedAt\n\n  student            Student             @relation(fields: [studentId], references: [id])\n  term               AcademicTerm        @relation(fields: [termId], references: [id])\n  enrollmentSubjects EnrollmentSubject[]\n\n  @@map(\"enrollments\")\n}\n\nenum EnrollmentStatus {\n  pending\n  confirmed\n  cancelled\n}\n\nmodel EnrollmentSubject {\n  id           Int      @id @default(autoincrement())\n  enrollmentId Int\n  sectionId    Int\n  subjectId    Int\n  units        Int\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])\n  section    Section    @relation(fields: [sectionId], references: [id])\n  subject    Subject    @relation(fields: [subjectId], references: [id])\n  grade      Grade?\n\n  @@map(\"enrollment_subjects\")\n}\n\nmodel Grade {\n  id                  Int        @id @default(autoincrement())\n  enrollmentSubjectId Int        @unique\n  gradeValue          GradeValue\n  remarks             String?    @db.VarChar(255)\n  encodedBy           Int\n  approved            Boolean    @default(false)\n  dateEncoded         DateTime   @default(now())\n  repeatEligibleDate  DateTime?\n  createdAt           DateTime   @default(now())\n  updatedAt           DateTime   @updatedAt\n\n  enrollmentSubject EnrollmentSubject @relation(fields: [enrollmentSubjectId], references: [id])\n  professor         Professor         @relation(fields: [encodedBy], references: [id])\n\n  @@map(\"grades\")\n}\n\nenum GradeValue {\n  grade_1_0\n  grade_1_25\n  grade_1_5\n  grade_1_75\n  grade_2_0\n  grade_2_25\n  grade_2_5\n  grade_2_75\n  grade_3_0\n  grade_4_0\n  grade_5_0\n  INC\n  DRP\n}\n\nmodel IncResolution {\n  id                  Int        @id @default(autoincrement())\n  studentId           Int\n  subjectId           Int\n  oldGrade            String     @db.VarChar(10)\n  newGrade            GradeValue\n  professorId         Int\n  approvedByRegistrar Boolean    @default(false)\n  dateSubmitted       DateTime   @default(now())\n  createdAt           DateTime   @default(now())\n  updatedAt           DateTime   @updatedAt\n\n  student   Student   @relation(fields: [studentId], references: [id])\n  subject   Subject   @relation(fields: [subjectId], references: [id])\n  professor Professor @relation(fields: [professorId], references: [id])\n\n  @@map(\"inc_resolutions\")\n}\n\n// ========== E. ANALYTICS & LOGS ==========\n\nmodel AnalyticsLog {\n  id          Int      @id @default(autoincrement())\n  userId      Int\n  action      String   @db.VarChar(100)\n  description String?  @db.Text\n  timestamp   DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id])\n\n  @@map(\"analytics_logs\")\n}\n",
  "inlineSchemaHash": "c8d0288fe7d74f0f2a0ef9d5b76fddcd6e2bfab6111834fbf4cb0c0f36ea81e6",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Role\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoleToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"roles\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"UserStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToUser\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToUser\"},{\"name\":\"professor\",\"kind\":\"object\",\"type\":\"Professor\",\"relationName\":\"ProfessorToUser\"},{\"name\":\"analyticsLogs\",\"kind\":\"object\",\"type\":\"AnalyticsLog\",\"relationName\":\"AnalyticsLogToUser\"}],\"dbName\":\"users\"},\"Student\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentNo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"programId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"yearLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gpa\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"hasInc\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"StudentStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentToUser\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"ProgramToStudent\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToStudent\"},{\"name\":\"incResolutions\",\"kind\":\"object\",\"type\":\"IncResolution\",\"relationName\":\"IncResolutionToStudent\"}],\"dbName\":\"students\"},\"Professor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"employmentStatus\",\"kind\":\"enum\",\"type\":\"EmploymentStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfessorToUser\"},{\"name\":\"sections\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"ProfessorToSection\"},{\"name\":\"grades\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"GradeToProfessor\"},{\"name\":\"incResolutions\",\"kind\":\"object\",\"type\":\"IncResolution\",\"relationName\":\"IncResolutionToProfessor\"}],\"dbName\":\"professors\"},\"Program\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"students\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"ProgramToStudent\"},{\"name\":\"subjects\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"ProgramToSubject\"}],\"dbName\":\"programs\"},\"Subject\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"units\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subjectType\",\"kind\":\"enum\",\"type\":\"SubjectType\"},{\"name\":\"yearStanding\",\"kind\":\"enum\",\"type\":\"YearLevel\"},{\"name\":\"recommendedYear\",\"kind\":\"enum\",\"type\":\"YearLevel\"},{\"name\":\"recommendedSemester\",\"kind\":\"enum\",\"type\":\"SemesterType\"},{\"name\":\"programId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"prerequisiteId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"Program\",\"relationName\":\"ProgramToSubject\"},{\"name\":\"prerequisite\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"SubjectPrerequisite\"},{\"name\":\"prerequisites\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"SubjectPrerequisite\"},{\"name\":\"sections\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToSubject\"},{\"name\":\"enrollmentSubjects\",\"kind\":\"object\",\"type\":\"EnrollmentSubject\",\"relationName\":\"EnrollmentSubjectToSubject\"},{\"name\":\"incResolutions\",\"kind\":\"object\",\"type\":\"IncResolution\",\"relationName\":\"IncResolutionToSubject\"}],\"dbName\":\"subjects\"},\"Section\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"professorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxSlots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"availableSlots\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"semester\",\"kind\":\"enum\",\"type\":\"SemesterType\"},{\"name\":\"schoolYear\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SectionStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"SectionToSubject\"},{\"name\":\"professor\",\"kind\":\"object\",\"type\":\"Professor\",\"relationName\":\"ProfessorToSection\"},{\"name\":\"enrollmentSubjects\",\"kind\":\"object\",\"type\":\"EnrollmentSubject\",\"relationName\":\"EnrollmentSubjectToSection\"}],\"dbName\":\"sections\"},\"AcademicTerm\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"schoolYear\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"semester\",\"kind\":\"enum\",\"type\":\"SemesterType\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"AcademicTermToEnrollment\"}],\"dbName\":\"academic_terms\"},\"Enrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"termId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dateEnrolled\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalUnits\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EnrollmentStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"EnrollmentToStudent\"},{\"name\":\"term\",\"kind\":\"object\",\"type\":\"AcademicTerm\",\"relationName\":\"AcademicTermToEnrollment\"},{\"name\":\"enrollmentSubjects\",\"kind\":\"object\",\"type\":\"EnrollmentSubject\",\"relationName\":\"EnrollmentToEnrollmentSubject\"}],\"dbName\":\"enrollments\"},\"EnrollmentSubject\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"units\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrollment\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToEnrollmentSubject\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"EnrollmentSubjectToSection\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"EnrollmentSubjectToSubject\"},{\"name\":\"grade\",\"kind\":\"object\",\"type\":\"Grade\",\"relationName\":\"EnrollmentSubjectToGrade\"}],\"dbName\":\"enrollment_subjects\"},\"Grade\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"enrollmentSubjectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gradeValue\",\"kind\":\"enum\",\"type\":\"GradeValue\"},{\"name\":\"remarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"encodedBy\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"approved\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"dateEncoded\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"repeatEligibleDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrollmentSubject\",\"kind\":\"object\",\"type\":\"EnrollmentSubject\",\"relationName\":\"EnrollmentSubjectToGrade\"},{\"name\":\"professor\",\"kind\":\"object\",\"type\":\"Professor\",\"relationName\":\"GradeToProfessor\"}],\"dbName\":\"grades\"},\"IncResolution\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"oldGrade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"newGrade\",\"kind\":\"enum\",\"type\":\"GradeValue\"},{\"name\":\"professorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"approvedByRegistrar\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"dateSubmitted\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"IncResolutionToStudent\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"IncResolutionToSubject\"},{\"name\":\"professor\",\"kind\":\"object\",\"type\":\"Professor\",\"relationName\":\"IncResolutionToProfessor\"}],\"dbName\":\"inc_resolutions\"},\"AnalyticsLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AnalyticsLogToUser\"}],\"dbName\":\"analytics_logs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

