
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Professor
 * 
 */
export type Professor = $Result.DefaultSelection<Prisma.$ProfessorPayload>
/**
 * Model Program
 * 
 */
export type Program = $Result.DefaultSelection<Prisma.$ProgramPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model AcademicTerm
 * 
 */
export type AcademicTerm = $Result.DefaultSelection<Prisma.$AcademicTermPayload>
/**
 * Model Enrollment
 * 
 */
export type Enrollment = $Result.DefaultSelection<Prisma.$EnrollmentPayload>
/**
 * Model EnrollmentSubject
 * 
 */
export type EnrollmentSubject = $Result.DefaultSelection<Prisma.$EnrollmentSubjectPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model IncResolution
 * 
 */
export type IncResolution = $Result.DefaultSelection<Prisma.$IncResolutionPayload>
/**
 * Model AnalyticsLog
 * 
 */
export type AnalyticsLog = $Result.DefaultSelection<Prisma.$AnalyticsLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserStatus: {
  active: 'active',
  inactive: 'inactive'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const StudentStatus: {
  regular: 'regular',
  irregular: 'irregular',
  inactive: 'inactive'
};

export type StudentStatus = (typeof StudentStatus)[keyof typeof StudentStatus]


export const EmploymentStatus: {
  full_time: 'full_time',
  part_time: 'part_time'
};

export type EmploymentStatus = (typeof EmploymentStatus)[keyof typeof EmploymentStatus]


export const SubjectType: {
  major: 'major',
  minor: 'minor'
};

export type SubjectType = (typeof SubjectType)[keyof typeof SubjectType]


export const YearLevel: {
  first: 'first',
  second: 'second',
  third: 'third',
  fourth: 'fourth'
};

export type YearLevel = (typeof YearLevel)[keyof typeof YearLevel]


export const SectionStatus: {
  open: 'open',
  closed: 'closed'
};

export type SectionStatus = (typeof SectionStatus)[keyof typeof SectionStatus]


export const SemesterType: {
  first: 'first',
  second: 'second',
  summer: 'summer'
};

export type SemesterType = (typeof SemesterType)[keyof typeof SemesterType]


export const EnrollmentStatus: {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled'
};

export type EnrollmentStatus = (typeof EnrollmentStatus)[keyof typeof EnrollmentStatus]


export const GradeValue: {
  grade_1_0: 'grade_1_0',
  grade_1_25: 'grade_1_25',
  grade_1_5: 'grade_1_5',
  grade_1_75: 'grade_1_75',
  grade_2_0: 'grade_2_0',
  grade_2_25: 'grade_2_25',
  grade_2_5: 'grade_2_5',
  grade_2_75: 'grade_2_75',
  grade_3_0: 'grade_3_0',
  grade_4_0: 'grade_4_0',
  grade_5_0: 'grade_5_0',
  INC: 'INC',
  DRP: 'DRP'
};

export type GradeValue = (typeof GradeValue)[keyof typeof GradeValue]

}

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type StudentStatus = $Enums.StudentStatus

export const StudentStatus: typeof $Enums.StudentStatus

export type EmploymentStatus = $Enums.EmploymentStatus

export const EmploymentStatus: typeof $Enums.EmploymentStatus

export type SubjectType = $Enums.SubjectType

export const SubjectType: typeof $Enums.SubjectType

export type YearLevel = $Enums.YearLevel

export const YearLevel: typeof $Enums.YearLevel

export type SectionStatus = $Enums.SectionStatus

export const SectionStatus: typeof $Enums.SectionStatus

export type SemesterType = $Enums.SemesterType

export const SemesterType: typeof $Enums.SemesterType

export type EnrollmentStatus = $Enums.EnrollmentStatus

export const EnrollmentStatus: typeof $Enums.EnrollmentStatus

export type GradeValue = $Enums.GradeValue

export const GradeValue: typeof $Enums.GradeValue

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Roles
 * const roles = await prisma.role.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Roles
   * const roles = await prisma.role.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.program`: Exposes CRUD operations for the **Program** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Programs
    * const programs = await prisma.program.findMany()
    * ```
    */
  get program(): Prisma.ProgramDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.academicTerm`: Exposes CRUD operations for the **AcademicTerm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicTerms
    * const academicTerms = await prisma.academicTerm.findMany()
    * ```
    */
  get academicTerm(): Prisma.AcademicTermDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.enrollmentSubject`: Exposes CRUD operations for the **EnrollmentSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EnrollmentSubjects
    * const enrollmentSubjects = await prisma.enrollmentSubject.findMany()
    * ```
    */
  get enrollmentSubject(): Prisma.EnrollmentSubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.incResolution`: Exposes CRUD operations for the **IncResolution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IncResolutions
    * const incResolutions = await prisma.incResolution.findMany()
    * ```
    */
  get incResolution(): Prisma.IncResolutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.analyticsLog`: Exposes CRUD operations for the **AnalyticsLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnalyticsLogs
    * const analyticsLogs = await prisma.analyticsLog.findMany()
    * ```
    */
  get analyticsLog(): Prisma.AnalyticsLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Role: 'Role',
    User: 'User',
    Student: 'Student',
    Professor: 'Professor',
    Program: 'Program',
    Subject: 'Subject',
    Section: 'Section',
    AcademicTerm: 'AcademicTerm',
    Enrollment: 'Enrollment',
    EnrollmentSubject: 'EnrollmentSubject',
    Grade: 'Grade',
    IncResolution: 'IncResolution',
    AnalyticsLog: 'AnalyticsLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "role" | "user" | "student" | "professor" | "program" | "subject" | "section" | "academicTerm" | "enrollment" | "enrollmentSubject" | "grade" | "incResolution" | "analyticsLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Professor: {
        payload: Prisma.$ProfessorPayload<ExtArgs>
        fields: Prisma.ProfessorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findFirst: {
            args: Prisma.ProfessorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findMany: {
            args: Prisma.ProfessorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          create: {
            args: Prisma.ProfessorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          createMany: {
            args: Prisma.ProfessorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfessorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          update: {
            args: Prisma.ProfessorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfessorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.ProfessorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      Program: {
        payload: Prisma.$ProgramPayload<ExtArgs>
        fields: Prisma.ProgramFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findFirst: {
            args: Prisma.ProgramFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findMany: {
            args: Prisma.ProgramFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          create: {
            args: Prisma.ProgramCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          createMany: {
            args: Prisma.ProgramCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProgramDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          update: {
            args: Prisma.ProgramUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          deleteMany: {
            args: Prisma.ProgramDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProgramUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          aggregate: {
            args: Prisma.ProgramAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgram>
          }
          groupBy: {
            args: Prisma.ProgramGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      AcademicTerm: {
        payload: Prisma.$AcademicTermPayload<ExtArgs>
        fields: Prisma.AcademicTermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicTermFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicTermFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>
          }
          findFirst: {
            args: Prisma.AcademicTermFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicTermFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>
          }
          findMany: {
            args: Prisma.AcademicTermFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>[]
          }
          create: {
            args: Prisma.AcademicTermCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>
          }
          createMany: {
            args: Prisma.AcademicTermCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AcademicTermDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>
          }
          update: {
            args: Prisma.AcademicTermUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>
          }
          deleteMany: {
            args: Prisma.AcademicTermDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicTermUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AcademicTermUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTermPayload>
          }
          aggregate: {
            args: Prisma.AcademicTermAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcademicTerm>
          }
          groupBy: {
            args: Prisma.AcademicTermGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcademicTermGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicTermCountArgs<ExtArgs>
            result: $Utils.Optional<AcademicTermCountAggregateOutputType> | number
          }
        }
      }
      Enrollment: {
        payload: Prisma.$EnrollmentPayload<ExtArgs>
        fields: Prisma.EnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findMany: {
            args: Prisma.EnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          create: {
            args: Prisma.EnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          createMany: {
            args: Prisma.EnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          update: {
            args: Prisma.EnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollment>
          }
          groupBy: {
            args: Prisma.EnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentCountAggregateOutputType> | number
          }
        }
      }
      EnrollmentSubject: {
        payload: Prisma.$EnrollmentSubjectPayload<ExtArgs>
        fields: Prisma.EnrollmentSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>
          }
          findMany: {
            args: Prisma.EnrollmentSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>[]
          }
          create: {
            args: Prisma.EnrollmentSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>
          }
          createMany: {
            args: Prisma.EnrollmentSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EnrollmentSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>
          }
          update: {
            args: Prisma.EnrollmentSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentSubjectPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollmentSubject>
          }
          groupBy: {
            args: Prisma.EnrollmentSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentSubjectCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      IncResolution: {
        payload: Prisma.$IncResolutionPayload<ExtArgs>
        fields: Prisma.IncResolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IncResolutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IncResolutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>
          }
          findFirst: {
            args: Prisma.IncResolutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IncResolutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>
          }
          findMany: {
            args: Prisma.IncResolutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>[]
          }
          create: {
            args: Prisma.IncResolutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>
          }
          createMany: {
            args: Prisma.IncResolutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.IncResolutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>
          }
          update: {
            args: Prisma.IncResolutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>
          }
          deleteMany: {
            args: Prisma.IncResolutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IncResolutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IncResolutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncResolutionPayload>
          }
          aggregate: {
            args: Prisma.IncResolutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIncResolution>
          }
          groupBy: {
            args: Prisma.IncResolutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<IncResolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.IncResolutionCountArgs<ExtArgs>
            result: $Utils.Optional<IncResolutionCountAggregateOutputType> | number
          }
        }
      }
      AnalyticsLog: {
        payload: Prisma.$AnalyticsLogPayload<ExtArgs>
        fields: Prisma.AnalyticsLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnalyticsLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnalyticsLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>
          }
          findFirst: {
            args: Prisma.AnalyticsLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnalyticsLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>
          }
          findMany: {
            args: Prisma.AnalyticsLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>[]
          }
          create: {
            args: Prisma.AnalyticsLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>
          }
          createMany: {
            args: Prisma.AnalyticsLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AnalyticsLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>
          }
          update: {
            args: Prisma.AnalyticsLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>
          }
          deleteMany: {
            args: Prisma.AnalyticsLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnalyticsLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnalyticsLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsLogPayload>
          }
          aggregate: {
            args: Prisma.AnalyticsLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnalyticsLog>
          }
          groupBy: {
            args: Prisma.AnalyticsLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnalyticsLogCountArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    role?: RoleOmit
    user?: UserOmit
    student?: StudentOmit
    professor?: ProfessorOmit
    program?: ProgramOmit
    subject?: SubjectOmit
    section?: SectionOmit
    academicTerm?: AcademicTermOmit
    enrollment?: EnrollmentOmit
    enrollmentSubject?: EnrollmentSubjectOmit
    grade?: GradeOmit
    incResolution?: IncResolutionOmit
    analyticsLog?: AnalyticsLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    analyticsLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    analyticsLogs?: boolean | UserCountOutputTypeCountAnalyticsLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnalyticsLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsLogWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    enrollments: number
    incResolutions: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | StudentCountOutputTypeCountEnrollmentsArgs
    incResolutions?: boolean | StudentCountOutputTypeCountIncResolutionsArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountIncResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncResolutionWhereInput
  }


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    sections: number
    grades: number
    incResolutions: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | ProfessorCountOutputTypeCountSectionsArgs
    grades?: boolean | ProfessorCountOutputTypeCountGradesArgs
    incResolutions?: boolean | ProfessorCountOutputTypeCountIncResolutionsArgs
  }

  // Custom InputTypes
  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountIncResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncResolutionWhereInput
  }


  /**
   * Count Type ProgramCountOutputType
   */

  export type ProgramCountOutputType = {
    students: number
    subjects: number
  }

  export type ProgramCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | ProgramCountOutputTypeCountStudentsArgs
    subjects?: boolean | ProgramCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes
  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramCountOutputType
     */
    select?: ProgramCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    prerequisites: number
    sections: number
    enrollmentSubjects: number
    incResolutions: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prerequisites?: boolean | SubjectCountOutputTypeCountPrerequisitesArgs
    sections?: boolean | SubjectCountOutputTypeCountSectionsArgs
    enrollmentSubjects?: boolean | SubjectCountOutputTypeCountEnrollmentSubjectsArgs
    incResolutions?: boolean | SubjectCountOutputTypeCountIncResolutionsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountPrerequisitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountEnrollmentSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentSubjectWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountIncResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncResolutionWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    enrollmentSubjects: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollmentSubjects?: boolean | SectionCountOutputTypeCountEnrollmentSubjectsArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountEnrollmentSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentSubjectWhereInput
  }


  /**
   * Count Type AcademicTermCountOutputType
   */

  export type AcademicTermCountOutputType = {
    enrollments: number
  }

  export type AcademicTermCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | AcademicTermCountOutputTypeCountEnrollmentsArgs
  }

  // Custom InputTypes
  /**
   * AcademicTermCountOutputType without action
   */
  export type AcademicTermCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTermCountOutputType
     */
    select?: AcademicTermCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AcademicTermCountOutputType without action
   */
  export type AcademicTermCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }


  /**
   * Count Type EnrollmentCountOutputType
   */

  export type EnrollmentCountOutputType = {
    enrollmentSubjects: number
  }

  export type EnrollmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollmentSubjects?: boolean | EnrollmentCountOutputTypeCountEnrollmentSubjectsArgs
  }

  // Custom InputTypes
  /**
   * EnrollmentCountOutputType without action
   */
  export type EnrollmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentCountOutputType
     */
    select?: EnrollmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EnrollmentCountOutputType without action
   */
  export type EnrollmentCountOutputTypeCountEnrollmentSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentSubjectWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>



  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly name: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    roleId: number | null
    status: $Enums.UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    roleId: number | null
    status: $Enums.UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    roleId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    roleId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    roleId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    roleId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    roleId: number
    status: $Enums.UserStatus
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    roleId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    professor?: boolean | User$professorArgs<ExtArgs>
    analyticsLogs?: boolean | User$analyticsLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    roleId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "roleId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    professor?: boolean | User$professorArgs<ExtArgs>
    analyticsLogs?: boolean | User$analyticsLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs> | null
      professor: Prisma.$ProfessorPayload<ExtArgs> | null
      analyticsLogs: Prisma.$AnalyticsLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      roleId: number
      status: $Enums.UserStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends User$studentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    professor<T extends User$professorArgs<ExtArgs> = {}>(args?: Subset<T, User$professorArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    analyticsLogs<T extends User$analyticsLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$analyticsLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly roleId: FieldRef<"User", 'Int'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.student
   */
  export type User$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * User.professor
   */
  export type User$professorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    where?: ProfessorWhereInput
  }

  /**
   * User.analyticsLogs
   */
  export type User$analyticsLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    where?: AnalyticsLogWhereInput
    orderBy?: AnalyticsLogOrderByWithRelationInput | AnalyticsLogOrderByWithRelationInput[]
    cursor?: AnalyticsLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnalyticsLogScalarFieldEnum | AnalyticsLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    programId: number | null
    yearLevel: number | null
    gpa: Decimal | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    programId: number | null
    yearLevel: number | null
    gpa: Decimal | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    studentNo: string | null
    programId: number | null
    yearLevel: number | null
    gpa: Decimal | null
    hasInc: boolean | null
    status: $Enums.StudentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    studentNo: string | null
    programId: number | null
    yearLevel: number | null
    gpa: Decimal | null
    hasInc: boolean | null
    status: $Enums.StudentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    userId: number
    studentNo: number
    programId: number
    yearLevel: number
    gpa: number
    hasInc: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    userId?: true
    programId?: true
    yearLevel?: true
    gpa?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    userId?: true
    programId?: true
    yearLevel?: true
    gpa?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    userId?: true
    studentNo?: true
    programId?: true
    yearLevel?: true
    gpa?: true
    hasInc?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    userId?: true
    studentNo?: true
    programId?: true
    yearLevel?: true
    gpa?: true
    hasInc?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    userId?: true
    studentNo?: true
    programId?: true
    yearLevel?: true
    gpa?: true
    hasInc?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    userId: number
    studentNo: string
    programId: number
    yearLevel: number
    gpa: Decimal | null
    hasInc: boolean
    status: $Enums.StudentStatus
    createdAt: Date
    updatedAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    studentNo?: boolean
    programId?: boolean
    yearLevel?: boolean
    gpa?: boolean
    hasInc?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    enrollments?: boolean | Student$enrollmentsArgs<ExtArgs>
    incResolutions?: boolean | Student$incResolutionsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>



  export type StudentSelectScalar = {
    id?: boolean
    userId?: boolean
    studentNo?: boolean
    programId?: boolean
    yearLevel?: boolean
    gpa?: boolean
    hasInc?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "studentNo" | "programId" | "yearLevel" | "gpa" | "hasInc" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    enrollments?: boolean | Student$enrollmentsArgs<ExtArgs>
    incResolutions?: boolean | Student$incResolutionsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      program: Prisma.$ProgramPayload<ExtArgs>
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      incResolutions: Prisma.$IncResolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      studentNo: string
      programId: number
      yearLevel: number
      gpa: Prisma.Decimal | null
      hasInc: boolean
      status: $Enums.StudentStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    program<T extends ProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramDefaultArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    enrollments<T extends Student$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Student$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incResolutions<T extends Student$incResolutionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$incResolutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly userId: FieldRef<"Student", 'Int'>
    readonly studentNo: FieldRef<"Student", 'String'>
    readonly programId: FieldRef<"Student", 'Int'>
    readonly yearLevel: FieldRef<"Student", 'Int'>
    readonly gpa: FieldRef<"Student", 'Decimal'>
    readonly hasInc: FieldRef<"Student", 'Boolean'>
    readonly status: FieldRef<"Student", 'StudentStatus'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.enrollments
   */
  export type Student$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Student.incResolutions
   */
  export type Student$incResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    where?: IncResolutionWhereInput
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    cursor?: IncResolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncResolutionScalarFieldEnum | IncResolutionScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfessorSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: number | null
    userId: number | null
    department: string | null
    employmentStatus: $Enums.EmploymentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    department: string | null
    employmentStatus: $Enums.EmploymentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    userId: number
    department: number
    employmentStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessorAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfessorSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfessorMinAggregateInputType = {
    id?: true
    userId?: true
    department?: true
    employmentStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    userId?: true
    department?: true
    employmentStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    userId?: true
    department?: true
    employmentStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithAggregationInput | ProfessorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _avg?: ProfessorAvgAggregateInputType
    _sum?: ProfessorSumAggregateInputType
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    id: number
    userId: number
    department: string | null
    employmentStatus: $Enums.EmploymentStatus
    createdAt: Date
    updatedAt: Date
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    department?: boolean
    employmentStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sections?: boolean | Professor$sectionsArgs<ExtArgs>
    grades?: boolean | Professor$gradesArgs<ExtArgs>
    incResolutions?: boolean | Professor$incResolutionsArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>



  export type ProfessorSelectScalar = {
    id?: boolean
    userId?: boolean
    department?: boolean
    employmentStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "department" | "employmentStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["professor"]>
  export type ProfessorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sections?: boolean | Professor$sectionsArgs<ExtArgs>
    grades?: boolean | Professor$gradesArgs<ExtArgs>
    incResolutions?: boolean | Professor$incResolutionsArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProfessorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sections: Prisma.$SectionPayload<ExtArgs>[]
      grades: Prisma.$GradePayload<ExtArgs>[]
      incResolutions: Prisma.$IncResolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      department: string | null
      employmentStatus: $Enums.EmploymentStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }

  type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = $Result.GetResult<Prisma.$ProfessorPayload, S>

  type ProfessorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessorFindUniqueArgs>(args: SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Professor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessorFindFirstArgs>(args?: SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessorFindManyArgs>(args?: SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
     */
    create<T extends ProfessorCreateArgs>(args: SelectSubset<T, ProfessorCreateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professors.
     * @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessorCreateManyArgs>(args?: SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
     */
    delete<T extends ProfessorDeleteArgs>(args: SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessorUpdateArgs>(args: SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessorDeleteManyArgs>(args?: SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessorUpdateManyArgs>(args: SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
     */
    upsert<T extends ProfessorUpsertArgs>(args: SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor model
   */
  readonly fields: ProfessorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sections<T extends Professor$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Professor$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    grades<T extends Professor$gradesArgs<ExtArgs> = {}>(args?: Subset<T, Professor$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incResolutions<T extends Professor$incResolutionsArgs<ExtArgs> = {}>(args?: Subset<T, Professor$incResolutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Professor model
   */
  interface ProfessorFieldRefs {
    readonly id: FieldRef<"Professor", 'Int'>
    readonly userId: FieldRef<"Professor", 'Int'>
    readonly department: FieldRef<"Professor", 'String'>
    readonly employmentStatus: FieldRef<"Professor", 'EmploymentStatus'>
    readonly createdAt: FieldRef<"Professor", 'DateTime'>
    readonly updatedAt: FieldRef<"Professor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Professor findUnique
   */
  export type ProfessorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findFirst
   */
  export type ProfessorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor create
   */
  export type ProfessorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }

  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professor update
   */
  export type ProfessorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to update.
     */
    limit?: number
  }

  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }

  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to delete.
     */
    limit?: number
  }

  /**
   * Professor.sections
   */
  export type Professor$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Professor.grades
   */
  export type Professor$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Professor.incResolutions
   */
  export type Professor$incResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    where?: IncResolutionWhereInput
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    cursor?: IncResolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncResolutionScalarFieldEnum | IncResolutionScalarFieldEnum[]
  }

  /**
   * Professor without action
   */
  export type ProfessorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
  }


  /**
   * Model Program
   */

  export type AggregateProgram = {
    _count: ProgramCountAggregateOutputType | null
    _avg: ProgramAvgAggregateOutputType | null
    _sum: ProgramSumAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  export type ProgramAvgAggregateOutputType = {
    id: number | null
  }

  export type ProgramSumAggregateOutputType = {
    id: number | null
  }

  export type ProgramMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProgramCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProgramAvgAggregateInputType = {
    id?: true
  }

  export type ProgramSumAggregateInputType = {
    id?: true
  }

  export type ProgramMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProgramCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProgramAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Program to aggregate.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Programs
    **/
    _count?: true | ProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProgramAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProgramSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramMaxAggregateInputType
  }

  export type GetProgramAggregateType<T extends ProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgram[P]>
      : GetScalarType<T[P], AggregateProgram[P]>
  }




  export type ProgramGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithAggregationInput | ProgramOrderByWithAggregationInput[]
    by: ProgramScalarFieldEnum[] | ProgramScalarFieldEnum
    having?: ProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramCountAggregateInputType | true
    _avg?: ProgramAvgAggregateInputType
    _sum?: ProgramSumAggregateInputType
    _min?: ProgramMinAggregateInputType
    _max?: ProgramMaxAggregateInputType
  }

  export type ProgramGroupByOutputType = {
    id: number
    name: string
    code: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProgramCountAggregateOutputType | null
    _avg: ProgramAvgAggregateOutputType | null
    _sum: ProgramSumAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  type GetProgramGroupByPayload<T extends ProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramGroupByOutputType[P]>
        }
      >
    >


  export type ProgramSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    students?: boolean | Program$studentsArgs<ExtArgs>
    subjects?: boolean | Program$subjectsArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>



  export type ProgramSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProgramOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["program"]>
  export type ProgramInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | Program$studentsArgs<ExtArgs>
    subjects?: boolean | Program$subjectsArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProgramPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Program"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["program"]>
    composites: {}
  }

  type ProgramGetPayload<S extends boolean | null | undefined | ProgramDefaultArgs> = $Result.GetResult<Prisma.$ProgramPayload, S>

  type ProgramCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProgramCountAggregateInputType | true
    }

  export interface ProgramDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Program'], meta: { name: 'Program' } }
    /**
     * Find zero or one Program that matches the filter.
     * @param {ProgramFindUniqueArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramFindUniqueArgs>(args: SelectSubset<T, ProgramFindUniqueArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Program that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramFindUniqueOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramFindFirstArgs>(args?: SelectSubset<T, ProgramFindFirstArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Programs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Programs
     * const programs = await prisma.program.findMany()
     * 
     * // Get first 10 Programs
     * const programs = await prisma.program.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programWithIdOnly = await prisma.program.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramFindManyArgs>(args?: SelectSubset<T, ProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Program.
     * @param {ProgramCreateArgs} args - Arguments to create a Program.
     * @example
     * // Create one Program
     * const Program = await prisma.program.create({
     *   data: {
     *     // ... data to create a Program
     *   }
     * })
     * 
     */
    create<T extends ProgramCreateArgs>(args: SelectSubset<T, ProgramCreateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Programs.
     * @param {ProgramCreateManyArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramCreateManyArgs>(args?: SelectSubset<T, ProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Program.
     * @param {ProgramDeleteArgs} args - Arguments to delete one Program.
     * @example
     * // Delete one Program
     * const Program = await prisma.program.delete({
     *   where: {
     *     // ... filter to delete one Program
     *   }
     * })
     * 
     */
    delete<T extends ProgramDeleteArgs>(args: SelectSubset<T, ProgramDeleteArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Program.
     * @param {ProgramUpdateArgs} args - Arguments to update one Program.
     * @example
     * // Update one Program
     * const program = await prisma.program.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramUpdateArgs>(args: SelectSubset<T, ProgramUpdateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Programs.
     * @param {ProgramDeleteManyArgs} args - Arguments to filter Programs to delete.
     * @example
     * // Delete a few Programs
     * const { count } = await prisma.program.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramDeleteManyArgs>(args?: SelectSubset<T, ProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramUpdateManyArgs>(args: SelectSubset<T, ProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Program.
     * @param {ProgramUpsertArgs} args - Arguments to update or create a Program.
     * @example
     * // Update or create a Program
     * const program = await prisma.program.upsert({
     *   create: {
     *     // ... data to create a Program
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Program we want to update
     *   }
     * })
     */
    upsert<T extends ProgramUpsertArgs>(args: SelectSubset<T, ProgramUpsertArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramCountArgs} args - Arguments to filter Programs to count.
     * @example
     * // Count the number of Programs
     * const count = await prisma.program.count({
     *   where: {
     *     // ... the filter for the Programs we want to count
     *   }
     * })
    **/
    count<T extends ProgramCountArgs>(
      args?: Subset<T, ProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramAggregateArgs>(args: Subset<T, ProgramAggregateArgs>): Prisma.PrismaPromise<GetProgramAggregateType<T>>

    /**
     * Group by Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramGroupByArgs['orderBy'] }
        : { orderBy?: ProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Program model
   */
  readonly fields: ProgramFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Program.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends Program$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Program$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subjects<T extends Program$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Program$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Program model
   */
  interface ProgramFieldRefs {
    readonly id: FieldRef<"Program", 'Int'>
    readonly name: FieldRef<"Program", 'String'>
    readonly code: FieldRef<"Program", 'String'>
    readonly description: FieldRef<"Program", 'String'>
    readonly createdAt: FieldRef<"Program", 'DateTime'>
    readonly updatedAt: FieldRef<"Program", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Program findUnique
   */
  export type ProgramFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program findUniqueOrThrow
   */
  export type ProgramFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program findFirst
   */
  export type ProgramFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program findFirstOrThrow
   */
  export type ProgramFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program findMany
   */
  export type ProgramFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Programs to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program create
   */
  export type ProgramCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to create a Program.
     */
    data: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
  }

  /**
   * Program createMany
   */
  export type ProgramCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Program update
   */
  export type ProgramUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to update a Program.
     */
    data: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
    /**
     * Choose, which Program to update.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program updateMany
   */
  export type ProgramUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
  }

  /**
   * Program upsert
   */
  export type ProgramUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The filter to search for the Program to update in case it exists.
     */
    where: ProgramWhereUniqueInput
    /**
     * In case the Program found by the `where` argument doesn't exist, create a new Program with this data.
     */
    create: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
    /**
     * In case the Program was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
  }

  /**
   * Program delete
   */
  export type ProgramDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter which Program to delete.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program deleteMany
   */
  export type ProgramDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Programs to delete
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to delete.
     */
    limit?: number
  }

  /**
   * Program.students
   */
  export type Program$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Program.subjects
   */
  export type Program$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Program without action
   */
  export type ProgramDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
    units: number | null
    programId: number | null
    prerequisiteId: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
    units: number | null
    programId: number | null
    prerequisiteId: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    units: number | null
    subjectType: $Enums.SubjectType | null
    yearStanding: $Enums.YearLevel | null
    recommendedYear: $Enums.YearLevel | null
    recommendedSemester: $Enums.SemesterType | null
    programId: number | null
    prerequisiteId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    units: number | null
    subjectType: $Enums.SubjectType | null
    yearStanding: $Enums.YearLevel | null
    recommendedYear: $Enums.YearLevel | null
    recommendedSemester: $Enums.SemesterType | null
    programId: number | null
    prerequisiteId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    code: number
    name: number
    units: number
    subjectType: number
    yearStanding: number
    recommendedYear: number
    recommendedSemester: number
    programId: number
    prerequisiteId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
    units?: true
    programId?: true
    prerequisiteId?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
    units?: true
    programId?: true
    prerequisiteId?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    units?: true
    subjectType?: true
    yearStanding?: true
    recommendedYear?: true
    recommendedSemester?: true
    programId?: true
    prerequisiteId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    units?: true
    subjectType?: true
    yearStanding?: true
    recommendedYear?: true
    recommendedSemester?: true
    programId?: true
    prerequisiteId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    units?: true
    subjectType?: true
    yearStanding?: true
    recommendedYear?: true
    recommendedSemester?: true
    programId?: true
    prerequisiteId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding: $Enums.YearLevel | null
    recommendedYear: $Enums.YearLevel | null
    recommendedSemester: $Enums.SemesterType | null
    programId: number
    prerequisiteId: number | null
    createdAt: Date
    updatedAt: Date
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    units?: boolean
    subjectType?: boolean
    yearStanding?: boolean
    recommendedYear?: boolean
    recommendedSemester?: boolean
    programId?: boolean
    prerequisiteId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    prerequisite?: boolean | Subject$prerequisiteArgs<ExtArgs>
    prerequisites?: boolean | Subject$prerequisitesArgs<ExtArgs>
    sections?: boolean | Subject$sectionsArgs<ExtArgs>
    enrollmentSubjects?: boolean | Subject$enrollmentSubjectsArgs<ExtArgs>
    incResolutions?: boolean | Subject$incResolutionsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>



  export type SubjectSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    units?: boolean
    subjectType?: boolean
    yearStanding?: boolean
    recommendedYear?: boolean
    recommendedSemester?: boolean
    programId?: boolean
    prerequisiteId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "units" | "subjectType" | "yearStanding" | "recommendedYear" | "recommendedSemester" | "programId" | "prerequisiteId" | "createdAt" | "updatedAt", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    prerequisite?: boolean | Subject$prerequisiteArgs<ExtArgs>
    prerequisites?: boolean | Subject$prerequisitesArgs<ExtArgs>
    sections?: boolean | Subject$sectionsArgs<ExtArgs>
    enrollmentSubjects?: boolean | Subject$enrollmentSubjectsArgs<ExtArgs>
    incResolutions?: boolean | Subject$incResolutionsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      program: Prisma.$ProgramPayload<ExtArgs>
      prerequisite: Prisma.$SubjectPayload<ExtArgs> | null
      prerequisites: Prisma.$SubjectPayload<ExtArgs>[]
      sections: Prisma.$SectionPayload<ExtArgs>[]
      enrollmentSubjects: Prisma.$EnrollmentSubjectPayload<ExtArgs>[]
      incResolutions: Prisma.$IncResolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      units: number
      subjectType: $Enums.SubjectType
      yearStanding: $Enums.YearLevel | null
      recommendedYear: $Enums.YearLevel | null
      recommendedSemester: $Enums.SemesterType | null
      programId: number
      prerequisiteId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    program<T extends ProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramDefaultArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prerequisite<T extends Subject$prerequisiteArgs<ExtArgs> = {}>(args?: Subset<T, Subject$prerequisiteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    prerequisites<T extends Subject$prerequisitesArgs<ExtArgs> = {}>(args?: Subset<T, Subject$prerequisitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sections<T extends Subject$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    enrollmentSubjects<T extends Subject$enrollmentSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$enrollmentSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incResolutions<T extends Subject$incResolutionsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$incResolutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly code: FieldRef<"Subject", 'String'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly units: FieldRef<"Subject", 'Int'>
    readonly subjectType: FieldRef<"Subject", 'SubjectType'>
    readonly yearStanding: FieldRef<"Subject", 'YearLevel'>
    readonly recommendedYear: FieldRef<"Subject", 'YearLevel'>
    readonly recommendedSemester: FieldRef<"Subject", 'SemesterType'>
    readonly programId: FieldRef<"Subject", 'Int'>
    readonly prerequisiteId: FieldRef<"Subject", 'Int'>
    readonly createdAt: FieldRef<"Subject", 'DateTime'>
    readonly updatedAt: FieldRef<"Subject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.prerequisite
   */
  export type Subject$prerequisiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
  }

  /**
   * Subject.prerequisites
   */
  export type Subject$prerequisitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject.sections
   */
  export type Subject$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Subject.enrollmentSubjects
   */
  export type Subject$enrollmentSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    where?: EnrollmentSubjectWhereInput
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    cursor?: EnrollmentSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentSubjectScalarFieldEnum | EnrollmentSubjectScalarFieldEnum[]
  }

  /**
   * Subject.incResolutions
   */
  export type Subject$incResolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    where?: IncResolutionWhereInput
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    cursor?: IncResolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncResolutionScalarFieldEnum | IncResolutionScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionAvgAggregateOutputType = {
    id: number | null
    subjectId: number | null
    professorId: number | null
    maxSlots: number | null
    availableSlots: number | null
  }

  export type SectionSumAggregateOutputType = {
    id: number | null
    subjectId: number | null
    professorId: number | null
    maxSlots: number | null
    availableSlots: number | null
  }

  export type SectionMinAggregateOutputType = {
    id: number | null
    name: string | null
    subjectId: number | null
    professorId: number | null
    maxSlots: number | null
    availableSlots: number | null
    semester: $Enums.SemesterType | null
    schoolYear: string | null
    schedule: string | null
    status: $Enums.SectionStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    subjectId: number | null
    professorId: number | null
    maxSlots: number | null
    availableSlots: number | null
    semester: $Enums.SemesterType | null
    schoolYear: string | null
    schedule: string | null
    status: $Enums.SectionStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    name: number
    subjectId: number
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: number
    schoolYear: number
    schedule: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SectionAvgAggregateInputType = {
    id?: true
    subjectId?: true
    professorId?: true
    maxSlots?: true
    availableSlots?: true
  }

  export type SectionSumAggregateInputType = {
    id?: true
    subjectId?: true
    professorId?: true
    maxSlots?: true
    availableSlots?: true
  }

  export type SectionMinAggregateInputType = {
    id?: true
    name?: true
    subjectId?: true
    professorId?: true
    maxSlots?: true
    availableSlots?: true
    semester?: true
    schoolYear?: true
    schedule?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    name?: true
    subjectId?: true
    professorId?: true
    maxSlots?: true
    availableSlots?: true
    semester?: true
    schoolYear?: true
    schedule?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    name?: true
    subjectId?: true
    professorId?: true
    maxSlots?: true
    availableSlots?: true
    semester?: true
    schoolYear?: true
    schedule?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _avg?: SectionAvgAggregateInputType
    _sum?: SectionSumAggregateInputType
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: number
    name: string
    subjectId: number
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule: string | null
    status: $Enums.SectionStatus
    createdAt: Date
    updatedAt: Date
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subjectId?: boolean
    professorId?: boolean
    maxSlots?: boolean
    availableSlots?: boolean
    semester?: boolean
    schoolYear?: boolean
    schedule?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    enrollmentSubjects?: boolean | Section$enrollmentSubjectsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>



  export type SectionSelectScalar = {
    id?: boolean
    name?: boolean
    subjectId?: boolean
    professorId?: boolean
    maxSlots?: boolean
    availableSlots?: boolean
    semester?: boolean
    schoolYear?: boolean
    schedule?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subjectId" | "professorId" | "maxSlots" | "availableSlots" | "semester" | "schoolYear" | "schedule" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    enrollmentSubjects?: boolean | Section$enrollmentSubjectsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      professor: Prisma.$ProfessorPayload<ExtArgs>
      enrollmentSubjects: Prisma.$EnrollmentSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      subjectId: number
      professorId: number
      maxSlots: number
      availableSlots: number
      semester: $Enums.SemesterType
      schoolYear: string
      schedule: string | null
      status: $Enums.SectionStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    enrollmentSubjects<T extends Section$enrollmentSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, Section$enrollmentSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'Int'>
    readonly name: FieldRef<"Section", 'String'>
    readonly subjectId: FieldRef<"Section", 'Int'>
    readonly professorId: FieldRef<"Section", 'Int'>
    readonly maxSlots: FieldRef<"Section", 'Int'>
    readonly availableSlots: FieldRef<"Section", 'Int'>
    readonly semester: FieldRef<"Section", 'SemesterType'>
    readonly schoolYear: FieldRef<"Section", 'String'>
    readonly schedule: FieldRef<"Section", 'String'>
    readonly status: FieldRef<"Section", 'SectionStatus'>
    readonly createdAt: FieldRef<"Section", 'DateTime'>
    readonly updatedAt: FieldRef<"Section", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.enrollmentSubjects
   */
  export type Section$enrollmentSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    where?: EnrollmentSubjectWhereInput
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    cursor?: EnrollmentSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentSubjectScalarFieldEnum | EnrollmentSubjectScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model AcademicTerm
   */

  export type AggregateAcademicTerm = {
    _count: AcademicTermCountAggregateOutputType | null
    _avg: AcademicTermAvgAggregateOutputType | null
    _sum: AcademicTermSumAggregateOutputType | null
    _min: AcademicTermMinAggregateOutputType | null
    _max: AcademicTermMaxAggregateOutputType | null
  }

  export type AcademicTermAvgAggregateOutputType = {
    id: number | null
  }

  export type AcademicTermSumAggregateOutputType = {
    id: number | null
  }

  export type AcademicTermMinAggregateOutputType = {
    id: number | null
    schoolYear: string | null
    semester: $Enums.SemesterType | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicTermMaxAggregateOutputType = {
    id: number | null
    schoolYear: string | null
    semester: $Enums.SemesterType | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicTermCountAggregateOutputType = {
    id: number
    schoolYear: number
    semester: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AcademicTermAvgAggregateInputType = {
    id?: true
  }

  export type AcademicTermSumAggregateInputType = {
    id?: true
  }

  export type AcademicTermMinAggregateInputType = {
    id?: true
    schoolYear?: true
    semester?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicTermMaxAggregateInputType = {
    id?: true
    schoolYear?: true
    semester?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicTermCountAggregateInputType = {
    id?: true
    schoolYear?: true
    semester?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AcademicTermAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicTerm to aggregate.
     */
    where?: AcademicTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTerms to fetch.
     */
    orderBy?: AcademicTermOrderByWithRelationInput | AcademicTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicTerms
    **/
    _count?: true | AcademicTermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicTermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicTermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicTermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicTermMaxAggregateInputType
  }

  export type GetAcademicTermAggregateType<T extends AcademicTermAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicTerm[P]>
      : GetScalarType<T[P], AggregateAcademicTerm[P]>
  }




  export type AcademicTermGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicTermWhereInput
    orderBy?: AcademicTermOrderByWithAggregationInput | AcademicTermOrderByWithAggregationInput[]
    by: AcademicTermScalarFieldEnum[] | AcademicTermScalarFieldEnum
    having?: AcademicTermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicTermCountAggregateInputType | true
    _avg?: AcademicTermAvgAggregateInputType
    _sum?: AcademicTermSumAggregateInputType
    _min?: AcademicTermMinAggregateInputType
    _max?: AcademicTermMaxAggregateInputType
  }

  export type AcademicTermGroupByOutputType = {
    id: number
    schoolYear: string
    semester: $Enums.SemesterType
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AcademicTermCountAggregateOutputType | null
    _avg: AcademicTermAvgAggregateOutputType | null
    _sum: AcademicTermSumAggregateOutputType | null
    _min: AcademicTermMinAggregateOutputType | null
    _max: AcademicTermMaxAggregateOutputType | null
  }

  type GetAcademicTermGroupByPayload<T extends AcademicTermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicTermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicTermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicTermGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicTermGroupByOutputType[P]>
        }
      >
    >


  export type AcademicTermSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolYear?: boolean
    semester?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    enrollments?: boolean | AcademicTerm$enrollmentsArgs<ExtArgs>
    _count?: boolean | AcademicTermCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicTerm"]>



  export type AcademicTermSelectScalar = {
    id?: boolean
    schoolYear?: boolean
    semester?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AcademicTermOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "schoolYear" | "semester" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["academicTerm"]>
  export type AcademicTermInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | AcademicTerm$enrollmentsArgs<ExtArgs>
    _count?: boolean | AcademicTermCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AcademicTermPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicTerm"
    objects: {
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      schoolYear: string
      semester: $Enums.SemesterType
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["academicTerm"]>
    composites: {}
  }

  type AcademicTermGetPayload<S extends boolean | null | undefined | AcademicTermDefaultArgs> = $Result.GetResult<Prisma.$AcademicTermPayload, S>

  type AcademicTermCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AcademicTermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcademicTermCountAggregateInputType | true
    }

  export interface AcademicTermDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicTerm'], meta: { name: 'AcademicTerm' } }
    /**
     * Find zero or one AcademicTerm that matches the filter.
     * @param {AcademicTermFindUniqueArgs} args - Arguments to find a AcademicTerm
     * @example
     * // Get one AcademicTerm
     * const academicTerm = await prisma.academicTerm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcademicTermFindUniqueArgs>(args: SelectSubset<T, AcademicTermFindUniqueArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AcademicTerm that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AcademicTermFindUniqueOrThrowArgs} args - Arguments to find a AcademicTerm
     * @example
     * // Get one AcademicTerm
     * const academicTerm = await prisma.academicTerm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcademicTermFindUniqueOrThrowArgs>(args: SelectSubset<T, AcademicTermFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicTerm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermFindFirstArgs} args - Arguments to find a AcademicTerm
     * @example
     * // Get one AcademicTerm
     * const academicTerm = await prisma.academicTerm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcademicTermFindFirstArgs>(args?: SelectSubset<T, AcademicTermFindFirstArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicTerm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermFindFirstOrThrowArgs} args - Arguments to find a AcademicTerm
     * @example
     * // Get one AcademicTerm
     * const academicTerm = await prisma.academicTerm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcademicTermFindFirstOrThrowArgs>(args?: SelectSubset<T, AcademicTermFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AcademicTerms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicTerms
     * const academicTerms = await prisma.academicTerm.findMany()
     * 
     * // Get first 10 AcademicTerms
     * const academicTerms = await prisma.academicTerm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicTermWithIdOnly = await prisma.academicTerm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AcademicTermFindManyArgs>(args?: SelectSubset<T, AcademicTermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AcademicTerm.
     * @param {AcademicTermCreateArgs} args - Arguments to create a AcademicTerm.
     * @example
     * // Create one AcademicTerm
     * const AcademicTerm = await prisma.academicTerm.create({
     *   data: {
     *     // ... data to create a AcademicTerm
     *   }
     * })
     * 
     */
    create<T extends AcademicTermCreateArgs>(args: SelectSubset<T, AcademicTermCreateArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AcademicTerms.
     * @param {AcademicTermCreateManyArgs} args - Arguments to create many AcademicTerms.
     * @example
     * // Create many AcademicTerms
     * const academicTerm = await prisma.academicTerm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcademicTermCreateManyArgs>(args?: SelectSubset<T, AcademicTermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicTerm.
     * @param {AcademicTermDeleteArgs} args - Arguments to delete one AcademicTerm.
     * @example
     * // Delete one AcademicTerm
     * const AcademicTerm = await prisma.academicTerm.delete({
     *   where: {
     *     // ... filter to delete one AcademicTerm
     *   }
     * })
     * 
     */
    delete<T extends AcademicTermDeleteArgs>(args: SelectSubset<T, AcademicTermDeleteArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AcademicTerm.
     * @param {AcademicTermUpdateArgs} args - Arguments to update one AcademicTerm.
     * @example
     * // Update one AcademicTerm
     * const academicTerm = await prisma.academicTerm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcademicTermUpdateArgs>(args: SelectSubset<T, AcademicTermUpdateArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AcademicTerms.
     * @param {AcademicTermDeleteManyArgs} args - Arguments to filter AcademicTerms to delete.
     * @example
     * // Delete a few AcademicTerms
     * const { count } = await prisma.academicTerm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcademicTermDeleteManyArgs>(args?: SelectSubset<T, AcademicTermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicTerms
     * const academicTerm = await prisma.academicTerm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcademicTermUpdateManyArgs>(args: SelectSubset<T, AcademicTermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicTerm.
     * @param {AcademicTermUpsertArgs} args - Arguments to update or create a AcademicTerm.
     * @example
     * // Update or create a AcademicTerm
     * const academicTerm = await prisma.academicTerm.upsert({
     *   create: {
     *     // ... data to create a AcademicTerm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicTerm we want to update
     *   }
     * })
     */
    upsert<T extends AcademicTermUpsertArgs>(args: SelectSubset<T, AcademicTermUpsertArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AcademicTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermCountArgs} args - Arguments to filter AcademicTerms to count.
     * @example
     * // Count the number of AcademicTerms
     * const count = await prisma.academicTerm.count({
     *   where: {
     *     // ... the filter for the AcademicTerms we want to count
     *   }
     * })
    **/
    count<T extends AcademicTermCountArgs>(
      args?: Subset<T, AcademicTermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicTermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicTermAggregateArgs>(args: Subset<T, AcademicTermAggregateArgs>): Prisma.PrismaPromise<GetAcademicTermAggregateType<T>>

    /**
     * Group by AcademicTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicTermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicTermGroupByArgs['orderBy'] }
        : { orderBy?: AcademicTermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicTermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicTerm model
   */
  readonly fields: AcademicTermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicTerm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicTermClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends AcademicTerm$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, AcademicTerm$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AcademicTerm model
   */
  interface AcademicTermFieldRefs {
    readonly id: FieldRef<"AcademicTerm", 'Int'>
    readonly schoolYear: FieldRef<"AcademicTerm", 'String'>
    readonly semester: FieldRef<"AcademicTerm", 'SemesterType'>
    readonly isActive: FieldRef<"AcademicTerm", 'Boolean'>
    readonly createdAt: FieldRef<"AcademicTerm", 'DateTime'>
    readonly updatedAt: FieldRef<"AcademicTerm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AcademicTerm findUnique
   */
  export type AcademicTermFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTerm to fetch.
     */
    where: AcademicTermWhereUniqueInput
  }

  /**
   * AcademicTerm findUniqueOrThrow
   */
  export type AcademicTermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTerm to fetch.
     */
    where: AcademicTermWhereUniqueInput
  }

  /**
   * AcademicTerm findFirst
   */
  export type AcademicTermFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTerm to fetch.
     */
    where?: AcademicTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTerms to fetch.
     */
    orderBy?: AcademicTermOrderByWithRelationInput | AcademicTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicTerms.
     */
    cursor?: AcademicTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicTerms.
     */
    distinct?: AcademicTermScalarFieldEnum | AcademicTermScalarFieldEnum[]
  }

  /**
   * AcademicTerm findFirstOrThrow
   */
  export type AcademicTermFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTerm to fetch.
     */
    where?: AcademicTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTerms to fetch.
     */
    orderBy?: AcademicTermOrderByWithRelationInput | AcademicTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicTerms.
     */
    cursor?: AcademicTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicTerms.
     */
    distinct?: AcademicTermScalarFieldEnum | AcademicTermScalarFieldEnum[]
  }

  /**
   * AcademicTerm findMany
   */
  export type AcademicTermFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTerms to fetch.
     */
    where?: AcademicTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTerms to fetch.
     */
    orderBy?: AcademicTermOrderByWithRelationInput | AcademicTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicTerms.
     */
    cursor?: AcademicTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTerms.
     */
    skip?: number
    distinct?: AcademicTermScalarFieldEnum | AcademicTermScalarFieldEnum[]
  }

  /**
   * AcademicTerm create
   */
  export type AcademicTermCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicTerm.
     */
    data: XOR<AcademicTermCreateInput, AcademicTermUncheckedCreateInput>
  }

  /**
   * AcademicTerm createMany
   */
  export type AcademicTermCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicTerms.
     */
    data: AcademicTermCreateManyInput | AcademicTermCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicTerm update
   */
  export type AcademicTermUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicTerm.
     */
    data: XOR<AcademicTermUpdateInput, AcademicTermUncheckedUpdateInput>
    /**
     * Choose, which AcademicTerm to update.
     */
    where: AcademicTermWhereUniqueInput
  }

  /**
   * AcademicTerm updateMany
   */
  export type AcademicTermUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicTerms.
     */
    data: XOR<AcademicTermUpdateManyMutationInput, AcademicTermUncheckedUpdateManyInput>
    /**
     * Filter which AcademicTerms to update
     */
    where?: AcademicTermWhereInput
    /**
     * Limit how many AcademicTerms to update.
     */
    limit?: number
  }

  /**
   * AcademicTerm upsert
   */
  export type AcademicTermUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicTerm to update in case it exists.
     */
    where: AcademicTermWhereUniqueInput
    /**
     * In case the AcademicTerm found by the `where` argument doesn't exist, create a new AcademicTerm with this data.
     */
    create: XOR<AcademicTermCreateInput, AcademicTermUncheckedCreateInput>
    /**
     * In case the AcademicTerm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicTermUpdateInput, AcademicTermUncheckedUpdateInput>
  }

  /**
   * AcademicTerm delete
   */
  export type AcademicTermDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
    /**
     * Filter which AcademicTerm to delete.
     */
    where: AcademicTermWhereUniqueInput
  }

  /**
   * AcademicTerm deleteMany
   */
  export type AcademicTermDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicTerms to delete
     */
    where?: AcademicTermWhereInput
    /**
     * Limit how many AcademicTerms to delete.
     */
    limit?: number
  }

  /**
   * AcademicTerm.enrollments
   */
  export type AcademicTerm$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * AcademicTerm without action
   */
  export type AcademicTermDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTerm
     */
    select?: AcademicTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTerm
     */
    omit?: AcademicTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTermInclude<ExtArgs> | null
  }


  /**
   * Model Enrollment
   */

  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    termId: number | null
    totalUnits: number | null
  }

  export type EnrollmentSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    termId: number | null
    totalUnits: number | null
  }

  export type EnrollmentMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    termId: number | null
    dateEnrolled: Date | null
    totalUnits: number | null
    status: $Enums.EnrollmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    termId: number | null
    dateEnrolled: Date | null
    totalUnits: number | null
    status: $Enums.EnrollmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentCountAggregateOutputType = {
    id: number
    studentId: number
    termId: number
    dateEnrolled: number
    totalUnits: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EnrollmentAvgAggregateInputType = {
    id?: true
    studentId?: true
    termId?: true
    totalUnits?: true
  }

  export type EnrollmentSumAggregateInputType = {
    id?: true
    studentId?: true
    termId?: true
    totalUnits?: true
  }

  export type EnrollmentMinAggregateInputType = {
    id?: true
    studentId?: true
    termId?: true
    dateEnrolled?: true
    totalUnits?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    id?: true
    studentId?: true
    termId?: true
    dateEnrolled?: true
    totalUnits?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentCountAggregateInputType = {
    id?: true
    studentId?: true
    termId?: true
    dateEnrolled?: true
    totalUnits?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollment to aggregate.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithAggregationInput | EnrollmentOrderByWithAggregationInput[]
    by: EnrollmentScalarFieldEnum[] | EnrollmentScalarFieldEnum
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _avg?: EnrollmentAvgAggregateInputType
    _sum?: EnrollmentSumAggregateInputType
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }

  export type EnrollmentGroupByOutputType = {
    id: number
    studentId: number
    termId: number
    dateEnrolled: Date
    totalUnits: number
    status: $Enums.EnrollmentStatus
    createdAt: Date
    updatedAt: Date
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    termId?: boolean
    dateEnrolled?: boolean
    totalUnits?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    term?: boolean | AcademicTermDefaultArgs<ExtArgs>
    enrollmentSubjects?: boolean | Enrollment$enrollmentSubjectsArgs<ExtArgs>
    _count?: boolean | EnrollmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>



  export type EnrollmentSelectScalar = {
    id?: boolean
    studentId?: boolean
    termId?: boolean
    dateEnrolled?: boolean
    totalUnits?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EnrollmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "termId" | "dateEnrolled" | "totalUnits" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["enrollment"]>
  export type EnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    term?: boolean | AcademicTermDefaultArgs<ExtArgs>
    enrollmentSubjects?: boolean | Enrollment$enrollmentSubjectsArgs<ExtArgs>
    _count?: boolean | EnrollmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollment"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      term: Prisma.$AcademicTermPayload<ExtArgs>
      enrollmentSubjects: Prisma.$EnrollmentSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      termId: number
      dateEnrolled: Date
      totalUnits: number
      status: $Enums.EnrollmentStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["enrollment"]>
    composites: {}
  }

  type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentPayload, S>

  type EnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnrollmentCountAggregateInputType | true
    }

  export interface EnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollment'], meta: { name: 'Enrollment' } }
    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentFindUniqueArgs>(args: SelectSubset<T, EnrollmentFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Enrollment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentFindFirstArgs>(args?: SelectSubset<T, EnrollmentFindFirstArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentFindManyArgs>(args?: SelectSubset<T, EnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
     */
    create<T extends EnrollmentCreateArgs>(args: SelectSubset<T, EnrollmentCreateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Enrollments.
     * @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentCreateManyArgs>(args?: SelectSubset<T, EnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentDeleteArgs>(args: SelectSubset<T, EnrollmentDeleteArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentUpdateArgs>(args: SelectSubset<T, EnrollmentUpdateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentDeleteManyArgs>(args?: SelectSubset<T, EnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentUpdateManyArgs>(args: SelectSubset<T, EnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentUpsertArgs>(args: SelectSubset<T, EnrollmentUpsertArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollment model
   */
  readonly fields: EnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    term<T extends AcademicTermDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AcademicTermDefaultArgs<ExtArgs>>): Prisma__AcademicTermClient<$Result.GetResult<Prisma.$AcademicTermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    enrollmentSubjects<T extends Enrollment$enrollmentSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, Enrollment$enrollmentSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollment model
   */
  interface EnrollmentFieldRefs {
    readonly id: FieldRef<"Enrollment", 'Int'>
    readonly studentId: FieldRef<"Enrollment", 'Int'>
    readonly termId: FieldRef<"Enrollment", 'Int'>
    readonly dateEnrolled: FieldRef<"Enrollment", 'DateTime'>
    readonly totalUnits: FieldRef<"Enrollment", 'Int'>
    readonly status: FieldRef<"Enrollment", 'EnrollmentStatus'>
    readonly createdAt: FieldRef<"Enrollment", 'DateTime'>
    readonly updatedAt: FieldRef<"Enrollment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Enrollment findUnique
   */
  export type EnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findFirst
   */
  export type EnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollment.
     */
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }

  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollment.
     */
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
    /**
     * Limit how many Enrollments to update.
     */
    limit?: number
  }

  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     */
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     */
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }

  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter which Enrollment to delete.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentWhereInput
    /**
     * Limit how many Enrollments to delete.
     */
    limit?: number
  }

  /**
   * Enrollment.enrollmentSubjects
   */
  export type Enrollment$enrollmentSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    where?: EnrollmentSubjectWhereInput
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    cursor?: EnrollmentSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentSubjectScalarFieldEnum | EnrollmentSubjectScalarFieldEnum[]
  }

  /**
   * Enrollment without action
   */
  export type EnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Enrollment
     */
    omit?: EnrollmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model EnrollmentSubject
   */

  export type AggregateEnrollmentSubject = {
    _count: EnrollmentSubjectCountAggregateOutputType | null
    _avg: EnrollmentSubjectAvgAggregateOutputType | null
    _sum: EnrollmentSubjectSumAggregateOutputType | null
    _min: EnrollmentSubjectMinAggregateOutputType | null
    _max: EnrollmentSubjectMaxAggregateOutputType | null
  }

  export type EnrollmentSubjectAvgAggregateOutputType = {
    id: number | null
    enrollmentId: number | null
    sectionId: number | null
    subjectId: number | null
    units: number | null
  }

  export type EnrollmentSubjectSumAggregateOutputType = {
    id: number | null
    enrollmentId: number | null
    sectionId: number | null
    subjectId: number | null
    units: number | null
  }

  export type EnrollmentSubjectMinAggregateOutputType = {
    id: number | null
    enrollmentId: number | null
    sectionId: number | null
    subjectId: number | null
    units: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentSubjectMaxAggregateOutputType = {
    id: number | null
    enrollmentId: number | null
    sectionId: number | null
    subjectId: number | null
    units: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentSubjectCountAggregateOutputType = {
    id: number
    enrollmentId: number
    sectionId: number
    subjectId: number
    units: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EnrollmentSubjectAvgAggregateInputType = {
    id?: true
    enrollmentId?: true
    sectionId?: true
    subjectId?: true
    units?: true
  }

  export type EnrollmentSubjectSumAggregateInputType = {
    id?: true
    enrollmentId?: true
    sectionId?: true
    subjectId?: true
    units?: true
  }

  export type EnrollmentSubjectMinAggregateInputType = {
    id?: true
    enrollmentId?: true
    sectionId?: true
    subjectId?: true
    units?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentSubjectMaxAggregateInputType = {
    id?: true
    enrollmentId?: true
    sectionId?: true
    subjectId?: true
    units?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentSubjectCountAggregateInputType = {
    id?: true
    enrollmentId?: true
    sectionId?: true
    subjectId?: true
    units?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EnrollmentSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnrollmentSubject to aggregate.
     */
    where?: EnrollmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrollmentSubjects to fetch.
     */
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrollmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrollmentSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EnrollmentSubjects
    **/
    _count?: true | EnrollmentSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentSubjectMaxAggregateInputType
  }

  export type GetEnrollmentSubjectAggregateType<T extends EnrollmentSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollmentSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollmentSubject[P]>
      : GetScalarType<T[P], AggregateEnrollmentSubject[P]>
  }




  export type EnrollmentSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentSubjectWhereInput
    orderBy?: EnrollmentSubjectOrderByWithAggregationInput | EnrollmentSubjectOrderByWithAggregationInput[]
    by: EnrollmentSubjectScalarFieldEnum[] | EnrollmentSubjectScalarFieldEnum
    having?: EnrollmentSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentSubjectCountAggregateInputType | true
    _avg?: EnrollmentSubjectAvgAggregateInputType
    _sum?: EnrollmentSubjectSumAggregateInputType
    _min?: EnrollmentSubjectMinAggregateInputType
    _max?: EnrollmentSubjectMaxAggregateInputType
  }

  export type EnrollmentSubjectGroupByOutputType = {
    id: number
    enrollmentId: number
    sectionId: number
    subjectId: number
    units: number
    createdAt: Date
    updatedAt: Date
    _count: EnrollmentSubjectCountAggregateOutputType | null
    _avg: EnrollmentSubjectAvgAggregateOutputType | null
    _sum: EnrollmentSubjectSumAggregateOutputType | null
    _min: EnrollmentSubjectMinAggregateOutputType | null
    _max: EnrollmentSubjectMaxAggregateOutputType | null
  }

  type GetEnrollmentSubjectGroupByPayload<T extends EnrollmentSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentSubjectGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enrollmentId?: boolean
    sectionId?: boolean
    subjectId?: boolean
    units?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    enrollment?: boolean | EnrollmentDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    grade?: boolean | EnrollmentSubject$gradeArgs<ExtArgs>
  }, ExtArgs["result"]["enrollmentSubject"]>



  export type EnrollmentSubjectSelectScalar = {
    id?: boolean
    enrollmentId?: boolean
    sectionId?: boolean
    subjectId?: boolean
    units?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EnrollmentSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "enrollmentId" | "sectionId" | "subjectId" | "units" | "createdAt" | "updatedAt", ExtArgs["result"]["enrollmentSubject"]>
  export type EnrollmentSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollment?: boolean | EnrollmentDefaultArgs<ExtArgs>
    section?: boolean | SectionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    grade?: boolean | EnrollmentSubject$gradeArgs<ExtArgs>
  }

  export type $EnrollmentSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EnrollmentSubject"
    objects: {
      enrollment: Prisma.$EnrollmentPayload<ExtArgs>
      section: Prisma.$SectionPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      enrollmentId: number
      sectionId: number
      subjectId: number
      units: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["enrollmentSubject"]>
    composites: {}
  }

  type EnrollmentSubjectGetPayload<S extends boolean | null | undefined | EnrollmentSubjectDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentSubjectPayload, S>

  type EnrollmentSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnrollmentSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnrollmentSubjectCountAggregateInputType | true
    }

  export interface EnrollmentSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnrollmentSubject'], meta: { name: 'EnrollmentSubject' } }
    /**
     * Find zero or one EnrollmentSubject that matches the filter.
     * @param {EnrollmentSubjectFindUniqueArgs} args - Arguments to find a EnrollmentSubject
     * @example
     * // Get one EnrollmentSubject
     * const enrollmentSubject = await prisma.enrollmentSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentSubjectFindUniqueArgs>(args: SelectSubset<T, EnrollmentSubjectFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EnrollmentSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnrollmentSubjectFindUniqueOrThrowArgs} args - Arguments to find a EnrollmentSubject
     * @example
     * // Get one EnrollmentSubject
     * const enrollmentSubject = await prisma.enrollmentSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EnrollmentSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectFindFirstArgs} args - Arguments to find a EnrollmentSubject
     * @example
     * // Get one EnrollmentSubject
     * const enrollmentSubject = await prisma.enrollmentSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentSubjectFindFirstArgs>(args?: SelectSubset<T, EnrollmentSubjectFindFirstArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EnrollmentSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectFindFirstOrThrowArgs} args - Arguments to find a EnrollmentSubject
     * @example
     * // Get one EnrollmentSubject
     * const enrollmentSubject = await prisma.enrollmentSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EnrollmentSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EnrollmentSubjects
     * const enrollmentSubjects = await prisma.enrollmentSubject.findMany()
     * 
     * // Get first 10 EnrollmentSubjects
     * const enrollmentSubjects = await prisma.enrollmentSubject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentSubjectWithIdOnly = await prisma.enrollmentSubject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentSubjectFindManyArgs>(args?: SelectSubset<T, EnrollmentSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EnrollmentSubject.
     * @param {EnrollmentSubjectCreateArgs} args - Arguments to create a EnrollmentSubject.
     * @example
     * // Create one EnrollmentSubject
     * const EnrollmentSubject = await prisma.enrollmentSubject.create({
     *   data: {
     *     // ... data to create a EnrollmentSubject
     *   }
     * })
     * 
     */
    create<T extends EnrollmentSubjectCreateArgs>(args: SelectSubset<T, EnrollmentSubjectCreateArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EnrollmentSubjects.
     * @param {EnrollmentSubjectCreateManyArgs} args - Arguments to create many EnrollmentSubjects.
     * @example
     * // Create many EnrollmentSubjects
     * const enrollmentSubject = await prisma.enrollmentSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentSubjectCreateManyArgs>(args?: SelectSubset<T, EnrollmentSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EnrollmentSubject.
     * @param {EnrollmentSubjectDeleteArgs} args - Arguments to delete one EnrollmentSubject.
     * @example
     * // Delete one EnrollmentSubject
     * const EnrollmentSubject = await prisma.enrollmentSubject.delete({
     *   where: {
     *     // ... filter to delete one EnrollmentSubject
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentSubjectDeleteArgs>(args: SelectSubset<T, EnrollmentSubjectDeleteArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EnrollmentSubject.
     * @param {EnrollmentSubjectUpdateArgs} args - Arguments to update one EnrollmentSubject.
     * @example
     * // Update one EnrollmentSubject
     * const enrollmentSubject = await prisma.enrollmentSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentSubjectUpdateArgs>(args: SelectSubset<T, EnrollmentSubjectUpdateArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EnrollmentSubjects.
     * @param {EnrollmentSubjectDeleteManyArgs} args - Arguments to filter EnrollmentSubjects to delete.
     * @example
     * // Delete a few EnrollmentSubjects
     * const { count } = await prisma.enrollmentSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentSubjectDeleteManyArgs>(args?: SelectSubset<T, EnrollmentSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EnrollmentSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EnrollmentSubjects
     * const enrollmentSubject = await prisma.enrollmentSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentSubjectUpdateManyArgs>(args: SelectSubset<T, EnrollmentSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EnrollmentSubject.
     * @param {EnrollmentSubjectUpsertArgs} args - Arguments to update or create a EnrollmentSubject.
     * @example
     * // Update or create a EnrollmentSubject
     * const enrollmentSubject = await prisma.enrollmentSubject.upsert({
     *   create: {
     *     // ... data to create a EnrollmentSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EnrollmentSubject we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentSubjectUpsertArgs>(args: SelectSubset<T, EnrollmentSubjectUpsertArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EnrollmentSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectCountArgs} args - Arguments to filter EnrollmentSubjects to count.
     * @example
     * // Count the number of EnrollmentSubjects
     * const count = await prisma.enrollmentSubject.count({
     *   where: {
     *     // ... the filter for the EnrollmentSubjects we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentSubjectCountArgs>(
      args?: Subset<T, EnrollmentSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EnrollmentSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentSubjectAggregateArgs>(args: Subset<T, EnrollmentSubjectAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentSubjectAggregateType<T>>

    /**
     * Group by EnrollmentSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentSubjectGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EnrollmentSubject model
   */
  readonly fields: EnrollmentSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EnrollmentSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollment<T extends EnrollmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnrollmentDefaultArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends EnrollmentSubject$gradeArgs<ExtArgs> = {}>(args?: Subset<T, EnrollmentSubject$gradeArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EnrollmentSubject model
   */
  interface EnrollmentSubjectFieldRefs {
    readonly id: FieldRef<"EnrollmentSubject", 'Int'>
    readonly enrollmentId: FieldRef<"EnrollmentSubject", 'Int'>
    readonly sectionId: FieldRef<"EnrollmentSubject", 'Int'>
    readonly subjectId: FieldRef<"EnrollmentSubject", 'Int'>
    readonly units: FieldRef<"EnrollmentSubject", 'Int'>
    readonly createdAt: FieldRef<"EnrollmentSubject", 'DateTime'>
    readonly updatedAt: FieldRef<"EnrollmentSubject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EnrollmentSubject findUnique
   */
  export type EnrollmentSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which EnrollmentSubject to fetch.
     */
    where: EnrollmentSubjectWhereUniqueInput
  }

  /**
   * EnrollmentSubject findUniqueOrThrow
   */
  export type EnrollmentSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which EnrollmentSubject to fetch.
     */
    where: EnrollmentSubjectWhereUniqueInput
  }

  /**
   * EnrollmentSubject findFirst
   */
  export type EnrollmentSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which EnrollmentSubject to fetch.
     */
    where?: EnrollmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrollmentSubjects to fetch.
     */
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnrollmentSubjects.
     */
    cursor?: EnrollmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrollmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrollmentSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnrollmentSubjects.
     */
    distinct?: EnrollmentSubjectScalarFieldEnum | EnrollmentSubjectScalarFieldEnum[]
  }

  /**
   * EnrollmentSubject findFirstOrThrow
   */
  export type EnrollmentSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which EnrollmentSubject to fetch.
     */
    where?: EnrollmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrollmentSubjects to fetch.
     */
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnrollmentSubjects.
     */
    cursor?: EnrollmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrollmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrollmentSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnrollmentSubjects.
     */
    distinct?: EnrollmentSubjectScalarFieldEnum | EnrollmentSubjectScalarFieldEnum[]
  }

  /**
   * EnrollmentSubject findMany
   */
  export type EnrollmentSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * Filter, which EnrollmentSubjects to fetch.
     */
    where?: EnrollmentSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrollmentSubjects to fetch.
     */
    orderBy?: EnrollmentSubjectOrderByWithRelationInput | EnrollmentSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EnrollmentSubjects.
     */
    cursor?: EnrollmentSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrollmentSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrollmentSubjects.
     */
    skip?: number
    distinct?: EnrollmentSubjectScalarFieldEnum | EnrollmentSubjectScalarFieldEnum[]
  }

  /**
   * EnrollmentSubject create
   */
  export type EnrollmentSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a EnrollmentSubject.
     */
    data: XOR<EnrollmentSubjectCreateInput, EnrollmentSubjectUncheckedCreateInput>
  }

  /**
   * EnrollmentSubject createMany
   */
  export type EnrollmentSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EnrollmentSubjects.
     */
    data: EnrollmentSubjectCreateManyInput | EnrollmentSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EnrollmentSubject update
   */
  export type EnrollmentSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a EnrollmentSubject.
     */
    data: XOR<EnrollmentSubjectUpdateInput, EnrollmentSubjectUncheckedUpdateInput>
    /**
     * Choose, which EnrollmentSubject to update.
     */
    where: EnrollmentSubjectWhereUniqueInput
  }

  /**
   * EnrollmentSubject updateMany
   */
  export type EnrollmentSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EnrollmentSubjects.
     */
    data: XOR<EnrollmentSubjectUpdateManyMutationInput, EnrollmentSubjectUncheckedUpdateManyInput>
    /**
     * Filter which EnrollmentSubjects to update
     */
    where?: EnrollmentSubjectWhereInput
    /**
     * Limit how many EnrollmentSubjects to update.
     */
    limit?: number
  }

  /**
   * EnrollmentSubject upsert
   */
  export type EnrollmentSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the EnrollmentSubject to update in case it exists.
     */
    where: EnrollmentSubjectWhereUniqueInput
    /**
     * In case the EnrollmentSubject found by the `where` argument doesn't exist, create a new EnrollmentSubject with this data.
     */
    create: XOR<EnrollmentSubjectCreateInput, EnrollmentSubjectUncheckedCreateInput>
    /**
     * In case the EnrollmentSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentSubjectUpdateInput, EnrollmentSubjectUncheckedUpdateInput>
  }

  /**
   * EnrollmentSubject delete
   */
  export type EnrollmentSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
    /**
     * Filter which EnrollmentSubject to delete.
     */
    where: EnrollmentSubjectWhereUniqueInput
  }

  /**
   * EnrollmentSubject deleteMany
   */
  export type EnrollmentSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnrollmentSubjects to delete
     */
    where?: EnrollmentSubjectWhereInput
    /**
     * Limit how many EnrollmentSubjects to delete.
     */
    limit?: number
  }

  /**
   * EnrollmentSubject.grade
   */
  export type EnrollmentSubject$gradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
  }

  /**
   * EnrollmentSubject without action
   */
  export type EnrollmentSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrollmentSubject
     */
    select?: EnrollmentSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnrollmentSubject
     */
    omit?: EnrollmentSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentSubjectInclude<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    id: number | null
    enrollmentSubjectId: number | null
    encodedBy: number | null
  }

  export type GradeSumAggregateOutputType = {
    id: number | null
    enrollmentSubjectId: number | null
    encodedBy: number | null
  }

  export type GradeMinAggregateOutputType = {
    id: number | null
    enrollmentSubjectId: number | null
    gradeValue: $Enums.GradeValue | null
    remarks: string | null
    encodedBy: number | null
    approved: boolean | null
    dateEncoded: Date | null
    repeatEligibleDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GradeMaxAggregateOutputType = {
    id: number | null
    enrollmentSubjectId: number | null
    gradeValue: $Enums.GradeValue | null
    remarks: string | null
    encodedBy: number | null
    approved: boolean | null
    dateEncoded: Date | null
    repeatEligibleDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    enrollmentSubjectId: number
    gradeValue: number
    remarks: number
    encodedBy: number
    approved: number
    dateEncoded: number
    repeatEligibleDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    id?: true
    enrollmentSubjectId?: true
    encodedBy?: true
  }

  export type GradeSumAggregateInputType = {
    id?: true
    enrollmentSubjectId?: true
    encodedBy?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    enrollmentSubjectId?: true
    gradeValue?: true
    remarks?: true
    encodedBy?: true
    approved?: true
    dateEncoded?: true
    repeatEligibleDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    enrollmentSubjectId?: true
    gradeValue?: true
    remarks?: true
    encodedBy?: true
    approved?: true
    dateEncoded?: true
    repeatEligibleDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    enrollmentSubjectId?: true
    gradeValue?: true
    remarks?: true
    encodedBy?: true
    approved?: true
    dateEncoded?: true
    repeatEligibleDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: number
    enrollmentSubjectId: number
    gradeValue: $Enums.GradeValue
    remarks: string | null
    encodedBy: number
    approved: boolean
    dateEncoded: Date
    repeatEligibleDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enrollmentSubjectId?: boolean
    gradeValue?: boolean
    remarks?: boolean
    encodedBy?: boolean
    approved?: boolean
    dateEncoded?: boolean
    repeatEligibleDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    enrollmentSubject?: boolean | EnrollmentSubjectDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>



  export type GradeSelectScalar = {
    id?: boolean
    enrollmentSubjectId?: boolean
    gradeValue?: boolean
    remarks?: boolean
    encodedBy?: boolean
    approved?: boolean
    dateEncoded?: boolean
    repeatEligibleDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "enrollmentSubjectId" | "gradeValue" | "remarks" | "encodedBy" | "approved" | "dateEncoded" | "repeatEligibleDate" | "createdAt" | "updatedAt", ExtArgs["result"]["grade"]>
  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollmentSubject?: boolean | EnrollmentSubjectDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      enrollmentSubject: Prisma.$EnrollmentSubjectPayload<ExtArgs>
      professor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      enrollmentSubjectId: number
      gradeValue: $Enums.GradeValue
      remarks: string | null
      encodedBy: number
      approved: boolean
      dateEncoded: Date
      repeatEligibleDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollmentSubject<T extends EnrollmentSubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnrollmentSubjectDefaultArgs<ExtArgs>>): Prisma__EnrollmentSubjectClient<$Result.GetResult<Prisma.$EnrollmentSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'Int'>
    readonly enrollmentSubjectId: FieldRef<"Grade", 'Int'>
    readonly gradeValue: FieldRef<"Grade", 'GradeValue'>
    readonly remarks: FieldRef<"Grade", 'String'>
    readonly encodedBy: FieldRef<"Grade", 'Int'>
    readonly approved: FieldRef<"Grade", 'Boolean'>
    readonly dateEncoded: FieldRef<"Grade", 'DateTime'>
    readonly repeatEligibleDate: FieldRef<"Grade", 'DateTime'>
    readonly createdAt: FieldRef<"Grade", 'DateTime'>
    readonly updatedAt: FieldRef<"Grade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to delete.
     */
    limit?: number
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model IncResolution
   */

  export type AggregateIncResolution = {
    _count: IncResolutionCountAggregateOutputType | null
    _avg: IncResolutionAvgAggregateOutputType | null
    _sum: IncResolutionSumAggregateOutputType | null
    _min: IncResolutionMinAggregateOutputType | null
    _max: IncResolutionMaxAggregateOutputType | null
  }

  export type IncResolutionAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    subjectId: number | null
    professorId: number | null
  }

  export type IncResolutionSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    subjectId: number | null
    professorId: number | null
  }

  export type IncResolutionMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    subjectId: number | null
    oldGrade: string | null
    newGrade: $Enums.GradeValue | null
    professorId: number | null
    approvedByRegistrar: boolean | null
    dateSubmitted: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IncResolutionMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    subjectId: number | null
    oldGrade: string | null
    newGrade: $Enums.GradeValue | null
    professorId: number | null
    approvedByRegistrar: boolean | null
    dateSubmitted: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IncResolutionCountAggregateOutputType = {
    id: number
    studentId: number
    subjectId: number
    oldGrade: number
    newGrade: number
    professorId: number
    approvedByRegistrar: number
    dateSubmitted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IncResolutionAvgAggregateInputType = {
    id?: true
    studentId?: true
    subjectId?: true
    professorId?: true
  }

  export type IncResolutionSumAggregateInputType = {
    id?: true
    studentId?: true
    subjectId?: true
    professorId?: true
  }

  export type IncResolutionMinAggregateInputType = {
    id?: true
    studentId?: true
    subjectId?: true
    oldGrade?: true
    newGrade?: true
    professorId?: true
    approvedByRegistrar?: true
    dateSubmitted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IncResolutionMaxAggregateInputType = {
    id?: true
    studentId?: true
    subjectId?: true
    oldGrade?: true
    newGrade?: true
    professorId?: true
    approvedByRegistrar?: true
    dateSubmitted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IncResolutionCountAggregateInputType = {
    id?: true
    studentId?: true
    subjectId?: true
    oldGrade?: true
    newGrade?: true
    professorId?: true
    approvedByRegistrar?: true
    dateSubmitted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IncResolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IncResolution to aggregate.
     */
    where?: IncResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncResolutions to fetch.
     */
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IncResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncResolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IncResolutions
    **/
    _count?: true | IncResolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IncResolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IncResolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncResolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncResolutionMaxAggregateInputType
  }

  export type GetIncResolutionAggregateType<T extends IncResolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateIncResolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncResolution[P]>
      : GetScalarType<T[P], AggregateIncResolution[P]>
  }




  export type IncResolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncResolutionWhereInput
    orderBy?: IncResolutionOrderByWithAggregationInput | IncResolutionOrderByWithAggregationInput[]
    by: IncResolutionScalarFieldEnum[] | IncResolutionScalarFieldEnum
    having?: IncResolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncResolutionCountAggregateInputType | true
    _avg?: IncResolutionAvgAggregateInputType
    _sum?: IncResolutionSumAggregateInputType
    _min?: IncResolutionMinAggregateInputType
    _max?: IncResolutionMaxAggregateInputType
  }

  export type IncResolutionGroupByOutputType = {
    id: number
    studentId: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar: boolean
    dateSubmitted: Date
    createdAt: Date
    updatedAt: Date
    _count: IncResolutionCountAggregateOutputType | null
    _avg: IncResolutionAvgAggregateOutputType | null
    _sum: IncResolutionSumAggregateOutputType | null
    _min: IncResolutionMinAggregateOutputType | null
    _max: IncResolutionMaxAggregateOutputType | null
  }

  type GetIncResolutionGroupByPayload<T extends IncResolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IncResolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IncResolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IncResolutionGroupByOutputType[P]>
            : GetScalarType<T[P], IncResolutionGroupByOutputType[P]>
        }
      >
    >


  export type IncResolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    subjectId?: boolean
    oldGrade?: boolean
    newGrade?: boolean
    professorId?: boolean
    approvedByRegistrar?: boolean
    dateSubmitted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["incResolution"]>



  export type IncResolutionSelectScalar = {
    id?: boolean
    studentId?: boolean
    subjectId?: boolean
    oldGrade?: boolean
    newGrade?: boolean
    professorId?: boolean
    approvedByRegistrar?: boolean
    dateSubmitted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IncResolutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "subjectId" | "oldGrade" | "newGrade" | "professorId" | "approvedByRegistrar" | "dateSubmitted" | "createdAt" | "updatedAt", ExtArgs["result"]["incResolution"]>
  export type IncResolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }

  export type $IncResolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IncResolution"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
      professor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      subjectId: number
      oldGrade: string
      newGrade: $Enums.GradeValue
      professorId: number
      approvedByRegistrar: boolean
      dateSubmitted: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["incResolution"]>
    composites: {}
  }

  type IncResolutionGetPayload<S extends boolean | null | undefined | IncResolutionDefaultArgs> = $Result.GetResult<Prisma.$IncResolutionPayload, S>

  type IncResolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IncResolutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IncResolutionCountAggregateInputType | true
    }

  export interface IncResolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IncResolution'], meta: { name: 'IncResolution' } }
    /**
     * Find zero or one IncResolution that matches the filter.
     * @param {IncResolutionFindUniqueArgs} args - Arguments to find a IncResolution
     * @example
     * // Get one IncResolution
     * const incResolution = await prisma.incResolution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IncResolutionFindUniqueArgs>(args: SelectSubset<T, IncResolutionFindUniqueArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IncResolution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IncResolutionFindUniqueOrThrowArgs} args - Arguments to find a IncResolution
     * @example
     * // Get one IncResolution
     * const incResolution = await prisma.incResolution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IncResolutionFindUniqueOrThrowArgs>(args: SelectSubset<T, IncResolutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IncResolution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionFindFirstArgs} args - Arguments to find a IncResolution
     * @example
     * // Get one IncResolution
     * const incResolution = await prisma.incResolution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IncResolutionFindFirstArgs>(args?: SelectSubset<T, IncResolutionFindFirstArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IncResolution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionFindFirstOrThrowArgs} args - Arguments to find a IncResolution
     * @example
     * // Get one IncResolution
     * const incResolution = await prisma.incResolution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IncResolutionFindFirstOrThrowArgs>(args?: SelectSubset<T, IncResolutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IncResolutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IncResolutions
     * const incResolutions = await prisma.incResolution.findMany()
     * 
     * // Get first 10 IncResolutions
     * const incResolutions = await prisma.incResolution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const incResolutionWithIdOnly = await prisma.incResolution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IncResolutionFindManyArgs>(args?: SelectSubset<T, IncResolutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IncResolution.
     * @param {IncResolutionCreateArgs} args - Arguments to create a IncResolution.
     * @example
     * // Create one IncResolution
     * const IncResolution = await prisma.incResolution.create({
     *   data: {
     *     // ... data to create a IncResolution
     *   }
     * })
     * 
     */
    create<T extends IncResolutionCreateArgs>(args: SelectSubset<T, IncResolutionCreateArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IncResolutions.
     * @param {IncResolutionCreateManyArgs} args - Arguments to create many IncResolutions.
     * @example
     * // Create many IncResolutions
     * const incResolution = await prisma.incResolution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IncResolutionCreateManyArgs>(args?: SelectSubset<T, IncResolutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a IncResolution.
     * @param {IncResolutionDeleteArgs} args - Arguments to delete one IncResolution.
     * @example
     * // Delete one IncResolution
     * const IncResolution = await prisma.incResolution.delete({
     *   where: {
     *     // ... filter to delete one IncResolution
     *   }
     * })
     * 
     */
    delete<T extends IncResolutionDeleteArgs>(args: SelectSubset<T, IncResolutionDeleteArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IncResolution.
     * @param {IncResolutionUpdateArgs} args - Arguments to update one IncResolution.
     * @example
     * // Update one IncResolution
     * const incResolution = await prisma.incResolution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IncResolutionUpdateArgs>(args: SelectSubset<T, IncResolutionUpdateArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IncResolutions.
     * @param {IncResolutionDeleteManyArgs} args - Arguments to filter IncResolutions to delete.
     * @example
     * // Delete a few IncResolutions
     * const { count } = await prisma.incResolution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IncResolutionDeleteManyArgs>(args?: SelectSubset<T, IncResolutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IncResolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IncResolutions
     * const incResolution = await prisma.incResolution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IncResolutionUpdateManyArgs>(args: SelectSubset<T, IncResolutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IncResolution.
     * @param {IncResolutionUpsertArgs} args - Arguments to update or create a IncResolution.
     * @example
     * // Update or create a IncResolution
     * const incResolution = await prisma.incResolution.upsert({
     *   create: {
     *     // ... data to create a IncResolution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IncResolution we want to update
     *   }
     * })
     */
    upsert<T extends IncResolutionUpsertArgs>(args: SelectSubset<T, IncResolutionUpsertArgs<ExtArgs>>): Prisma__IncResolutionClient<$Result.GetResult<Prisma.$IncResolutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IncResolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionCountArgs} args - Arguments to filter IncResolutions to count.
     * @example
     * // Count the number of IncResolutions
     * const count = await prisma.incResolution.count({
     *   where: {
     *     // ... the filter for the IncResolutions we want to count
     *   }
     * })
    **/
    count<T extends IncResolutionCountArgs>(
      args?: Subset<T, IncResolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncResolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IncResolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncResolutionAggregateArgs>(args: Subset<T, IncResolutionAggregateArgs>): Prisma.PrismaPromise<GetIncResolutionAggregateType<T>>

    /**
     * Group by IncResolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncResolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IncResolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IncResolutionGroupByArgs['orderBy'] }
        : { orderBy?: IncResolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IncResolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncResolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IncResolution model
   */
  readonly fields: IncResolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IncResolution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IncResolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IncResolution model
   */
  interface IncResolutionFieldRefs {
    readonly id: FieldRef<"IncResolution", 'Int'>
    readonly studentId: FieldRef<"IncResolution", 'Int'>
    readonly subjectId: FieldRef<"IncResolution", 'Int'>
    readonly oldGrade: FieldRef<"IncResolution", 'String'>
    readonly newGrade: FieldRef<"IncResolution", 'GradeValue'>
    readonly professorId: FieldRef<"IncResolution", 'Int'>
    readonly approvedByRegistrar: FieldRef<"IncResolution", 'Boolean'>
    readonly dateSubmitted: FieldRef<"IncResolution", 'DateTime'>
    readonly createdAt: FieldRef<"IncResolution", 'DateTime'>
    readonly updatedAt: FieldRef<"IncResolution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IncResolution findUnique
   */
  export type IncResolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * Filter, which IncResolution to fetch.
     */
    where: IncResolutionWhereUniqueInput
  }

  /**
   * IncResolution findUniqueOrThrow
   */
  export type IncResolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * Filter, which IncResolution to fetch.
     */
    where: IncResolutionWhereUniqueInput
  }

  /**
   * IncResolution findFirst
   */
  export type IncResolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * Filter, which IncResolution to fetch.
     */
    where?: IncResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncResolutions to fetch.
     */
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IncResolutions.
     */
    cursor?: IncResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncResolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IncResolutions.
     */
    distinct?: IncResolutionScalarFieldEnum | IncResolutionScalarFieldEnum[]
  }

  /**
   * IncResolution findFirstOrThrow
   */
  export type IncResolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * Filter, which IncResolution to fetch.
     */
    where?: IncResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncResolutions to fetch.
     */
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IncResolutions.
     */
    cursor?: IncResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncResolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IncResolutions.
     */
    distinct?: IncResolutionScalarFieldEnum | IncResolutionScalarFieldEnum[]
  }

  /**
   * IncResolution findMany
   */
  export type IncResolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * Filter, which IncResolutions to fetch.
     */
    where?: IncResolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncResolutions to fetch.
     */
    orderBy?: IncResolutionOrderByWithRelationInput | IncResolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IncResolutions.
     */
    cursor?: IncResolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncResolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncResolutions.
     */
    skip?: number
    distinct?: IncResolutionScalarFieldEnum | IncResolutionScalarFieldEnum[]
  }

  /**
   * IncResolution create
   */
  export type IncResolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a IncResolution.
     */
    data: XOR<IncResolutionCreateInput, IncResolutionUncheckedCreateInput>
  }

  /**
   * IncResolution createMany
   */
  export type IncResolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IncResolutions.
     */
    data: IncResolutionCreateManyInput | IncResolutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IncResolution update
   */
  export type IncResolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a IncResolution.
     */
    data: XOR<IncResolutionUpdateInput, IncResolutionUncheckedUpdateInput>
    /**
     * Choose, which IncResolution to update.
     */
    where: IncResolutionWhereUniqueInput
  }

  /**
   * IncResolution updateMany
   */
  export type IncResolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IncResolutions.
     */
    data: XOR<IncResolutionUpdateManyMutationInput, IncResolutionUncheckedUpdateManyInput>
    /**
     * Filter which IncResolutions to update
     */
    where?: IncResolutionWhereInput
    /**
     * Limit how many IncResolutions to update.
     */
    limit?: number
  }

  /**
   * IncResolution upsert
   */
  export type IncResolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the IncResolution to update in case it exists.
     */
    where: IncResolutionWhereUniqueInput
    /**
     * In case the IncResolution found by the `where` argument doesn't exist, create a new IncResolution with this data.
     */
    create: XOR<IncResolutionCreateInput, IncResolutionUncheckedCreateInput>
    /**
     * In case the IncResolution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IncResolutionUpdateInput, IncResolutionUncheckedUpdateInput>
  }

  /**
   * IncResolution delete
   */
  export type IncResolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
    /**
     * Filter which IncResolution to delete.
     */
    where: IncResolutionWhereUniqueInput
  }

  /**
   * IncResolution deleteMany
   */
  export type IncResolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IncResolutions to delete
     */
    where?: IncResolutionWhereInput
    /**
     * Limit how many IncResolutions to delete.
     */
    limit?: number
  }

  /**
   * IncResolution without action
   */
  export type IncResolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncResolution
     */
    select?: IncResolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IncResolution
     */
    omit?: IncResolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncResolutionInclude<ExtArgs> | null
  }


  /**
   * Model AnalyticsLog
   */

  export type AggregateAnalyticsLog = {
    _count: AnalyticsLogCountAggregateOutputType | null
    _avg: AnalyticsLogAvgAggregateOutputType | null
    _sum: AnalyticsLogSumAggregateOutputType | null
    _min: AnalyticsLogMinAggregateOutputType | null
    _max: AnalyticsLogMaxAggregateOutputType | null
  }

  export type AnalyticsLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AnalyticsLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AnalyticsLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    description: string | null
    timestamp: Date | null
  }

  export type AnalyticsLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    description: string | null
    timestamp: Date | null
  }

  export type AnalyticsLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    description: number
    timestamp: number
    _all: number
  }


  export type AnalyticsLogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AnalyticsLogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AnalyticsLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    description?: true
    timestamp?: true
  }

  export type AnalyticsLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    description?: true
    timestamp?: true
  }

  export type AnalyticsLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    description?: true
    timestamp?: true
    _all?: true
  }

  export type AnalyticsLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsLog to aggregate.
     */
    where?: AnalyticsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsLogs to fetch.
     */
    orderBy?: AnalyticsLogOrderByWithRelationInput | AnalyticsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalyticsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnalyticsLogs
    **/
    _count?: true | AnalyticsLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnalyticsLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnalyticsLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalyticsLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalyticsLogMaxAggregateInputType
  }

  export type GetAnalyticsLogAggregateType<T extends AnalyticsLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalyticsLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalyticsLog[P]>
      : GetScalarType<T[P], AggregateAnalyticsLog[P]>
  }




  export type AnalyticsLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsLogWhereInput
    orderBy?: AnalyticsLogOrderByWithAggregationInput | AnalyticsLogOrderByWithAggregationInput[]
    by: AnalyticsLogScalarFieldEnum[] | AnalyticsLogScalarFieldEnum
    having?: AnalyticsLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalyticsLogCountAggregateInputType | true
    _avg?: AnalyticsLogAvgAggregateInputType
    _sum?: AnalyticsLogSumAggregateInputType
    _min?: AnalyticsLogMinAggregateInputType
    _max?: AnalyticsLogMaxAggregateInputType
  }

  export type AnalyticsLogGroupByOutputType = {
    id: number
    userId: number
    action: string
    description: string | null
    timestamp: Date
    _count: AnalyticsLogCountAggregateOutputType | null
    _avg: AnalyticsLogAvgAggregateOutputType | null
    _sum: AnalyticsLogSumAggregateOutputType | null
    _min: AnalyticsLogMinAggregateOutputType | null
    _max: AnalyticsLogMaxAggregateOutputType | null
  }

  type GetAnalyticsLogGroupByPayload<T extends AnalyticsLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnalyticsLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalyticsLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalyticsLogGroupByOutputType[P]>
            : GetScalarType<T[P], AnalyticsLogGroupByOutputType[P]>
        }
      >
    >


  export type AnalyticsLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    description?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsLog"]>



  export type AnalyticsLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    description?: boolean
    timestamp?: boolean
  }

  export type AnalyticsLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "description" | "timestamp", ExtArgs["result"]["analyticsLog"]>
  export type AnalyticsLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AnalyticsLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnalyticsLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      action: string
      description: string | null
      timestamp: Date
    }, ExtArgs["result"]["analyticsLog"]>
    composites: {}
  }

  type AnalyticsLogGetPayload<S extends boolean | null | undefined | AnalyticsLogDefaultArgs> = $Result.GetResult<Prisma.$AnalyticsLogPayload, S>

  type AnalyticsLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnalyticsLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnalyticsLogCountAggregateInputType | true
    }

  export interface AnalyticsLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnalyticsLog'], meta: { name: 'AnalyticsLog' } }
    /**
     * Find zero or one AnalyticsLog that matches the filter.
     * @param {AnalyticsLogFindUniqueArgs} args - Arguments to find a AnalyticsLog
     * @example
     * // Get one AnalyticsLog
     * const analyticsLog = await prisma.analyticsLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnalyticsLogFindUniqueArgs>(args: SelectSubset<T, AnalyticsLogFindUniqueArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnalyticsLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnalyticsLogFindUniqueOrThrowArgs} args - Arguments to find a AnalyticsLog
     * @example
     * // Get one AnalyticsLog
     * const analyticsLog = await prisma.analyticsLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnalyticsLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AnalyticsLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnalyticsLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogFindFirstArgs} args - Arguments to find a AnalyticsLog
     * @example
     * // Get one AnalyticsLog
     * const analyticsLog = await prisma.analyticsLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnalyticsLogFindFirstArgs>(args?: SelectSubset<T, AnalyticsLogFindFirstArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnalyticsLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogFindFirstOrThrowArgs} args - Arguments to find a AnalyticsLog
     * @example
     * // Get one AnalyticsLog
     * const analyticsLog = await prisma.analyticsLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnalyticsLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AnalyticsLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnalyticsLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnalyticsLogs
     * const analyticsLogs = await prisma.analyticsLog.findMany()
     * 
     * // Get first 10 AnalyticsLogs
     * const analyticsLogs = await prisma.analyticsLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analyticsLogWithIdOnly = await prisma.analyticsLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnalyticsLogFindManyArgs>(args?: SelectSubset<T, AnalyticsLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnalyticsLog.
     * @param {AnalyticsLogCreateArgs} args - Arguments to create a AnalyticsLog.
     * @example
     * // Create one AnalyticsLog
     * const AnalyticsLog = await prisma.analyticsLog.create({
     *   data: {
     *     // ... data to create a AnalyticsLog
     *   }
     * })
     * 
     */
    create<T extends AnalyticsLogCreateArgs>(args: SelectSubset<T, AnalyticsLogCreateArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnalyticsLogs.
     * @param {AnalyticsLogCreateManyArgs} args - Arguments to create many AnalyticsLogs.
     * @example
     * // Create many AnalyticsLogs
     * const analyticsLog = await prisma.analyticsLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnalyticsLogCreateManyArgs>(args?: SelectSubset<T, AnalyticsLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AnalyticsLog.
     * @param {AnalyticsLogDeleteArgs} args - Arguments to delete one AnalyticsLog.
     * @example
     * // Delete one AnalyticsLog
     * const AnalyticsLog = await prisma.analyticsLog.delete({
     *   where: {
     *     // ... filter to delete one AnalyticsLog
     *   }
     * })
     * 
     */
    delete<T extends AnalyticsLogDeleteArgs>(args: SelectSubset<T, AnalyticsLogDeleteArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnalyticsLog.
     * @param {AnalyticsLogUpdateArgs} args - Arguments to update one AnalyticsLog.
     * @example
     * // Update one AnalyticsLog
     * const analyticsLog = await prisma.analyticsLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnalyticsLogUpdateArgs>(args: SelectSubset<T, AnalyticsLogUpdateArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnalyticsLogs.
     * @param {AnalyticsLogDeleteManyArgs} args - Arguments to filter AnalyticsLogs to delete.
     * @example
     * // Delete a few AnalyticsLogs
     * const { count } = await prisma.analyticsLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnalyticsLogDeleteManyArgs>(args?: SelectSubset<T, AnalyticsLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalyticsLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnalyticsLogs
     * const analyticsLog = await prisma.analyticsLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnalyticsLogUpdateManyArgs>(args: SelectSubset<T, AnalyticsLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnalyticsLog.
     * @param {AnalyticsLogUpsertArgs} args - Arguments to update or create a AnalyticsLog.
     * @example
     * // Update or create a AnalyticsLog
     * const analyticsLog = await prisma.analyticsLog.upsert({
     *   create: {
     *     // ... data to create a AnalyticsLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnalyticsLog we want to update
     *   }
     * })
     */
    upsert<T extends AnalyticsLogUpsertArgs>(args: SelectSubset<T, AnalyticsLogUpsertArgs<ExtArgs>>): Prisma__AnalyticsLogClient<$Result.GetResult<Prisma.$AnalyticsLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnalyticsLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogCountArgs} args - Arguments to filter AnalyticsLogs to count.
     * @example
     * // Count the number of AnalyticsLogs
     * const count = await prisma.analyticsLog.count({
     *   where: {
     *     // ... the filter for the AnalyticsLogs we want to count
     *   }
     * })
    **/
    count<T extends AnalyticsLogCountArgs>(
      args?: Subset<T, AnalyticsLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalyticsLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnalyticsLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalyticsLogAggregateArgs>(args: Subset<T, AnalyticsLogAggregateArgs>): Prisma.PrismaPromise<GetAnalyticsLogAggregateType<T>>

    /**
     * Group by AnalyticsLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalyticsLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalyticsLogGroupByArgs['orderBy'] }
        : { orderBy?: AnalyticsLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalyticsLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalyticsLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnalyticsLog model
   */
  readonly fields: AnalyticsLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnalyticsLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnalyticsLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnalyticsLog model
   */
  interface AnalyticsLogFieldRefs {
    readonly id: FieldRef<"AnalyticsLog", 'Int'>
    readonly userId: FieldRef<"AnalyticsLog", 'Int'>
    readonly action: FieldRef<"AnalyticsLog", 'String'>
    readonly description: FieldRef<"AnalyticsLog", 'String'>
    readonly timestamp: FieldRef<"AnalyticsLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnalyticsLog findUnique
   */
  export type AnalyticsLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsLog to fetch.
     */
    where: AnalyticsLogWhereUniqueInput
  }

  /**
   * AnalyticsLog findUniqueOrThrow
   */
  export type AnalyticsLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsLog to fetch.
     */
    where: AnalyticsLogWhereUniqueInput
  }

  /**
   * AnalyticsLog findFirst
   */
  export type AnalyticsLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsLog to fetch.
     */
    where?: AnalyticsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsLogs to fetch.
     */
    orderBy?: AnalyticsLogOrderByWithRelationInput | AnalyticsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsLogs.
     */
    cursor?: AnalyticsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsLogs.
     */
    distinct?: AnalyticsLogScalarFieldEnum | AnalyticsLogScalarFieldEnum[]
  }

  /**
   * AnalyticsLog findFirstOrThrow
   */
  export type AnalyticsLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsLog to fetch.
     */
    where?: AnalyticsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsLogs to fetch.
     */
    orderBy?: AnalyticsLogOrderByWithRelationInput | AnalyticsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsLogs.
     */
    cursor?: AnalyticsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsLogs.
     */
    distinct?: AnalyticsLogScalarFieldEnum | AnalyticsLogScalarFieldEnum[]
  }

  /**
   * AnalyticsLog findMany
   */
  export type AnalyticsLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsLogs to fetch.
     */
    where?: AnalyticsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsLogs to fetch.
     */
    orderBy?: AnalyticsLogOrderByWithRelationInput | AnalyticsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnalyticsLogs.
     */
    cursor?: AnalyticsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsLogs.
     */
    skip?: number
    distinct?: AnalyticsLogScalarFieldEnum | AnalyticsLogScalarFieldEnum[]
  }

  /**
   * AnalyticsLog create
   */
  export type AnalyticsLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AnalyticsLog.
     */
    data: XOR<AnalyticsLogCreateInput, AnalyticsLogUncheckedCreateInput>
  }

  /**
   * AnalyticsLog createMany
   */
  export type AnalyticsLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnalyticsLogs.
     */
    data: AnalyticsLogCreateManyInput | AnalyticsLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnalyticsLog update
   */
  export type AnalyticsLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AnalyticsLog.
     */
    data: XOR<AnalyticsLogUpdateInput, AnalyticsLogUncheckedUpdateInput>
    /**
     * Choose, which AnalyticsLog to update.
     */
    where: AnalyticsLogWhereUniqueInput
  }

  /**
   * AnalyticsLog updateMany
   */
  export type AnalyticsLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnalyticsLogs.
     */
    data: XOR<AnalyticsLogUpdateManyMutationInput, AnalyticsLogUncheckedUpdateManyInput>
    /**
     * Filter which AnalyticsLogs to update
     */
    where?: AnalyticsLogWhereInput
    /**
     * Limit how many AnalyticsLogs to update.
     */
    limit?: number
  }

  /**
   * AnalyticsLog upsert
   */
  export type AnalyticsLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AnalyticsLog to update in case it exists.
     */
    where: AnalyticsLogWhereUniqueInput
    /**
     * In case the AnalyticsLog found by the `where` argument doesn't exist, create a new AnalyticsLog with this data.
     */
    create: XOR<AnalyticsLogCreateInput, AnalyticsLogUncheckedCreateInput>
    /**
     * In case the AnalyticsLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalyticsLogUpdateInput, AnalyticsLogUncheckedUpdateInput>
  }

  /**
   * AnalyticsLog delete
   */
  export type AnalyticsLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
    /**
     * Filter which AnalyticsLog to delete.
     */
    where: AnalyticsLogWhereUniqueInput
  }

  /**
   * AnalyticsLog deleteMany
   */
  export type AnalyticsLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsLogs to delete
     */
    where?: AnalyticsLogWhereInput
    /**
     * Limit how many AnalyticsLogs to delete.
     */
    limit?: number
  }

  /**
   * AnalyticsLog without action
   */
  export type AnalyticsLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsLog
     */
    select?: AnalyticsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnalyticsLog
     */
    omit?: AnalyticsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    roleId: 'roleId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    studentNo: 'studentNo',
    programId: 'programId',
    yearLevel: 'yearLevel',
    gpa: 'gpa',
    hasInc: 'hasInc',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    department: 'department',
    employmentStatus: 'employmentStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const ProgramScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProgramScalarFieldEnum = (typeof ProgramScalarFieldEnum)[keyof typeof ProgramScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    units: 'units',
    subjectType: 'subjectType',
    yearStanding: 'yearStanding',
    recommendedYear: 'recommendedYear',
    recommendedSemester: 'recommendedSemester',
    programId: 'programId',
    prerequisiteId: 'prerequisiteId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subjectId: 'subjectId',
    professorId: 'professorId',
    maxSlots: 'maxSlots',
    availableSlots: 'availableSlots',
    semester: 'semester',
    schoolYear: 'schoolYear',
    schedule: 'schedule',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const AcademicTermScalarFieldEnum: {
    id: 'id',
    schoolYear: 'schoolYear',
    semester: 'semester',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AcademicTermScalarFieldEnum = (typeof AcademicTermScalarFieldEnum)[keyof typeof AcademicTermScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    termId: 'termId',
    dateEnrolled: 'dateEnrolled',
    totalUnits: 'totalUnits',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const EnrollmentSubjectScalarFieldEnum: {
    id: 'id',
    enrollmentId: 'enrollmentId',
    sectionId: 'sectionId',
    subjectId: 'subjectId',
    units: 'units',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EnrollmentSubjectScalarFieldEnum = (typeof EnrollmentSubjectScalarFieldEnum)[keyof typeof EnrollmentSubjectScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    enrollmentSubjectId: 'enrollmentSubjectId',
    gradeValue: 'gradeValue',
    remarks: 'remarks',
    encodedBy: 'encodedBy',
    approved: 'approved',
    dateEncoded: 'dateEncoded',
    repeatEligibleDate: 'repeatEligibleDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const IncResolutionScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    subjectId: 'subjectId',
    oldGrade: 'oldGrade',
    newGrade: 'newGrade',
    professorId: 'professorId',
    approvedByRegistrar: 'approvedByRegistrar',
    dateSubmitted: 'dateSubmitted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IncResolutionScalarFieldEnum = (typeof IncResolutionScalarFieldEnum)[keyof typeof IncResolutionScalarFieldEnum]


  export const AnalyticsLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    description: 'description',
    timestamp: 'timestamp'
  };

  export type AnalyticsLogScalarFieldEnum = (typeof AnalyticsLogScalarFieldEnum)[keyof typeof AnalyticsLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const RoleOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type RoleOrderByRelevanceFieldEnum = (typeof RoleOrderByRelevanceFieldEnum)[keyof typeof RoleOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const StudentOrderByRelevanceFieldEnum: {
    studentNo: 'studentNo'
  };

  export type StudentOrderByRelevanceFieldEnum = (typeof StudentOrderByRelevanceFieldEnum)[keyof typeof StudentOrderByRelevanceFieldEnum]


  export const ProfessorOrderByRelevanceFieldEnum: {
    department: 'department'
  };

  export type ProfessorOrderByRelevanceFieldEnum = (typeof ProfessorOrderByRelevanceFieldEnum)[keyof typeof ProfessorOrderByRelevanceFieldEnum]


  export const ProgramOrderByRelevanceFieldEnum: {
    name: 'name',
    code: 'code',
    description: 'description'
  };

  export type ProgramOrderByRelevanceFieldEnum = (typeof ProgramOrderByRelevanceFieldEnum)[keyof typeof ProgramOrderByRelevanceFieldEnum]


  export const SubjectOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name'
  };

  export type SubjectOrderByRelevanceFieldEnum = (typeof SubjectOrderByRelevanceFieldEnum)[keyof typeof SubjectOrderByRelevanceFieldEnum]


  export const SectionOrderByRelevanceFieldEnum: {
    name: 'name',
    schoolYear: 'schoolYear',
    schedule: 'schedule'
  };

  export type SectionOrderByRelevanceFieldEnum = (typeof SectionOrderByRelevanceFieldEnum)[keyof typeof SectionOrderByRelevanceFieldEnum]


  export const AcademicTermOrderByRelevanceFieldEnum: {
    schoolYear: 'schoolYear'
  };

  export type AcademicTermOrderByRelevanceFieldEnum = (typeof AcademicTermOrderByRelevanceFieldEnum)[keyof typeof AcademicTermOrderByRelevanceFieldEnum]


  export const GradeOrderByRelevanceFieldEnum: {
    remarks: 'remarks'
  };

  export type GradeOrderByRelevanceFieldEnum = (typeof GradeOrderByRelevanceFieldEnum)[keyof typeof GradeOrderByRelevanceFieldEnum]


  export const IncResolutionOrderByRelevanceFieldEnum: {
    oldGrade: 'oldGrade'
  };

  export type IncResolutionOrderByRelevanceFieldEnum = (typeof IncResolutionOrderByRelevanceFieldEnum)[keyof typeof IncResolutionOrderByRelevanceFieldEnum]


  export const AnalyticsLogOrderByRelevanceFieldEnum: {
    action: 'action',
    description: 'description'
  };

  export type AnalyticsLogOrderByRelevanceFieldEnum = (typeof AnalyticsLogOrderByRelevanceFieldEnum)[keyof typeof AnalyticsLogOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'StudentStatus'
   */
  export type EnumStudentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudentStatus'>
    


  /**
   * Reference to a field of type 'EmploymentStatus'
   */
  export type EnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus'>
    


  /**
   * Reference to a field of type 'SubjectType'
   */
  export type EnumSubjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubjectType'>
    


  /**
   * Reference to a field of type 'YearLevel'
   */
  export type EnumYearLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YearLevel'>
    


  /**
   * Reference to a field of type 'SemesterType'
   */
  export type EnumSemesterTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SemesterType'>
    


  /**
   * Reference to a field of type 'SectionStatus'
   */
  export type EnumSectionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SectionStatus'>
    


  /**
   * Reference to a field of type 'EnrollmentStatus'
   */
  export type EnumEnrollmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnrollmentStatus'>
    


  /**
   * Reference to a field of type 'GradeValue'
   */
  export type EnumGradeValueFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeValue'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    _relevance?: RoleOrderByRelevanceInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    name?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roleId?: IntFilter<"User"> | number
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
    professor?: XOR<ProfessorNullableScalarRelationFilter, ProfessorWhereInput> | null
    analyticsLogs?: AnalyticsLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: RoleOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
    analyticsLogs?: AnalyticsLogOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    roleId?: IntFilter<"User"> | number
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
    professor?: XOR<ProfessorNullableScalarRelationFilter, ProfessorWhereInput> | null
    analyticsLogs?: AnalyticsLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    roleId?: IntWithAggregatesFilter<"User"> | number
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    userId?: IntFilter<"Student"> | number
    studentNo?: StringFilter<"Student"> | string
    programId?: IntFilter<"Student"> | number
    yearLevel?: IntFilter<"Student"> | number
    gpa?: DecimalNullableFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFilter<"Student"> | boolean
    status?: EnumStudentStatusFilter<"Student"> | $Enums.StudentStatus
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    enrollments?: EnrollmentListRelationFilter
    incResolutions?: IncResolutionListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    studentNo?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrderInput | SortOrder
    hasInc?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    program?: ProgramOrderByWithRelationInput
    enrollments?: EnrollmentOrderByRelationAggregateInput
    incResolutions?: IncResolutionOrderByRelationAggregateInput
    _relevance?: StudentOrderByRelevanceInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    studentNo?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    programId?: IntFilter<"Student"> | number
    yearLevel?: IntFilter<"Student"> | number
    gpa?: DecimalNullableFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFilter<"Student"> | boolean
    status?: EnumStudentStatusFilter<"Student"> | $Enums.StudentStatus
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    enrollments?: EnrollmentListRelationFilter
    incResolutions?: IncResolutionListRelationFilter
  }, "id" | "userId" | "studentNo">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    studentNo?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrderInput | SortOrder
    hasInc?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    userId?: IntWithAggregatesFilter<"Student"> | number
    studentNo?: StringWithAggregatesFilter<"Student"> | string
    programId?: IntWithAggregatesFilter<"Student"> | number
    yearLevel?: IntWithAggregatesFilter<"Student"> | number
    gpa?: DecimalNullableWithAggregatesFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolWithAggregatesFilter<"Student"> | boolean
    status?: EnumStudentStatusWithAggregatesFilter<"Student"> | $Enums.StudentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type ProfessorWhereInput = {
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    id?: IntFilter<"Professor"> | number
    userId?: IntFilter<"Professor"> | number
    department?: StringNullableFilter<"Professor"> | string | null
    employmentStatus?: EnumEmploymentStatusFilter<"Professor"> | $Enums.EmploymentStatus
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    updatedAt?: DateTimeFilter<"Professor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    sections?: SectionListRelationFilter
    grades?: GradeListRelationFilter
    incResolutions?: IncResolutionListRelationFilter
  }

  export type ProfessorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrderInput | SortOrder
    employmentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sections?: SectionOrderByRelationAggregateInput
    grades?: GradeOrderByRelationAggregateInput
    incResolutions?: IncResolutionOrderByRelationAggregateInput
    _relevance?: ProfessorOrderByRelevanceInput
  }

  export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    department?: StringNullableFilter<"Professor"> | string | null
    employmentStatus?: EnumEmploymentStatusFilter<"Professor"> | $Enums.EmploymentStatus
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    updatedAt?: DateTimeFilter<"Professor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    sections?: SectionListRelationFilter
    grades?: GradeListRelationFilter
    incResolutions?: IncResolutionListRelationFilter
  }, "id" | "userId">

  export type ProfessorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrderInput | SortOrder
    employmentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _avg?: ProfessorAvgOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
    _sum?: ProfessorSumOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    OR?: ProfessorScalarWhereWithAggregatesInput[]
    NOT?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Professor"> | number
    userId?: IntWithAggregatesFilter<"Professor"> | number
    department?: StringNullableWithAggregatesFilter<"Professor"> | string | null
    employmentStatus?: EnumEmploymentStatusWithAggregatesFilter<"Professor"> | $Enums.EmploymentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Professor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Professor"> | Date | string
  }

  export type ProgramWhereInput = {
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    id?: IntFilter<"Program"> | number
    name?: StringFilter<"Program"> | string
    code?: StringFilter<"Program"> | string
    description?: StringNullableFilter<"Program"> | string | null
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
    students?: StudentListRelationFilter
    subjects?: SubjectListRelationFilter
  }

  export type ProgramOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    students?: StudentOrderByRelationAggregateInput
    subjects?: SubjectOrderByRelationAggregateInput
    _relevance?: ProgramOrderByRelevanceInput
  }

  export type ProgramWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    name?: StringFilter<"Program"> | string
    description?: StringNullableFilter<"Program"> | string | null
    createdAt?: DateTimeFilter<"Program"> | Date | string
    updatedAt?: DateTimeFilter<"Program"> | Date | string
    students?: StudentListRelationFilter
    subjects?: SubjectListRelationFilter
  }, "id" | "code">

  export type ProgramOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProgramCountOrderByAggregateInput
    _avg?: ProgramAvgOrderByAggregateInput
    _max?: ProgramMaxOrderByAggregateInput
    _min?: ProgramMinOrderByAggregateInput
    _sum?: ProgramSumOrderByAggregateInput
  }

  export type ProgramScalarWhereWithAggregatesInput = {
    AND?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    OR?: ProgramScalarWhereWithAggregatesInput[]
    NOT?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Program"> | number
    name?: StringWithAggregatesFilter<"Program"> | string
    code?: StringWithAggregatesFilter<"Program"> | string
    description?: StringNullableWithAggregatesFilter<"Program"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Program"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Program"> | Date | string
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    code?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    units?: IntFilter<"Subject"> | number
    subjectType?: EnumSubjectTypeFilter<"Subject"> | $Enums.SubjectType
    yearStanding?: EnumYearLevelNullableFilter<"Subject"> | $Enums.YearLevel | null
    recommendedYear?: EnumYearLevelNullableFilter<"Subject"> | $Enums.YearLevel | null
    recommendedSemester?: EnumSemesterTypeNullableFilter<"Subject"> | $Enums.SemesterType | null
    programId?: IntFilter<"Subject"> | number
    prerequisiteId?: IntNullableFilter<"Subject"> | number | null
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    prerequisite?: XOR<SubjectNullableScalarRelationFilter, SubjectWhereInput> | null
    prerequisites?: SubjectListRelationFilter
    sections?: SectionListRelationFilter
    enrollmentSubjects?: EnrollmentSubjectListRelationFilter
    incResolutions?: IncResolutionListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    units?: SortOrder
    subjectType?: SortOrder
    yearStanding?: SortOrderInput | SortOrder
    recommendedYear?: SortOrderInput | SortOrder
    recommendedSemester?: SortOrderInput | SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    program?: ProgramOrderByWithRelationInput
    prerequisite?: SubjectOrderByWithRelationInput
    prerequisites?: SubjectOrderByRelationAggregateInput
    sections?: SectionOrderByRelationAggregateInput
    enrollmentSubjects?: EnrollmentSubjectOrderByRelationAggregateInput
    incResolutions?: IncResolutionOrderByRelationAggregateInput
    _relevance?: SubjectOrderByRelevanceInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    units?: IntFilter<"Subject"> | number
    subjectType?: EnumSubjectTypeFilter<"Subject"> | $Enums.SubjectType
    yearStanding?: EnumYearLevelNullableFilter<"Subject"> | $Enums.YearLevel | null
    recommendedYear?: EnumYearLevelNullableFilter<"Subject"> | $Enums.YearLevel | null
    recommendedSemester?: EnumSemesterTypeNullableFilter<"Subject"> | $Enums.SemesterType | null
    programId?: IntFilter<"Subject"> | number
    prerequisiteId?: IntNullableFilter<"Subject"> | number | null
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    prerequisite?: XOR<SubjectNullableScalarRelationFilter, SubjectWhereInput> | null
    prerequisites?: SubjectListRelationFilter
    sections?: SectionListRelationFilter
    enrollmentSubjects?: EnrollmentSubjectListRelationFilter
    incResolutions?: IncResolutionListRelationFilter
  }, "id" | "code">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    units?: SortOrder
    subjectType?: SortOrder
    yearStanding?: SortOrderInput | SortOrder
    recommendedYear?: SortOrderInput | SortOrder
    recommendedSemester?: SortOrderInput | SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    code?: StringWithAggregatesFilter<"Subject"> | string
    name?: StringWithAggregatesFilter<"Subject"> | string
    units?: IntWithAggregatesFilter<"Subject"> | number
    subjectType?: EnumSubjectTypeWithAggregatesFilter<"Subject"> | $Enums.SubjectType
    yearStanding?: EnumYearLevelNullableWithAggregatesFilter<"Subject"> | $Enums.YearLevel | null
    recommendedYear?: EnumYearLevelNullableWithAggregatesFilter<"Subject"> | $Enums.YearLevel | null
    recommendedSemester?: EnumSemesterTypeNullableWithAggregatesFilter<"Subject"> | $Enums.SemesterType | null
    programId?: IntWithAggregatesFilter<"Subject"> | number
    prerequisiteId?: IntNullableWithAggregatesFilter<"Subject"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: IntFilter<"Section"> | number
    name?: StringFilter<"Section"> | string
    subjectId?: IntFilter<"Section"> | number
    professorId?: IntFilter<"Section"> | number
    maxSlots?: IntFilter<"Section"> | number
    availableSlots?: IntFilter<"Section"> | number
    semester?: EnumSemesterTypeFilter<"Section"> | $Enums.SemesterType
    schoolYear?: StringFilter<"Section"> | string
    schedule?: StringNullableFilter<"Section"> | string | null
    status?: EnumSectionStatusFilter<"Section"> | $Enums.SectionStatus
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    enrollmentSubjects?: EnrollmentSubjectListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
    semester?: SortOrder
    schoolYear?: SortOrder
    schedule?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
    enrollmentSubjects?: EnrollmentSubjectOrderByRelationAggregateInput
    _relevance?: SectionOrderByRelevanceInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    name?: StringFilter<"Section"> | string
    subjectId?: IntFilter<"Section"> | number
    professorId?: IntFilter<"Section"> | number
    maxSlots?: IntFilter<"Section"> | number
    availableSlots?: IntFilter<"Section"> | number
    semester?: EnumSemesterTypeFilter<"Section"> | $Enums.SemesterType
    schoolYear?: StringFilter<"Section"> | string
    schedule?: StringNullableFilter<"Section"> | string | null
    status?: EnumSectionStatusFilter<"Section"> | $Enums.SectionStatus
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    enrollmentSubjects?: EnrollmentSubjectListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
    semester?: SortOrder
    schoolYear?: SortOrder
    schedule?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SectionCountOrderByAggregateInput
    _avg?: SectionAvgOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
    _sum?: SectionSumOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Section"> | number
    name?: StringWithAggregatesFilter<"Section"> | string
    subjectId?: IntWithAggregatesFilter<"Section"> | number
    professorId?: IntWithAggregatesFilter<"Section"> | number
    maxSlots?: IntWithAggregatesFilter<"Section"> | number
    availableSlots?: IntWithAggregatesFilter<"Section"> | number
    semester?: EnumSemesterTypeWithAggregatesFilter<"Section"> | $Enums.SemesterType
    schoolYear?: StringWithAggregatesFilter<"Section"> | string
    schedule?: StringNullableWithAggregatesFilter<"Section"> | string | null
    status?: EnumSectionStatusWithAggregatesFilter<"Section"> | $Enums.SectionStatus
    createdAt?: DateTimeWithAggregatesFilter<"Section"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Section"> | Date | string
  }

  export type AcademicTermWhereInput = {
    AND?: AcademicTermWhereInput | AcademicTermWhereInput[]
    OR?: AcademicTermWhereInput[]
    NOT?: AcademicTermWhereInput | AcademicTermWhereInput[]
    id?: IntFilter<"AcademicTerm"> | number
    schoolYear?: StringFilter<"AcademicTerm"> | string
    semester?: EnumSemesterTypeFilter<"AcademicTerm"> | $Enums.SemesterType
    isActive?: BoolFilter<"AcademicTerm"> | boolean
    createdAt?: DateTimeFilter<"AcademicTerm"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicTerm"> | Date | string
    enrollments?: EnrollmentListRelationFilter
  }

  export type AcademicTermOrderByWithRelationInput = {
    id?: SortOrder
    schoolYear?: SortOrder
    semester?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    enrollments?: EnrollmentOrderByRelationAggregateInput
    _relevance?: AcademicTermOrderByRelevanceInput
  }

  export type AcademicTermWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    schoolYear_semester?: AcademicTermSchoolYearSemesterCompoundUniqueInput
    AND?: AcademicTermWhereInput | AcademicTermWhereInput[]
    OR?: AcademicTermWhereInput[]
    NOT?: AcademicTermWhereInput | AcademicTermWhereInput[]
    schoolYear?: StringFilter<"AcademicTerm"> | string
    semester?: EnumSemesterTypeFilter<"AcademicTerm"> | $Enums.SemesterType
    isActive?: BoolFilter<"AcademicTerm"> | boolean
    createdAt?: DateTimeFilter<"AcademicTerm"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicTerm"> | Date | string
    enrollments?: EnrollmentListRelationFilter
  }, "id" | "schoolYear_semester">

  export type AcademicTermOrderByWithAggregationInput = {
    id?: SortOrder
    schoolYear?: SortOrder
    semester?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AcademicTermCountOrderByAggregateInput
    _avg?: AcademicTermAvgOrderByAggregateInput
    _max?: AcademicTermMaxOrderByAggregateInput
    _min?: AcademicTermMinOrderByAggregateInput
    _sum?: AcademicTermSumOrderByAggregateInput
  }

  export type AcademicTermScalarWhereWithAggregatesInput = {
    AND?: AcademicTermScalarWhereWithAggregatesInput | AcademicTermScalarWhereWithAggregatesInput[]
    OR?: AcademicTermScalarWhereWithAggregatesInput[]
    NOT?: AcademicTermScalarWhereWithAggregatesInput | AcademicTermScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AcademicTerm"> | number
    schoolYear?: StringWithAggregatesFilter<"AcademicTerm"> | string
    semester?: EnumSemesterTypeWithAggregatesFilter<"AcademicTerm"> | $Enums.SemesterType
    isActive?: BoolWithAggregatesFilter<"AcademicTerm"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AcademicTerm"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AcademicTerm"> | Date | string
  }

  export type EnrollmentWhereInput = {
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    id?: IntFilter<"Enrollment"> | number
    studentId?: IntFilter<"Enrollment"> | number
    termId?: IntFilter<"Enrollment"> | number
    dateEnrolled?: DateTimeFilter<"Enrollment"> | Date | string
    totalUnits?: IntFilter<"Enrollment"> | number
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    term?: XOR<AcademicTermScalarRelationFilter, AcademicTermWhereInput>
    enrollmentSubjects?: EnrollmentSubjectListRelationFilter
  }

  export type EnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    dateEnrolled?: SortOrder
    totalUnits?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    term?: AcademicTermOrderByWithRelationInput
    enrollmentSubjects?: EnrollmentSubjectOrderByRelationAggregateInput
  }

  export type EnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    studentId?: IntFilter<"Enrollment"> | number
    termId?: IntFilter<"Enrollment"> | number
    dateEnrolled?: DateTimeFilter<"Enrollment"> | Date | string
    totalUnits?: IntFilter<"Enrollment"> | number
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    term?: XOR<AcademicTermScalarRelationFilter, AcademicTermWhereInput>
    enrollmentSubjects?: EnrollmentSubjectListRelationFilter
  }, "id">

  export type EnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    dateEnrolled?: SortOrder
    totalUnits?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _avg?: EnrollmentAvgOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
    _sum?: EnrollmentSumOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    OR?: EnrollmentScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Enrollment"> | number
    studentId?: IntWithAggregatesFilter<"Enrollment"> | number
    termId?: IntWithAggregatesFilter<"Enrollment"> | number
    dateEnrolled?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
    totalUnits?: IntWithAggregatesFilter<"Enrollment"> | number
    status?: EnumEnrollmentStatusWithAggregatesFilter<"Enrollment"> | $Enums.EnrollmentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
  }

  export type EnrollmentSubjectWhereInput = {
    AND?: EnrollmentSubjectWhereInput | EnrollmentSubjectWhereInput[]
    OR?: EnrollmentSubjectWhereInput[]
    NOT?: EnrollmentSubjectWhereInput | EnrollmentSubjectWhereInput[]
    id?: IntFilter<"EnrollmentSubject"> | number
    enrollmentId?: IntFilter<"EnrollmentSubject"> | number
    sectionId?: IntFilter<"EnrollmentSubject"> | number
    subjectId?: IntFilter<"EnrollmentSubject"> | number
    units?: IntFilter<"EnrollmentSubject"> | number
    createdAt?: DateTimeFilter<"EnrollmentSubject"> | Date | string
    updatedAt?: DateTimeFilter<"EnrollmentSubject"> | Date | string
    enrollment?: XOR<EnrollmentScalarRelationFilter, EnrollmentWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    grade?: XOR<GradeNullableScalarRelationFilter, GradeWhereInput> | null
  }

  export type EnrollmentSubjectOrderByWithRelationInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    enrollment?: EnrollmentOrderByWithRelationInput
    section?: SectionOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
  }

  export type EnrollmentSubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EnrollmentSubjectWhereInput | EnrollmentSubjectWhereInput[]
    OR?: EnrollmentSubjectWhereInput[]
    NOT?: EnrollmentSubjectWhereInput | EnrollmentSubjectWhereInput[]
    enrollmentId?: IntFilter<"EnrollmentSubject"> | number
    sectionId?: IntFilter<"EnrollmentSubject"> | number
    subjectId?: IntFilter<"EnrollmentSubject"> | number
    units?: IntFilter<"EnrollmentSubject"> | number
    createdAt?: DateTimeFilter<"EnrollmentSubject"> | Date | string
    updatedAt?: DateTimeFilter<"EnrollmentSubject"> | Date | string
    enrollment?: XOR<EnrollmentScalarRelationFilter, EnrollmentWhereInput>
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    grade?: XOR<GradeNullableScalarRelationFilter, GradeWhereInput> | null
  }, "id">

  export type EnrollmentSubjectOrderByWithAggregationInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EnrollmentSubjectCountOrderByAggregateInput
    _avg?: EnrollmentSubjectAvgOrderByAggregateInput
    _max?: EnrollmentSubjectMaxOrderByAggregateInput
    _min?: EnrollmentSubjectMinOrderByAggregateInput
    _sum?: EnrollmentSubjectSumOrderByAggregateInput
  }

  export type EnrollmentSubjectScalarWhereWithAggregatesInput = {
    AND?: EnrollmentSubjectScalarWhereWithAggregatesInput | EnrollmentSubjectScalarWhereWithAggregatesInput[]
    OR?: EnrollmentSubjectScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentSubjectScalarWhereWithAggregatesInput | EnrollmentSubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EnrollmentSubject"> | number
    enrollmentId?: IntWithAggregatesFilter<"EnrollmentSubject"> | number
    sectionId?: IntWithAggregatesFilter<"EnrollmentSubject"> | number
    subjectId?: IntWithAggregatesFilter<"EnrollmentSubject"> | number
    units?: IntWithAggregatesFilter<"EnrollmentSubject"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EnrollmentSubject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EnrollmentSubject"> | Date | string
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: IntFilter<"Grade"> | number
    enrollmentSubjectId?: IntFilter<"Grade"> | number
    gradeValue?: EnumGradeValueFilter<"Grade"> | $Enums.GradeValue
    remarks?: StringNullableFilter<"Grade"> | string | null
    encodedBy?: IntFilter<"Grade"> | number
    approved?: BoolFilter<"Grade"> | boolean
    dateEncoded?: DateTimeFilter<"Grade"> | Date | string
    repeatEligibleDate?: DateTimeNullableFilter<"Grade"> | Date | string | null
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    enrollmentSubject?: XOR<EnrollmentSubjectScalarRelationFilter, EnrollmentSubjectWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    gradeValue?: SortOrder
    remarks?: SortOrderInput | SortOrder
    encodedBy?: SortOrder
    approved?: SortOrder
    dateEncoded?: SortOrder
    repeatEligibleDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    enrollmentSubject?: EnrollmentSubjectOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
    _relevance?: GradeOrderByRelevanceInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    enrollmentSubjectId?: number
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    gradeValue?: EnumGradeValueFilter<"Grade"> | $Enums.GradeValue
    remarks?: StringNullableFilter<"Grade"> | string | null
    encodedBy?: IntFilter<"Grade"> | number
    approved?: BoolFilter<"Grade"> | boolean
    dateEncoded?: DateTimeFilter<"Grade"> | Date | string
    repeatEligibleDate?: DateTimeNullableFilter<"Grade"> | Date | string | null
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    enrollmentSubject?: XOR<EnrollmentSubjectScalarRelationFilter, EnrollmentSubjectWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
  }, "id" | "enrollmentSubjectId">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    gradeValue?: SortOrder
    remarks?: SortOrderInput | SortOrder
    encodedBy?: SortOrder
    approved?: SortOrder
    dateEncoded?: SortOrder
    repeatEligibleDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grade"> | number
    enrollmentSubjectId?: IntWithAggregatesFilter<"Grade"> | number
    gradeValue?: EnumGradeValueWithAggregatesFilter<"Grade"> | $Enums.GradeValue
    remarks?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    encodedBy?: IntWithAggregatesFilter<"Grade"> | number
    approved?: BoolWithAggregatesFilter<"Grade"> | boolean
    dateEncoded?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    repeatEligibleDate?: DateTimeNullableWithAggregatesFilter<"Grade"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
  }

  export type IncResolutionWhereInput = {
    AND?: IncResolutionWhereInput | IncResolutionWhereInput[]
    OR?: IncResolutionWhereInput[]
    NOT?: IncResolutionWhereInput | IncResolutionWhereInput[]
    id?: IntFilter<"IncResolution"> | number
    studentId?: IntFilter<"IncResolution"> | number
    subjectId?: IntFilter<"IncResolution"> | number
    oldGrade?: StringFilter<"IncResolution"> | string
    newGrade?: EnumGradeValueFilter<"IncResolution"> | $Enums.GradeValue
    professorId?: IntFilter<"IncResolution"> | number
    approvedByRegistrar?: BoolFilter<"IncResolution"> | boolean
    dateSubmitted?: DateTimeFilter<"IncResolution"> | Date | string
    createdAt?: DateTimeFilter<"IncResolution"> | Date | string
    updatedAt?: DateTimeFilter<"IncResolution"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
  }

  export type IncResolutionOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    oldGrade?: SortOrder
    newGrade?: SortOrder
    professorId?: SortOrder
    approvedByRegistrar?: SortOrder
    dateSubmitted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
    _relevance?: IncResolutionOrderByRelevanceInput
  }

  export type IncResolutionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IncResolutionWhereInput | IncResolutionWhereInput[]
    OR?: IncResolutionWhereInput[]
    NOT?: IncResolutionWhereInput | IncResolutionWhereInput[]
    studentId?: IntFilter<"IncResolution"> | number
    subjectId?: IntFilter<"IncResolution"> | number
    oldGrade?: StringFilter<"IncResolution"> | string
    newGrade?: EnumGradeValueFilter<"IncResolution"> | $Enums.GradeValue
    professorId?: IntFilter<"IncResolution"> | number
    approvedByRegistrar?: BoolFilter<"IncResolution"> | boolean
    dateSubmitted?: DateTimeFilter<"IncResolution"> | Date | string
    createdAt?: DateTimeFilter<"IncResolution"> | Date | string
    updatedAt?: DateTimeFilter<"IncResolution"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
  }, "id">

  export type IncResolutionOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    oldGrade?: SortOrder
    newGrade?: SortOrder
    professorId?: SortOrder
    approvedByRegistrar?: SortOrder
    dateSubmitted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IncResolutionCountOrderByAggregateInput
    _avg?: IncResolutionAvgOrderByAggregateInput
    _max?: IncResolutionMaxOrderByAggregateInput
    _min?: IncResolutionMinOrderByAggregateInput
    _sum?: IncResolutionSumOrderByAggregateInput
  }

  export type IncResolutionScalarWhereWithAggregatesInput = {
    AND?: IncResolutionScalarWhereWithAggregatesInput | IncResolutionScalarWhereWithAggregatesInput[]
    OR?: IncResolutionScalarWhereWithAggregatesInput[]
    NOT?: IncResolutionScalarWhereWithAggregatesInput | IncResolutionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IncResolution"> | number
    studentId?: IntWithAggregatesFilter<"IncResolution"> | number
    subjectId?: IntWithAggregatesFilter<"IncResolution"> | number
    oldGrade?: StringWithAggregatesFilter<"IncResolution"> | string
    newGrade?: EnumGradeValueWithAggregatesFilter<"IncResolution"> | $Enums.GradeValue
    professorId?: IntWithAggregatesFilter<"IncResolution"> | number
    approvedByRegistrar?: BoolWithAggregatesFilter<"IncResolution"> | boolean
    dateSubmitted?: DateTimeWithAggregatesFilter<"IncResolution"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"IncResolution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"IncResolution"> | Date | string
  }

  export type AnalyticsLogWhereInput = {
    AND?: AnalyticsLogWhereInput | AnalyticsLogWhereInput[]
    OR?: AnalyticsLogWhereInput[]
    NOT?: AnalyticsLogWhereInput | AnalyticsLogWhereInput[]
    id?: IntFilter<"AnalyticsLog"> | number
    userId?: IntFilter<"AnalyticsLog"> | number
    action?: StringFilter<"AnalyticsLog"> | string
    description?: StringNullableFilter<"AnalyticsLog"> | string | null
    timestamp?: DateTimeFilter<"AnalyticsLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AnalyticsLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AnalyticsLogOrderByRelevanceInput
  }

  export type AnalyticsLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AnalyticsLogWhereInput | AnalyticsLogWhereInput[]
    OR?: AnalyticsLogWhereInput[]
    NOT?: AnalyticsLogWhereInput | AnalyticsLogWhereInput[]
    userId?: IntFilter<"AnalyticsLog"> | number
    action?: StringFilter<"AnalyticsLog"> | string
    description?: StringNullableFilter<"AnalyticsLog"> | string | null
    timestamp?: DateTimeFilter<"AnalyticsLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AnalyticsLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AnalyticsLogCountOrderByAggregateInput
    _avg?: AnalyticsLogAvgOrderByAggregateInput
    _max?: AnalyticsLogMaxOrderByAggregateInput
    _min?: AnalyticsLogMinOrderByAggregateInput
    _sum?: AnalyticsLogSumOrderByAggregateInput
  }

  export type AnalyticsLogScalarWhereWithAggregatesInput = {
    AND?: AnalyticsLogScalarWhereWithAggregatesInput | AnalyticsLogScalarWhereWithAggregatesInput[]
    OR?: AnalyticsLogScalarWhereWithAggregatesInput[]
    NOT?: AnalyticsLogScalarWhereWithAggregatesInput | AnalyticsLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AnalyticsLog"> | number
    userId?: IntWithAggregatesFilter<"AnalyticsLog"> | number
    action?: StringWithAggregatesFilter<"AnalyticsLog"> | string
    description?: StringNullableWithAggregatesFilter<"AnalyticsLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AnalyticsLog"> | Date | string
  }

  export type RoleCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    student?: StudentCreateNestedOneWithoutUserInput
    professor?: ProfessorCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    roleId: number
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    professor?: ProfessorUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    roleId: number
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    program: ProgramCreateNestedOneWithoutStudentsInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    incResolutions?: IncResolutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    userId: number
    studentNo: string
    programId: number
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    programId?: IntFieldUpdateOperationsInput | number
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    userId: number
    studentNo: string
    programId: number
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    programId?: IntFieldUpdateOperationsInput | number
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorCreateInput = {
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfessorInput
    sections?: SectionCreateNestedManyWithoutProfessorInput
    grades?: GradeCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateInput = {
    id?: number
    userId: number
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutProfessorInput
    grades?: GradeUncheckedCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUpdateInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfessorNestedInput
    sections?: SectionUpdateManyWithoutProfessorNestedInput
    grades?: GradeUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutProfessorNestedInput
    grades?: GradeUncheckedUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorCreateManyInput = {
    id?: number
    userId: number
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessorUpdateManyMutationInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramCreateInput = {
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentCreateNestedManyWithoutProgramInput
    subjects?: SubjectCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutProgramInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutProgramNestedInput
    subjects?: SubjectUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutProgramNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramCreateManyInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProgramUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgramUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutSubjectsInput
    prerequisite?: SubjectCreateNestedOneWithoutPrerequisitesInput
    prerequisites?: SubjectCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionUncheckedCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutSubjectsNestedInput
    prerequisite?: SubjectUpdateOneWithoutPrerequisitesNestedInput
    prerequisites?: SubjectUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateInput = {
    name: string
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutSectionsInput
    professor: ProfessorCreateNestedOneWithoutSectionsInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: number
    name: string
    subjectId: number
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutSectionsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutSectionsNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: number
    name: string
    subjectId: number
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicTermCreateInput = {
    schoolYear: string
    semester: $Enums.SemesterType
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutTermInput
  }

  export type AcademicTermUncheckedCreateInput = {
    id?: number
    schoolYear: string
    semester: $Enums.SemesterType
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutTermInput
  }

  export type AcademicTermUpdateInput = {
    schoolYear?: StringFieldUpdateOperationsInput | string
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutTermNestedInput
  }

  export type AcademicTermUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolYear?: StringFieldUpdateOperationsInput | string
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutTermNestedInput
  }

  export type AcademicTermCreateManyInput = {
    id?: number
    schoolYear: string
    semester: $Enums.SemesterType
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicTermUpdateManyMutationInput = {
    schoolYear?: StringFieldUpdateOperationsInput | string
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicTermUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolYear?: StringFieldUpdateOperationsInput | string
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateInput = {
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutEnrollmentsInput
    term: AcademicTermCreateNestedOneWithoutEnrollmentsInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutEnrollmentInput
  }

  export type EnrollmentUncheckedCreateInput = {
    id?: number
    studentId: number
    termId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutEnrollmentInput
  }

  export type EnrollmentUpdateInput = {
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutEnrollmentsNestedInput
    term?: AcademicTermUpdateOneRequiredWithoutEnrollmentsNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutEnrollmentNestedInput
  }

  export type EnrollmentCreateManyInput = {
    id?: number
    studentId: number
    termId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateManyMutationInput = {
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectCreateInput = {
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollment: EnrollmentCreateNestedOneWithoutEnrollmentSubjectsInput
    section: SectionCreateNestedOneWithoutEnrollmentSubjectsInput
    subject: SubjectCreateNestedOneWithoutEnrollmentSubjectsInput
    grade?: GradeCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectUncheckedCreateInput = {
    id?: number
    enrollmentId: number
    sectionId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    grade?: GradeUncheckedCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectUpdateInput = {
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollment?: EnrollmentUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    section?: SectionUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    grade?: GradeUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grade?: GradeUncheckedUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectCreateManyInput = {
    id?: number
    enrollmentId: number
    sectionId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentSubjectUpdateManyMutationInput = {
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeCreateInput = {
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubject: EnrollmentSubjectCreateNestedOneWithoutGradeInput
    professor: ProfessorCreateNestedOneWithoutGradesInput
  }

  export type GradeUncheckedCreateInput = {
    id?: number
    enrollmentSubjectId: number
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    encodedBy: number
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeUpdateInput = {
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubject?: EnrollmentSubjectUpdateOneRequiredWithoutGradeNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutGradesNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentSubjectId?: IntFieldUpdateOperationsInput | number
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    encodedBy?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeCreateManyInput = {
    id?: number
    enrollmentSubjectId: number
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    encodedBy: number
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeUpdateManyMutationInput = {
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentSubjectId?: IntFieldUpdateOperationsInput | number
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    encodedBy?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionCreateInput = {
    oldGrade: string
    newGrade: $Enums.GradeValue
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutIncResolutionsInput
    subject: SubjectCreateNestedOneWithoutIncResolutionsInput
    professor: ProfessorCreateNestedOneWithoutIncResolutionsInput
  }

  export type IncResolutionUncheckedCreateInput = {
    id?: number
    studentId: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionUpdateInput = {
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutIncResolutionsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutIncResolutionsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutIncResolutionsNestedInput
  }

  export type IncResolutionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    professorId?: IntFieldUpdateOperationsInput | number
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionCreateManyInput = {
    id?: number
    studentId: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionUpdateManyMutationInput = {
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    professorId?: IntFieldUpdateOperationsInput | number
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsLogCreateInput = {
    action: string
    description?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAnalyticsLogsInput
  }

  export type AnalyticsLogUncheckedCreateInput = {
    id?: number
    userId: number
    action: string
    description?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnalyticsLogsNestedInput
  }

  export type AnalyticsLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsLogCreateManyInput = {
    id?: number
    userId: number
    action: string
    description?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelevanceInput = {
    fields: RoleOrderByRelevanceFieldEnum | RoleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[]
    notIn?: $Enums.UserStatus[]
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type StudentNullableScalarRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type ProfessorNullableScalarRelationFilter = {
    is?: ProfessorWhereInput | null
    isNot?: ProfessorWhereInput | null
  }

  export type AnalyticsLogListRelationFilter = {
    every?: AnalyticsLogWhereInput
    some?: AnalyticsLogWhereInput
    none?: AnalyticsLogWhereInput
  }

  export type AnalyticsLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[]
    notIn?: $Enums.UserStatus[]
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumStudentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentStatus | EnumStudentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudentStatus[]
    notIn?: $Enums.StudentStatus[]
    not?: NestedEnumStudentStatusFilter<$PrismaModel> | $Enums.StudentStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProgramScalarRelationFilter = {
    is?: ProgramWhereInput
    isNot?: ProgramWhereInput
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type IncResolutionListRelationFilter = {
    every?: IncResolutionWhereInput
    some?: IncResolutionWhereInput
    none?: IncResolutionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IncResolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelevanceInput = {
    fields: StudentOrderByRelevanceFieldEnum | StudentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    studentNo?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrder
    hasInc?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    studentNo?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrder
    hasInc?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    studentNo?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrder
    hasInc?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    programId?: SortOrder
    yearLevel?: SortOrder
    gpa?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumStudentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentStatus | EnumStudentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudentStatus[]
    notIn?: $Enums.StudentStatus[]
    not?: NestedEnumStudentStatusWithAggregatesFilter<$PrismaModel> | $Enums.StudentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudentStatusFilter<$PrismaModel>
    _max?: NestedEnumStudentStatusFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumEmploymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[]
    notIn?: $Enums.EmploymentStatus[]
    not?: NestedEnumEmploymentStatusFilter<$PrismaModel> | $Enums.EmploymentStatus
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type GradeListRelationFilter = {
    every?: GradeWhereInput
    some?: GradeWhereInput
    none?: GradeWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorOrderByRelevanceInput = {
    fields: ProfessorOrderByRelevanceFieldEnum | ProfessorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProfessorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrder
    employmentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessorAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrder
    employmentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrder
    employmentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessorSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumEmploymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[]
    notIn?: $Enums.EmploymentStatus[]
    not?: NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentStatusFilter<$PrismaModel>
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgramOrderByRelevanceInput = {
    fields: ProgramOrderByRelevanceFieldEnum | ProgramOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProgramCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProgramSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumSubjectTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubjectType | EnumSubjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubjectType[]
    notIn?: $Enums.SubjectType[]
    not?: NestedEnumSubjectTypeFilter<$PrismaModel> | $Enums.SubjectType
  }

  export type EnumYearLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.YearLevel | EnumYearLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.YearLevel[] | null
    notIn?: $Enums.YearLevel[] | null
    not?: NestedEnumYearLevelNullableFilter<$PrismaModel> | $Enums.YearLevel | null
  }

  export type EnumSemesterTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.SemesterType[] | null
    notIn?: $Enums.SemesterType[] | null
    not?: NestedEnumSemesterTypeNullableFilter<$PrismaModel> | $Enums.SemesterType | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SubjectNullableScalarRelationFilter = {
    is?: SubjectWhereInput | null
    isNot?: SubjectWhereInput | null
  }

  export type EnrollmentSubjectListRelationFilter = {
    every?: EnrollmentSubjectWhereInput
    some?: EnrollmentSubjectWhereInput
    none?: EnrollmentSubjectWhereInput
  }

  export type EnrollmentSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelevanceInput = {
    fields: SubjectOrderByRelevanceFieldEnum | SubjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    units?: SortOrder
    subjectType?: SortOrder
    yearStanding?: SortOrder
    recommendedYear?: SortOrder
    recommendedSemester?: SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    units?: SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    units?: SortOrder
    subjectType?: SortOrder
    yearStanding?: SortOrder
    recommendedYear?: SortOrder
    recommendedSemester?: SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    units?: SortOrder
    subjectType?: SortOrder
    yearStanding?: SortOrder
    recommendedYear?: SortOrder
    recommendedSemester?: SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
    units?: SortOrder
    programId?: SortOrder
    prerequisiteId?: SortOrder
  }

  export type EnumSubjectTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubjectType | EnumSubjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubjectType[]
    notIn?: $Enums.SubjectType[]
    not?: NestedEnumSubjectTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubjectType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubjectTypeFilter<$PrismaModel>
    _max?: NestedEnumSubjectTypeFilter<$PrismaModel>
  }

  export type EnumYearLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YearLevel | EnumYearLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.YearLevel[] | null
    notIn?: $Enums.YearLevel[] | null
    not?: NestedEnumYearLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.YearLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumYearLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumYearLevelNullableFilter<$PrismaModel>
  }

  export type EnumSemesterTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.SemesterType[] | null
    notIn?: $Enums.SemesterType[] | null
    not?: NestedEnumSemesterTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.SemesterType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSemesterTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumSemesterTypeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumSemesterTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SemesterType[]
    notIn?: $Enums.SemesterType[]
    not?: NestedEnumSemesterTypeFilter<$PrismaModel> | $Enums.SemesterType
  }

  export type EnumSectionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionStatus | EnumSectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SectionStatus[]
    notIn?: $Enums.SectionStatus[]
    not?: NestedEnumSectionStatusFilter<$PrismaModel> | $Enums.SectionStatus
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type ProfessorScalarRelationFilter = {
    is?: ProfessorWhereInput
    isNot?: ProfessorWhereInput
  }

  export type SectionOrderByRelevanceInput = {
    fields: SectionOrderByRelevanceFieldEnum | SectionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
    semester?: SortOrder
    schoolYear?: SortOrder
    schedule?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionAvgOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
    semester?: SortOrder
    schoolYear?: SortOrder
    schedule?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
    semester?: SortOrder
    schoolYear?: SortOrder
    schedule?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SectionSumOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
    maxSlots?: SortOrder
    availableSlots?: SortOrder
  }

  export type EnumSemesterTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SemesterType[]
    notIn?: $Enums.SemesterType[]
    not?: NestedEnumSemesterTypeWithAggregatesFilter<$PrismaModel> | $Enums.SemesterType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSemesterTypeFilter<$PrismaModel>
    _max?: NestedEnumSemesterTypeFilter<$PrismaModel>
  }

  export type EnumSectionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionStatus | EnumSectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SectionStatus[]
    notIn?: $Enums.SectionStatus[]
    not?: NestedEnumSectionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SectionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSectionStatusFilter<$PrismaModel>
    _max?: NestedEnumSectionStatusFilter<$PrismaModel>
  }

  export type AcademicTermOrderByRelevanceInput = {
    fields: AcademicTermOrderByRelevanceFieldEnum | AcademicTermOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AcademicTermSchoolYearSemesterCompoundUniqueInput = {
    schoolYear: string
    semester: $Enums.SemesterType
  }

  export type AcademicTermCountOrderByAggregateInput = {
    id?: SortOrder
    schoolYear?: SortOrder
    semester?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicTermAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AcademicTermMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolYear?: SortOrder
    semester?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicTermMinOrderByAggregateInput = {
    id?: SortOrder
    schoolYear?: SortOrder
    semester?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicTermSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumEnrollmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[]
    notIn?: $Enums.EnrollmentStatus[]
    not?: NestedEnumEnrollmentStatusFilter<$PrismaModel> | $Enums.EnrollmentStatus
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type AcademicTermScalarRelationFilter = {
    is?: AcademicTermWhereInput
    isNot?: AcademicTermWhereInput
  }

  export type EnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    dateEnrolled?: SortOrder
    totalUnits?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    totalUnits?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    dateEnrolled?: SortOrder
    totalUnits?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    dateEnrolled?: SortOrder
    totalUnits?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    termId?: SortOrder
    totalUnits?: SortOrder
  }

  export type EnumEnrollmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[]
    notIn?: $Enums.EnrollmentStatus[]
    not?: NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnrollmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
    _max?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
  }

  export type EnrollmentScalarRelationFilter = {
    is?: EnrollmentWhereInput
    isNot?: EnrollmentWhereInput
  }

  export type SectionScalarRelationFilter = {
    is?: SectionWhereInput
    isNot?: SectionWhereInput
  }

  export type GradeNullableScalarRelationFilter = {
    is?: GradeWhereInput | null
    isNot?: GradeWhereInput | null
  }

  export type EnrollmentSubjectCountOrderByAggregateInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentSubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
  }

  export type EnrollmentSubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentSubjectMinOrderByAggregateInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentSubjectSumOrderByAggregateInput = {
    id?: SortOrder
    enrollmentId?: SortOrder
    sectionId?: SortOrder
    subjectId?: SortOrder
    units?: SortOrder
  }

  export type EnumGradeValueFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeValue | EnumGradeValueFieldRefInput<$PrismaModel>
    in?: $Enums.GradeValue[]
    notIn?: $Enums.GradeValue[]
    not?: NestedEnumGradeValueFilter<$PrismaModel> | $Enums.GradeValue
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnrollmentSubjectScalarRelationFilter = {
    is?: EnrollmentSubjectWhereInput
    isNot?: EnrollmentSubjectWhereInput
  }

  export type GradeOrderByRelevanceInput = {
    fields: GradeOrderByRelevanceFieldEnum | GradeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    gradeValue?: SortOrder
    remarks?: SortOrder
    encodedBy?: SortOrder
    approved?: SortOrder
    dateEncoded?: SortOrder
    repeatEligibleDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    encodedBy?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    gradeValue?: SortOrder
    remarks?: SortOrder
    encodedBy?: SortOrder
    approved?: SortOrder
    dateEncoded?: SortOrder
    repeatEligibleDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    gradeValue?: SortOrder
    remarks?: SortOrder
    encodedBy?: SortOrder
    approved?: SortOrder
    dateEncoded?: SortOrder
    repeatEligibleDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    id?: SortOrder
    enrollmentSubjectId?: SortOrder
    encodedBy?: SortOrder
  }

  export type EnumGradeValueWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeValue | EnumGradeValueFieldRefInput<$PrismaModel>
    in?: $Enums.GradeValue[]
    notIn?: $Enums.GradeValue[]
    not?: NestedEnumGradeValueWithAggregatesFilter<$PrismaModel> | $Enums.GradeValue
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradeValueFilter<$PrismaModel>
    _max?: NestedEnumGradeValueFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IncResolutionOrderByRelevanceInput = {
    fields: IncResolutionOrderByRelevanceFieldEnum | IncResolutionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IncResolutionCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    oldGrade?: SortOrder
    newGrade?: SortOrder
    professorId?: SortOrder
    approvedByRegistrar?: SortOrder
    dateSubmitted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IncResolutionAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
  }

  export type IncResolutionMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    oldGrade?: SortOrder
    newGrade?: SortOrder
    professorId?: SortOrder
    approvedByRegistrar?: SortOrder
    dateSubmitted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IncResolutionMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    oldGrade?: SortOrder
    newGrade?: SortOrder
    professorId?: SortOrder
    approvedByRegistrar?: SortOrder
    dateSubmitted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IncResolutionSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subjectId?: SortOrder
    professorId?: SortOrder
  }

  export type AnalyticsLogOrderByRelevanceInput = {
    fields: AnalyticsLogOrderByRelevanceFieldEnum | AnalyticsLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AnalyticsLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type AnalyticsLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AnalyticsLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type AnalyticsLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type AnalyticsLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    connect?: ProfessorWhereUniqueInput
  }

  export type AnalyticsLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AnalyticsLogCreateWithoutUserInput, AnalyticsLogUncheckedCreateWithoutUserInput> | AnalyticsLogCreateWithoutUserInput[] | AnalyticsLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsLogCreateOrConnectWithoutUserInput | AnalyticsLogCreateOrConnectWithoutUserInput[]
    createMany?: AnalyticsLogCreateManyUserInputEnvelope
    connect?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type ProfessorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    connect?: ProfessorWhereUniqueInput
  }

  export type AnalyticsLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnalyticsLogCreateWithoutUserInput, AnalyticsLogUncheckedCreateWithoutUserInput> | AnalyticsLogCreateWithoutUserInput[] | AnalyticsLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsLogCreateOrConnectWithoutUserInput | AnalyticsLogCreateOrConnectWithoutUserInput[]
    createMany?: AnalyticsLogCreateManyUserInputEnvelope
    connect?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    upsert?: ProfessorUpsertWithoutUserInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutUserInput, ProfessorUpdateWithoutUserInput>, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type AnalyticsLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnalyticsLogCreateWithoutUserInput, AnalyticsLogUncheckedCreateWithoutUserInput> | AnalyticsLogCreateWithoutUserInput[] | AnalyticsLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsLogCreateOrConnectWithoutUserInput | AnalyticsLogCreateOrConnectWithoutUserInput[]
    upsert?: AnalyticsLogUpsertWithWhereUniqueWithoutUserInput | AnalyticsLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnalyticsLogCreateManyUserInputEnvelope
    set?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    disconnect?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    delete?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    connect?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    update?: AnalyticsLogUpdateWithWhereUniqueWithoutUserInput | AnalyticsLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnalyticsLogUpdateManyWithWhereWithoutUserInput | AnalyticsLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnalyticsLogScalarWhereInput | AnalyticsLogScalarWhereInput[]
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    upsert?: ProfessorUpsertWithoutUserInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutUserInput, ProfessorUpdateWithoutUserInput>, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type AnalyticsLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnalyticsLogCreateWithoutUserInput, AnalyticsLogUncheckedCreateWithoutUserInput> | AnalyticsLogCreateWithoutUserInput[] | AnalyticsLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsLogCreateOrConnectWithoutUserInput | AnalyticsLogCreateOrConnectWithoutUserInput[]
    upsert?: AnalyticsLogUpsertWithWhereUniqueWithoutUserInput | AnalyticsLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnalyticsLogCreateManyUserInputEnvelope
    set?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    disconnect?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    delete?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    connect?: AnalyticsLogWhereUniqueInput | AnalyticsLogWhereUniqueInput[]
    update?: AnalyticsLogUpdateWithWhereUniqueWithoutUserInput | AnalyticsLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnalyticsLogUpdateManyWithWhereWithoutUserInput | AnalyticsLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnalyticsLogScalarWhereInput | AnalyticsLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type ProgramCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutStudentsInput
    connect?: ProgramWhereUniqueInput
  }

  export type EnrollmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type IncResolutionCreateNestedManyWithoutStudentInput = {
    create?: XOR<IncResolutionCreateWithoutStudentInput, IncResolutionUncheckedCreateWithoutStudentInput> | IncResolutionCreateWithoutStudentInput[] | IncResolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutStudentInput | IncResolutionCreateOrConnectWithoutStudentInput[]
    createMany?: IncResolutionCreateManyStudentInputEnvelope
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type IncResolutionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<IncResolutionCreateWithoutStudentInput, IncResolutionUncheckedCreateWithoutStudentInput> | IncResolutionCreateWithoutStudentInput[] | IncResolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutStudentInput | IncResolutionCreateOrConnectWithoutStudentInput[]
    createMany?: IncResolutionCreateManyStudentInputEnvelope
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumStudentStatusFieldUpdateOperationsInput = {
    set?: $Enums.StudentStatus
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type ProgramUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutStudentsInput
    upsert?: ProgramUpsertWithoutStudentsInput
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutStudentsInput, ProgramUpdateWithoutStudentsInput>, ProgramUncheckedUpdateWithoutStudentsInput>
  }

  export type EnrollmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type IncResolutionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<IncResolutionCreateWithoutStudentInput, IncResolutionUncheckedCreateWithoutStudentInput> | IncResolutionCreateWithoutStudentInput[] | IncResolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutStudentInput | IncResolutionCreateOrConnectWithoutStudentInput[]
    upsert?: IncResolutionUpsertWithWhereUniqueWithoutStudentInput | IncResolutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: IncResolutionCreateManyStudentInputEnvelope
    set?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    disconnect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    delete?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    update?: IncResolutionUpdateWithWhereUniqueWithoutStudentInput | IncResolutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: IncResolutionUpdateManyWithWhereWithoutStudentInput | IncResolutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type IncResolutionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<IncResolutionCreateWithoutStudentInput, IncResolutionUncheckedCreateWithoutStudentInput> | IncResolutionCreateWithoutStudentInput[] | IncResolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutStudentInput | IncResolutionCreateOrConnectWithoutStudentInput[]
    upsert?: IncResolutionUpsertWithWhereUniqueWithoutStudentInput | IncResolutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: IncResolutionCreateManyStudentInputEnvelope
    set?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    disconnect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    delete?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    update?: IncResolutionUpdateWithWhereUniqueWithoutStudentInput | IncResolutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: IncResolutionUpdateManyWithWhereWithoutStudentInput | IncResolutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfessorInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput
    connect?: UserWhereUniqueInput
  }

  export type SectionCreateNestedManyWithoutProfessorInput = {
    create?: XOR<SectionCreateWithoutProfessorInput, SectionUncheckedCreateWithoutProfessorInput> | SectionCreateWithoutProfessorInput[] | SectionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutProfessorInput | SectionCreateOrConnectWithoutProfessorInput[]
    createMany?: SectionCreateManyProfessorInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutProfessorInput = {
    create?: XOR<GradeCreateWithoutProfessorInput, GradeUncheckedCreateWithoutProfessorInput> | GradeCreateWithoutProfessorInput[] | GradeUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutProfessorInput | GradeCreateOrConnectWithoutProfessorInput[]
    createMany?: GradeCreateManyProfessorInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type IncResolutionCreateNestedManyWithoutProfessorInput = {
    create?: XOR<IncResolutionCreateWithoutProfessorInput, IncResolutionUncheckedCreateWithoutProfessorInput> | IncResolutionCreateWithoutProfessorInput[] | IncResolutionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutProfessorInput | IncResolutionCreateOrConnectWithoutProfessorInput[]
    createMany?: IncResolutionCreateManyProfessorInputEnvelope
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<SectionCreateWithoutProfessorInput, SectionUncheckedCreateWithoutProfessorInput> | SectionCreateWithoutProfessorInput[] | SectionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutProfessorInput | SectionCreateOrConnectWithoutProfessorInput[]
    createMany?: SectionCreateManyProfessorInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<GradeCreateWithoutProfessorInput, GradeUncheckedCreateWithoutProfessorInput> | GradeCreateWithoutProfessorInput[] | GradeUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutProfessorInput | GradeCreateOrConnectWithoutProfessorInput[]
    createMany?: GradeCreateManyProfessorInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type IncResolutionUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<IncResolutionCreateWithoutProfessorInput, IncResolutionUncheckedCreateWithoutProfessorInput> | IncResolutionCreateWithoutProfessorInput[] | IncResolutionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutProfessorInput | IncResolutionCreateOrConnectWithoutProfessorInput[]
    createMany?: IncResolutionCreateManyProfessorInputEnvelope
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumEmploymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmploymentStatus
  }

  export type UserUpdateOneRequiredWithoutProfessorNestedInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput
    upsert?: UserUpsertWithoutProfessorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessorInput, UserUpdateWithoutProfessorInput>, UserUncheckedUpdateWithoutProfessorInput>
  }

  export type SectionUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<SectionCreateWithoutProfessorInput, SectionUncheckedCreateWithoutProfessorInput> | SectionCreateWithoutProfessorInput[] | SectionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutProfessorInput | SectionCreateOrConnectWithoutProfessorInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutProfessorInput | SectionUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: SectionCreateManyProfessorInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutProfessorInput | SectionUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutProfessorInput | SectionUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<GradeCreateWithoutProfessorInput, GradeUncheckedCreateWithoutProfessorInput> | GradeCreateWithoutProfessorInput[] | GradeUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutProfessorInput | GradeCreateOrConnectWithoutProfessorInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutProfessorInput | GradeUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: GradeCreateManyProfessorInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutProfessorInput | GradeUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutProfessorInput | GradeUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type IncResolutionUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<IncResolutionCreateWithoutProfessorInput, IncResolutionUncheckedCreateWithoutProfessorInput> | IncResolutionCreateWithoutProfessorInput[] | IncResolutionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutProfessorInput | IncResolutionCreateOrConnectWithoutProfessorInput[]
    upsert?: IncResolutionUpsertWithWhereUniqueWithoutProfessorInput | IncResolutionUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: IncResolutionCreateManyProfessorInputEnvelope
    set?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    disconnect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    delete?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    update?: IncResolutionUpdateWithWhereUniqueWithoutProfessorInput | IncResolutionUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: IncResolutionUpdateManyWithWhereWithoutProfessorInput | IncResolutionUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<SectionCreateWithoutProfessorInput, SectionUncheckedCreateWithoutProfessorInput> | SectionCreateWithoutProfessorInput[] | SectionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutProfessorInput | SectionCreateOrConnectWithoutProfessorInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutProfessorInput | SectionUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: SectionCreateManyProfessorInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutProfessorInput | SectionUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutProfessorInput | SectionUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<GradeCreateWithoutProfessorInput, GradeUncheckedCreateWithoutProfessorInput> | GradeCreateWithoutProfessorInput[] | GradeUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutProfessorInput | GradeCreateOrConnectWithoutProfessorInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutProfessorInput | GradeUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: GradeCreateManyProfessorInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutProfessorInput | GradeUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutProfessorInput | GradeUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type IncResolutionUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<IncResolutionCreateWithoutProfessorInput, IncResolutionUncheckedCreateWithoutProfessorInput> | IncResolutionCreateWithoutProfessorInput[] | IncResolutionUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutProfessorInput | IncResolutionCreateOrConnectWithoutProfessorInput[]
    upsert?: IncResolutionUpsertWithWhereUniqueWithoutProfessorInput | IncResolutionUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: IncResolutionCreateManyProfessorInputEnvelope
    set?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    disconnect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    delete?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    update?: IncResolutionUpdateWithWhereUniqueWithoutProfessorInput | IncResolutionUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: IncResolutionUpdateManyWithWhereWithoutProfessorInput | IncResolutionUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
  }

  export type StudentCreateNestedManyWithoutProgramInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubjectCreateNestedManyWithoutProgramInput = {
    create?: XOR<SubjectCreateWithoutProgramInput, SubjectUncheckedCreateWithoutProgramInput> | SubjectCreateWithoutProgramInput[] | SubjectUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutProgramInput | SubjectCreateOrConnectWithoutProgramInput[]
    createMany?: SubjectCreateManyProgramInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<SubjectCreateWithoutProgramInput, SubjectUncheckedCreateWithoutProgramInput> | SubjectCreateWithoutProgramInput[] | SubjectUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutProgramInput | SubjectCreateOrConnectWithoutProgramInput[]
    createMany?: SubjectCreateManyProgramInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutProgramNestedInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutProgramInput | StudentUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutProgramInput | StudentUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutProgramInput | StudentUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SubjectUpdateManyWithoutProgramNestedInput = {
    create?: XOR<SubjectCreateWithoutProgramInput, SubjectUncheckedCreateWithoutProgramInput> | SubjectCreateWithoutProgramInput[] | SubjectUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutProgramInput | SubjectCreateOrConnectWithoutProgramInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutProgramInput | SubjectUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: SubjectCreateManyProgramInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutProgramInput | SubjectUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutProgramInput | SubjectUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutProgramInput | StudentUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutProgramInput | StudentUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutProgramInput | StudentUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<SubjectCreateWithoutProgramInput, SubjectUncheckedCreateWithoutProgramInput> | SubjectCreateWithoutProgramInput[] | SubjectUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutProgramInput | SubjectCreateOrConnectWithoutProgramInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutProgramInput | SubjectUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: SubjectCreateManyProgramInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutProgramInput | SubjectUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutProgramInput | SubjectUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type ProgramCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<ProgramCreateWithoutSubjectsInput, ProgramUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutSubjectsInput
    connect?: ProgramWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutPrerequisitesInput = {
    create?: XOR<SubjectCreateWithoutPrerequisitesInput, SubjectUncheckedCreateWithoutPrerequisitesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutPrerequisitesInput
    connect?: SubjectWhereUniqueInput
  }

  export type SubjectCreateNestedManyWithoutPrerequisiteInput = {
    create?: XOR<SubjectCreateWithoutPrerequisiteInput, SubjectUncheckedCreateWithoutPrerequisiteInput> | SubjectCreateWithoutPrerequisiteInput[] | SubjectUncheckedCreateWithoutPrerequisiteInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPrerequisiteInput | SubjectCreateOrConnectWithoutPrerequisiteInput[]
    createMany?: SubjectCreateManyPrerequisiteInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type SectionCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SectionCreateWithoutSubjectInput, SectionUncheckedCreateWithoutSubjectInput> | SectionCreateWithoutSubjectInput[] | SectionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSubjectInput | SectionCreateOrConnectWithoutSubjectInput[]
    createMany?: SectionCreateManySubjectInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type EnrollmentSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSubjectInput, EnrollmentSubjectUncheckedCreateWithoutSubjectInput> | EnrollmentSubjectCreateWithoutSubjectInput[] | EnrollmentSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSubjectInput | EnrollmentSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: EnrollmentSubjectCreateManySubjectInputEnvelope
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
  }

  export type IncResolutionCreateNestedManyWithoutSubjectInput = {
    create?: XOR<IncResolutionCreateWithoutSubjectInput, IncResolutionUncheckedCreateWithoutSubjectInput> | IncResolutionCreateWithoutSubjectInput[] | IncResolutionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutSubjectInput | IncResolutionCreateOrConnectWithoutSubjectInput[]
    createMany?: IncResolutionCreateManySubjectInputEnvelope
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput = {
    create?: XOR<SubjectCreateWithoutPrerequisiteInput, SubjectUncheckedCreateWithoutPrerequisiteInput> | SubjectCreateWithoutPrerequisiteInput[] | SubjectUncheckedCreateWithoutPrerequisiteInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPrerequisiteInput | SubjectCreateOrConnectWithoutPrerequisiteInput[]
    createMany?: SubjectCreateManyPrerequisiteInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SectionCreateWithoutSubjectInput, SectionUncheckedCreateWithoutSubjectInput> | SectionCreateWithoutSubjectInput[] | SectionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSubjectInput | SectionCreateOrConnectWithoutSubjectInput[]
    createMany?: SectionCreateManySubjectInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSubjectInput, EnrollmentSubjectUncheckedCreateWithoutSubjectInput> | EnrollmentSubjectCreateWithoutSubjectInput[] | EnrollmentSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSubjectInput | EnrollmentSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: EnrollmentSubjectCreateManySubjectInputEnvelope
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
  }

  export type IncResolutionUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<IncResolutionCreateWithoutSubjectInput, IncResolutionUncheckedCreateWithoutSubjectInput> | IncResolutionCreateWithoutSubjectInput[] | IncResolutionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutSubjectInput | IncResolutionCreateOrConnectWithoutSubjectInput[]
    createMany?: IncResolutionCreateManySubjectInputEnvelope
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
  }

  export type EnumSubjectTypeFieldUpdateOperationsInput = {
    set?: $Enums.SubjectType
  }

  export type NullableEnumYearLevelFieldUpdateOperationsInput = {
    set?: $Enums.YearLevel | null
  }

  export type NullableEnumSemesterTypeFieldUpdateOperationsInput = {
    set?: $Enums.SemesterType | null
  }

  export type ProgramUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<ProgramCreateWithoutSubjectsInput, ProgramUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutSubjectsInput
    upsert?: ProgramUpsertWithoutSubjectsInput
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutSubjectsInput, ProgramUpdateWithoutSubjectsInput>, ProgramUncheckedUpdateWithoutSubjectsInput>
  }

  export type SubjectUpdateOneWithoutPrerequisitesNestedInput = {
    create?: XOR<SubjectCreateWithoutPrerequisitesInput, SubjectUncheckedCreateWithoutPrerequisitesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutPrerequisitesInput
    upsert?: SubjectUpsertWithoutPrerequisitesInput
    disconnect?: SubjectWhereInput | boolean
    delete?: SubjectWhereInput | boolean
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutPrerequisitesInput, SubjectUpdateWithoutPrerequisitesInput>, SubjectUncheckedUpdateWithoutPrerequisitesInput>
  }

  export type SubjectUpdateManyWithoutPrerequisiteNestedInput = {
    create?: XOR<SubjectCreateWithoutPrerequisiteInput, SubjectUncheckedCreateWithoutPrerequisiteInput> | SubjectCreateWithoutPrerequisiteInput[] | SubjectUncheckedCreateWithoutPrerequisiteInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPrerequisiteInput | SubjectCreateOrConnectWithoutPrerequisiteInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutPrerequisiteInput | SubjectUpsertWithWhereUniqueWithoutPrerequisiteInput[]
    createMany?: SubjectCreateManyPrerequisiteInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutPrerequisiteInput | SubjectUpdateWithWhereUniqueWithoutPrerequisiteInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutPrerequisiteInput | SubjectUpdateManyWithWhereWithoutPrerequisiteInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type SectionUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SectionCreateWithoutSubjectInput, SectionUncheckedCreateWithoutSubjectInput> | SectionCreateWithoutSubjectInput[] | SectionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSubjectInput | SectionCreateOrConnectWithoutSubjectInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutSubjectInput | SectionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SectionCreateManySubjectInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutSubjectInput | SectionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutSubjectInput | SectionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type EnrollmentSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSubjectInput, EnrollmentSubjectUncheckedCreateWithoutSubjectInput> | EnrollmentSubjectCreateWithoutSubjectInput[] | EnrollmentSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSubjectInput | EnrollmentSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: EnrollmentSubjectUpsertWithWhereUniqueWithoutSubjectInput | EnrollmentSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: EnrollmentSubjectCreateManySubjectInputEnvelope
    set?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    disconnect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    delete?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    update?: EnrollmentSubjectUpdateWithWhereUniqueWithoutSubjectInput | EnrollmentSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: EnrollmentSubjectUpdateManyWithWhereWithoutSubjectInput | EnrollmentSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
  }

  export type IncResolutionUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<IncResolutionCreateWithoutSubjectInput, IncResolutionUncheckedCreateWithoutSubjectInput> | IncResolutionCreateWithoutSubjectInput[] | IncResolutionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutSubjectInput | IncResolutionCreateOrConnectWithoutSubjectInput[]
    upsert?: IncResolutionUpsertWithWhereUniqueWithoutSubjectInput | IncResolutionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: IncResolutionCreateManySubjectInputEnvelope
    set?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    disconnect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    delete?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    update?: IncResolutionUpdateWithWhereUniqueWithoutSubjectInput | IncResolutionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: IncResolutionUpdateManyWithWhereWithoutSubjectInput | IncResolutionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput = {
    create?: XOR<SubjectCreateWithoutPrerequisiteInput, SubjectUncheckedCreateWithoutPrerequisiteInput> | SubjectCreateWithoutPrerequisiteInput[] | SubjectUncheckedCreateWithoutPrerequisiteInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutPrerequisiteInput | SubjectCreateOrConnectWithoutPrerequisiteInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutPrerequisiteInput | SubjectUpsertWithWhereUniqueWithoutPrerequisiteInput[]
    createMany?: SubjectCreateManyPrerequisiteInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutPrerequisiteInput | SubjectUpdateWithWhereUniqueWithoutPrerequisiteInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutPrerequisiteInput | SubjectUpdateManyWithWhereWithoutPrerequisiteInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SectionCreateWithoutSubjectInput, SectionUncheckedCreateWithoutSubjectInput> | SectionCreateWithoutSubjectInput[] | SectionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutSubjectInput | SectionCreateOrConnectWithoutSubjectInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutSubjectInput | SectionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SectionCreateManySubjectInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutSubjectInput | SectionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutSubjectInput | SectionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSubjectInput, EnrollmentSubjectUncheckedCreateWithoutSubjectInput> | EnrollmentSubjectCreateWithoutSubjectInput[] | EnrollmentSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSubjectInput | EnrollmentSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: EnrollmentSubjectUpsertWithWhereUniqueWithoutSubjectInput | EnrollmentSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: EnrollmentSubjectCreateManySubjectInputEnvelope
    set?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    disconnect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    delete?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    update?: EnrollmentSubjectUpdateWithWhereUniqueWithoutSubjectInput | EnrollmentSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: EnrollmentSubjectUpdateManyWithWhereWithoutSubjectInput | EnrollmentSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
  }

  export type IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<IncResolutionCreateWithoutSubjectInput, IncResolutionUncheckedCreateWithoutSubjectInput> | IncResolutionCreateWithoutSubjectInput[] | IncResolutionUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: IncResolutionCreateOrConnectWithoutSubjectInput | IncResolutionCreateOrConnectWithoutSubjectInput[]
    upsert?: IncResolutionUpsertWithWhereUniqueWithoutSubjectInput | IncResolutionUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: IncResolutionCreateManySubjectInputEnvelope
    set?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    disconnect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    delete?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    connect?: IncResolutionWhereUniqueInput | IncResolutionWhereUniqueInput[]
    update?: IncResolutionUpdateWithWhereUniqueWithoutSubjectInput | IncResolutionUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: IncResolutionUpdateManyWithWhereWithoutSubjectInput | IncResolutionUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutSectionsInput = {
    create?: XOR<SubjectCreateWithoutSectionsInput, SubjectUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSectionsInput
    connect?: SubjectWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutSectionsInput = {
    create?: XOR<ProfessorCreateWithoutSectionsInput, ProfessorUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutSectionsInput
    connect?: ProfessorWhereUniqueInput
  }

  export type EnrollmentSubjectCreateNestedManyWithoutSectionInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSectionInput, EnrollmentSubjectUncheckedCreateWithoutSectionInput> | EnrollmentSubjectCreateWithoutSectionInput[] | EnrollmentSubjectUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSectionInput | EnrollmentSubjectCreateOrConnectWithoutSectionInput[]
    createMany?: EnrollmentSubjectCreateManySectionInputEnvelope
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
  }

  export type EnrollmentSubjectUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSectionInput, EnrollmentSubjectUncheckedCreateWithoutSectionInput> | EnrollmentSubjectCreateWithoutSectionInput[] | EnrollmentSubjectUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSectionInput | EnrollmentSubjectCreateOrConnectWithoutSectionInput[]
    createMany?: EnrollmentSubjectCreateManySectionInputEnvelope
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
  }

  export type EnumSemesterTypeFieldUpdateOperationsInput = {
    set?: $Enums.SemesterType
  }

  export type EnumSectionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SectionStatus
  }

  export type SubjectUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<SubjectCreateWithoutSectionsInput, SubjectUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSectionsInput
    upsert?: SubjectUpsertWithoutSectionsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutSectionsInput, SubjectUpdateWithoutSectionsInput>, SubjectUncheckedUpdateWithoutSectionsInput>
  }

  export type ProfessorUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<ProfessorCreateWithoutSectionsInput, ProfessorUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutSectionsInput
    upsert?: ProfessorUpsertWithoutSectionsInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutSectionsInput, ProfessorUpdateWithoutSectionsInput>, ProfessorUncheckedUpdateWithoutSectionsInput>
  }

  export type EnrollmentSubjectUpdateManyWithoutSectionNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSectionInput, EnrollmentSubjectUncheckedCreateWithoutSectionInput> | EnrollmentSubjectCreateWithoutSectionInput[] | EnrollmentSubjectUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSectionInput | EnrollmentSubjectCreateOrConnectWithoutSectionInput[]
    upsert?: EnrollmentSubjectUpsertWithWhereUniqueWithoutSectionInput | EnrollmentSubjectUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: EnrollmentSubjectCreateManySectionInputEnvelope
    set?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    disconnect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    delete?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    update?: EnrollmentSubjectUpdateWithWhereUniqueWithoutSectionInput | EnrollmentSubjectUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: EnrollmentSubjectUpdateManyWithWhereWithoutSectionInput | EnrollmentSubjectUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
  }

  export type EnrollmentSubjectUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutSectionInput, EnrollmentSubjectUncheckedCreateWithoutSectionInput> | EnrollmentSubjectCreateWithoutSectionInput[] | EnrollmentSubjectUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutSectionInput | EnrollmentSubjectCreateOrConnectWithoutSectionInput[]
    upsert?: EnrollmentSubjectUpsertWithWhereUniqueWithoutSectionInput | EnrollmentSubjectUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: EnrollmentSubjectCreateManySectionInputEnvelope
    set?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    disconnect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    delete?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    update?: EnrollmentSubjectUpdateWithWhereUniqueWithoutSectionInput | EnrollmentSubjectUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: EnrollmentSubjectUpdateManyWithWhereWithoutSectionInput | EnrollmentSubjectUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
  }

  export type EnrollmentCreateNestedManyWithoutTermInput = {
    create?: XOR<EnrollmentCreateWithoutTermInput, EnrollmentUncheckedCreateWithoutTermInput> | EnrollmentCreateWithoutTermInput[] | EnrollmentUncheckedCreateWithoutTermInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutTermInput | EnrollmentCreateOrConnectWithoutTermInput[]
    createMany?: EnrollmentCreateManyTermInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<EnrollmentCreateWithoutTermInput, EnrollmentUncheckedCreateWithoutTermInput> | EnrollmentCreateWithoutTermInput[] | EnrollmentUncheckedCreateWithoutTermInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutTermInput | EnrollmentCreateOrConnectWithoutTermInput[]
    createMany?: EnrollmentCreateManyTermInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type EnrollmentUpdateManyWithoutTermNestedInput = {
    create?: XOR<EnrollmentCreateWithoutTermInput, EnrollmentUncheckedCreateWithoutTermInput> | EnrollmentCreateWithoutTermInput[] | EnrollmentUncheckedCreateWithoutTermInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutTermInput | EnrollmentCreateOrConnectWithoutTermInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutTermInput | EnrollmentUpsertWithWhereUniqueWithoutTermInput[]
    createMany?: EnrollmentCreateManyTermInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutTermInput | EnrollmentUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutTermInput | EnrollmentUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutTermNestedInput = {
    create?: XOR<EnrollmentCreateWithoutTermInput, EnrollmentUncheckedCreateWithoutTermInput> | EnrollmentCreateWithoutTermInput[] | EnrollmentUncheckedCreateWithoutTermInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutTermInput | EnrollmentCreateOrConnectWithoutTermInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutTermInput | EnrollmentUpsertWithWhereUniqueWithoutTermInput[]
    createMany?: EnrollmentCreateManyTermInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutTermInput | EnrollmentUpdateWithWhereUniqueWithoutTermInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutTermInput | EnrollmentUpdateManyWithWhereWithoutTermInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<StudentCreateWithoutEnrollmentsInput, StudentUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutEnrollmentsInput
    connect?: StudentWhereUniqueInput
  }

  export type AcademicTermCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<AcademicTermCreateWithoutEnrollmentsInput, AcademicTermUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: AcademicTermCreateOrConnectWithoutEnrollmentsInput
    connect?: AcademicTermWhereUniqueInput
  }

  export type EnrollmentSubjectCreateNestedManyWithoutEnrollmentInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutEnrollmentInput, EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput> | EnrollmentSubjectCreateWithoutEnrollmentInput[] | EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput | EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput[]
    createMany?: EnrollmentSubjectCreateManyEnrollmentInputEnvelope
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
  }

  export type EnrollmentSubjectUncheckedCreateNestedManyWithoutEnrollmentInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutEnrollmentInput, EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput> | EnrollmentSubjectCreateWithoutEnrollmentInput[] | EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput | EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput[]
    createMany?: EnrollmentSubjectCreateManyEnrollmentInputEnvelope
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
  }

  export type EnumEnrollmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.EnrollmentStatus
  }

  export type StudentUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<StudentCreateWithoutEnrollmentsInput, StudentUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutEnrollmentsInput
    upsert?: StudentUpsertWithoutEnrollmentsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutEnrollmentsInput, StudentUpdateWithoutEnrollmentsInput>, StudentUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type AcademicTermUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<AcademicTermCreateWithoutEnrollmentsInput, AcademicTermUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: AcademicTermCreateOrConnectWithoutEnrollmentsInput
    upsert?: AcademicTermUpsertWithoutEnrollmentsInput
    connect?: AcademicTermWhereUniqueInput
    update?: XOR<XOR<AcademicTermUpdateToOneWithWhereWithoutEnrollmentsInput, AcademicTermUpdateWithoutEnrollmentsInput>, AcademicTermUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type EnrollmentSubjectUpdateManyWithoutEnrollmentNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutEnrollmentInput, EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput> | EnrollmentSubjectCreateWithoutEnrollmentInput[] | EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput | EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput[]
    upsert?: EnrollmentSubjectUpsertWithWhereUniqueWithoutEnrollmentInput | EnrollmentSubjectUpsertWithWhereUniqueWithoutEnrollmentInput[]
    createMany?: EnrollmentSubjectCreateManyEnrollmentInputEnvelope
    set?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    disconnect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    delete?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    update?: EnrollmentSubjectUpdateWithWhereUniqueWithoutEnrollmentInput | EnrollmentSubjectUpdateWithWhereUniqueWithoutEnrollmentInput[]
    updateMany?: EnrollmentSubjectUpdateManyWithWhereWithoutEnrollmentInput | EnrollmentSubjectUpdateManyWithWhereWithoutEnrollmentInput[]
    deleteMany?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
  }

  export type EnrollmentSubjectUncheckedUpdateManyWithoutEnrollmentNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutEnrollmentInput, EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput> | EnrollmentSubjectCreateWithoutEnrollmentInput[] | EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput[]
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput | EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput[]
    upsert?: EnrollmentSubjectUpsertWithWhereUniqueWithoutEnrollmentInput | EnrollmentSubjectUpsertWithWhereUniqueWithoutEnrollmentInput[]
    createMany?: EnrollmentSubjectCreateManyEnrollmentInputEnvelope
    set?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    disconnect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    delete?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    connect?: EnrollmentSubjectWhereUniqueInput | EnrollmentSubjectWhereUniqueInput[]
    update?: EnrollmentSubjectUpdateWithWhereUniqueWithoutEnrollmentInput | EnrollmentSubjectUpdateWithWhereUniqueWithoutEnrollmentInput[]
    updateMany?: EnrollmentSubjectUpdateManyWithWhereWithoutEnrollmentInput | EnrollmentSubjectUpdateManyWithWhereWithoutEnrollmentInput[]
    deleteMany?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
  }

  export type EnrollmentCreateNestedOneWithoutEnrollmentSubjectsInput = {
    create?: XOR<EnrollmentCreateWithoutEnrollmentSubjectsInput, EnrollmentUncheckedCreateWithoutEnrollmentSubjectsInput>
    connectOrCreate?: EnrollmentCreateOrConnectWithoutEnrollmentSubjectsInput
    connect?: EnrollmentWhereUniqueInput
  }

  export type SectionCreateNestedOneWithoutEnrollmentSubjectsInput = {
    create?: XOR<SectionCreateWithoutEnrollmentSubjectsInput, SectionUncheckedCreateWithoutEnrollmentSubjectsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutEnrollmentSubjectsInput
    connect?: SectionWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutEnrollmentSubjectsInput = {
    create?: XOR<SubjectCreateWithoutEnrollmentSubjectsInput, SubjectUncheckedCreateWithoutEnrollmentSubjectsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutEnrollmentSubjectsInput
    connect?: SubjectWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutEnrollmentSubjectInput = {
    create?: XOR<GradeCreateWithoutEnrollmentSubjectInput, GradeUncheckedCreateWithoutEnrollmentSubjectInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEnrollmentSubjectInput
    connect?: GradeWhereUniqueInput
  }

  export type GradeUncheckedCreateNestedOneWithoutEnrollmentSubjectInput = {
    create?: XOR<GradeCreateWithoutEnrollmentSubjectInput, GradeUncheckedCreateWithoutEnrollmentSubjectInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEnrollmentSubjectInput
    connect?: GradeWhereUniqueInput
  }

  export type EnrollmentUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput = {
    create?: XOR<EnrollmentCreateWithoutEnrollmentSubjectsInput, EnrollmentUncheckedCreateWithoutEnrollmentSubjectsInput>
    connectOrCreate?: EnrollmentCreateOrConnectWithoutEnrollmentSubjectsInput
    upsert?: EnrollmentUpsertWithoutEnrollmentSubjectsInput
    connect?: EnrollmentWhereUniqueInput
    update?: XOR<XOR<EnrollmentUpdateToOneWithWhereWithoutEnrollmentSubjectsInput, EnrollmentUpdateWithoutEnrollmentSubjectsInput>, EnrollmentUncheckedUpdateWithoutEnrollmentSubjectsInput>
  }

  export type SectionUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput = {
    create?: XOR<SectionCreateWithoutEnrollmentSubjectsInput, SectionUncheckedCreateWithoutEnrollmentSubjectsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutEnrollmentSubjectsInput
    upsert?: SectionUpsertWithoutEnrollmentSubjectsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutEnrollmentSubjectsInput, SectionUpdateWithoutEnrollmentSubjectsInput>, SectionUncheckedUpdateWithoutEnrollmentSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput = {
    create?: XOR<SubjectCreateWithoutEnrollmentSubjectsInput, SubjectUncheckedCreateWithoutEnrollmentSubjectsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutEnrollmentSubjectsInput
    upsert?: SubjectUpsertWithoutEnrollmentSubjectsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutEnrollmentSubjectsInput, SubjectUpdateWithoutEnrollmentSubjectsInput>, SubjectUncheckedUpdateWithoutEnrollmentSubjectsInput>
  }

  export type GradeUpdateOneWithoutEnrollmentSubjectNestedInput = {
    create?: XOR<GradeCreateWithoutEnrollmentSubjectInput, GradeUncheckedCreateWithoutEnrollmentSubjectInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEnrollmentSubjectInput
    upsert?: GradeUpsertWithoutEnrollmentSubjectInput
    disconnect?: GradeWhereInput | boolean
    delete?: GradeWhereInput | boolean
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutEnrollmentSubjectInput, GradeUpdateWithoutEnrollmentSubjectInput>, GradeUncheckedUpdateWithoutEnrollmentSubjectInput>
  }

  export type GradeUncheckedUpdateOneWithoutEnrollmentSubjectNestedInput = {
    create?: XOR<GradeCreateWithoutEnrollmentSubjectInput, GradeUncheckedCreateWithoutEnrollmentSubjectInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEnrollmentSubjectInput
    upsert?: GradeUpsertWithoutEnrollmentSubjectInput
    disconnect?: GradeWhereInput | boolean
    delete?: GradeWhereInput | boolean
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutEnrollmentSubjectInput, GradeUpdateWithoutEnrollmentSubjectInput>, GradeUncheckedUpdateWithoutEnrollmentSubjectInput>
  }

  export type EnrollmentSubjectCreateNestedOneWithoutGradeInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutGradeInput, EnrollmentSubjectUncheckedCreateWithoutGradeInput>
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutGradeInput
    connect?: EnrollmentSubjectWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutGradesInput = {
    create?: XOR<ProfessorCreateWithoutGradesInput, ProfessorUncheckedCreateWithoutGradesInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutGradesInput
    connect?: ProfessorWhereUniqueInput
  }

  export type EnumGradeValueFieldUpdateOperationsInput = {
    set?: $Enums.GradeValue
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnrollmentSubjectUpdateOneRequiredWithoutGradeNestedInput = {
    create?: XOR<EnrollmentSubjectCreateWithoutGradeInput, EnrollmentSubjectUncheckedCreateWithoutGradeInput>
    connectOrCreate?: EnrollmentSubjectCreateOrConnectWithoutGradeInput
    upsert?: EnrollmentSubjectUpsertWithoutGradeInput
    connect?: EnrollmentSubjectWhereUniqueInput
    update?: XOR<XOR<EnrollmentSubjectUpdateToOneWithWhereWithoutGradeInput, EnrollmentSubjectUpdateWithoutGradeInput>, EnrollmentSubjectUncheckedUpdateWithoutGradeInput>
  }

  export type ProfessorUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<ProfessorCreateWithoutGradesInput, ProfessorUncheckedCreateWithoutGradesInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutGradesInput
    upsert?: ProfessorUpsertWithoutGradesInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutGradesInput, ProfessorUpdateWithoutGradesInput>, ProfessorUncheckedUpdateWithoutGradesInput>
  }

  export type StudentCreateNestedOneWithoutIncResolutionsInput = {
    create?: XOR<StudentCreateWithoutIncResolutionsInput, StudentUncheckedCreateWithoutIncResolutionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutIncResolutionsInput
    connect?: StudentWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutIncResolutionsInput = {
    create?: XOR<SubjectCreateWithoutIncResolutionsInput, SubjectUncheckedCreateWithoutIncResolutionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutIncResolutionsInput
    connect?: SubjectWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutIncResolutionsInput = {
    create?: XOR<ProfessorCreateWithoutIncResolutionsInput, ProfessorUncheckedCreateWithoutIncResolutionsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutIncResolutionsInput
    connect?: ProfessorWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutIncResolutionsNestedInput = {
    create?: XOR<StudentCreateWithoutIncResolutionsInput, StudentUncheckedCreateWithoutIncResolutionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutIncResolutionsInput
    upsert?: StudentUpsertWithoutIncResolutionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutIncResolutionsInput, StudentUpdateWithoutIncResolutionsInput>, StudentUncheckedUpdateWithoutIncResolutionsInput>
  }

  export type SubjectUpdateOneRequiredWithoutIncResolutionsNestedInput = {
    create?: XOR<SubjectCreateWithoutIncResolutionsInput, SubjectUncheckedCreateWithoutIncResolutionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutIncResolutionsInput
    upsert?: SubjectUpsertWithoutIncResolutionsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutIncResolutionsInput, SubjectUpdateWithoutIncResolutionsInput>, SubjectUncheckedUpdateWithoutIncResolutionsInput>
  }

  export type ProfessorUpdateOneRequiredWithoutIncResolutionsNestedInput = {
    create?: XOR<ProfessorCreateWithoutIncResolutionsInput, ProfessorUncheckedCreateWithoutIncResolutionsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutIncResolutionsInput
    upsert?: ProfessorUpsertWithoutIncResolutionsInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutIncResolutionsInput, ProfessorUpdateWithoutIncResolutionsInput>, ProfessorUncheckedUpdateWithoutIncResolutionsInput>
  }

  export type UserCreateNestedOneWithoutAnalyticsLogsInput = {
    create?: XOR<UserCreateWithoutAnalyticsLogsInput, UserUncheckedCreateWithoutAnalyticsLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAnalyticsLogsNestedInput = {
    create?: XOR<UserCreateWithoutAnalyticsLogsInput, UserUncheckedCreateWithoutAnalyticsLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsLogsInput
    upsert?: UserUpsertWithoutAnalyticsLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnalyticsLogsInput, UserUpdateWithoutAnalyticsLogsInput>, UserUncheckedUpdateWithoutAnalyticsLogsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[]
    notIn?: $Enums.UserStatus[]
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[]
    notIn?: $Enums.UserStatus[]
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumStudentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentStatus | EnumStudentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudentStatus[]
    notIn?: $Enums.StudentStatus[]
    not?: NestedEnumStudentStatusFilter<$PrismaModel> | $Enums.StudentStatus
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumStudentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentStatus | EnumStudentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StudentStatus[]
    notIn?: $Enums.StudentStatus[]
    not?: NestedEnumStudentStatusWithAggregatesFilter<$PrismaModel> | $Enums.StudentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudentStatusFilter<$PrismaModel>
    _max?: NestedEnumStudentStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumEmploymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[]
    notIn?: $Enums.EmploymentStatus[]
    not?: NestedEnumEmploymentStatusFilter<$PrismaModel> | $Enums.EmploymentStatus
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[]
    notIn?: $Enums.EmploymentStatus[]
    not?: NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumSubjectTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubjectType | EnumSubjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubjectType[]
    notIn?: $Enums.SubjectType[]
    not?: NestedEnumSubjectTypeFilter<$PrismaModel> | $Enums.SubjectType
  }

  export type NestedEnumYearLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.YearLevel | EnumYearLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.YearLevel[] | null
    notIn?: $Enums.YearLevel[] | null
    not?: NestedEnumYearLevelNullableFilter<$PrismaModel> | $Enums.YearLevel | null
  }

  export type NestedEnumSemesterTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.SemesterType[] | null
    notIn?: $Enums.SemesterType[] | null
    not?: NestedEnumSemesterTypeNullableFilter<$PrismaModel> | $Enums.SemesterType | null
  }

  export type NestedEnumSubjectTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubjectType | EnumSubjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubjectType[]
    notIn?: $Enums.SubjectType[]
    not?: NestedEnumSubjectTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubjectType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubjectTypeFilter<$PrismaModel>
    _max?: NestedEnumSubjectTypeFilter<$PrismaModel>
  }

  export type NestedEnumYearLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YearLevel | EnumYearLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.YearLevel[] | null
    notIn?: $Enums.YearLevel[] | null
    not?: NestedEnumYearLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.YearLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumYearLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumYearLevelNullableFilter<$PrismaModel>
  }

  export type NestedEnumSemesterTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.SemesterType[] | null
    notIn?: $Enums.SemesterType[] | null
    not?: NestedEnumSemesterTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.SemesterType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSemesterTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumSemesterTypeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumSemesterTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SemesterType[]
    notIn?: $Enums.SemesterType[]
    not?: NestedEnumSemesterTypeFilter<$PrismaModel> | $Enums.SemesterType
  }

  export type NestedEnumSectionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionStatus | EnumSectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SectionStatus[]
    notIn?: $Enums.SectionStatus[]
    not?: NestedEnumSectionStatusFilter<$PrismaModel> | $Enums.SectionStatus
  }

  export type NestedEnumSemesterTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SemesterType | EnumSemesterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SemesterType[]
    notIn?: $Enums.SemesterType[]
    not?: NestedEnumSemesterTypeWithAggregatesFilter<$PrismaModel> | $Enums.SemesterType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSemesterTypeFilter<$PrismaModel>
    _max?: NestedEnumSemesterTypeFilter<$PrismaModel>
  }

  export type NestedEnumSectionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SectionStatus | EnumSectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SectionStatus[]
    notIn?: $Enums.SectionStatus[]
    not?: NestedEnumSectionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SectionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSectionStatusFilter<$PrismaModel>
    _max?: NestedEnumSectionStatusFilter<$PrismaModel>
  }

  export type NestedEnumEnrollmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[]
    notIn?: $Enums.EnrollmentStatus[]
    not?: NestedEnumEnrollmentStatusFilter<$PrismaModel> | $Enums.EnrollmentStatus
  }

  export type NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[]
    notIn?: $Enums.EnrollmentStatus[]
    not?: NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnrollmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
    _max?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumGradeValueFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeValue | EnumGradeValueFieldRefInput<$PrismaModel>
    in?: $Enums.GradeValue[]
    notIn?: $Enums.GradeValue[]
    not?: NestedEnumGradeValueFilter<$PrismaModel> | $Enums.GradeValue
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGradeValueWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeValue | EnumGradeValueFieldRefInput<$PrismaModel>
    in?: $Enums.GradeValue[]
    notIn?: $Enums.GradeValue[]
    not?: NestedEnumGradeValueWithAggregatesFilter<$PrismaModel> | $Enums.GradeValue
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradeValueFilter<$PrismaModel>
    _max?: NestedEnumGradeValueFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutRoleInput = {
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentCreateNestedOneWithoutUserInput
    professor?: ProfessorCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roleId?: IntFilter<"User"> | number
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type StudentCreateWithoutUserInput = {
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutStudentsInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    incResolutions?: IncResolutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    id?: number
    studentNo: string
    programId: number
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type ProfessorCreateWithoutUserInput = {
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionCreateNestedManyWithoutProfessorInput
    grades?: GradeCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutUserInput = {
    id?: number
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutProfessorInput
    grades?: GradeUncheckedCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutUserInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsLogCreateWithoutUserInput = {
    action: string
    description?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsLogUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    description?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsLogCreateOrConnectWithoutUserInput = {
    where: AnalyticsLogWhereUniqueInput
    create: XOR<AnalyticsLogCreateWithoutUserInput, AnalyticsLogUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsLogCreateManyUserInputEnvelope = {
    data: AnalyticsLogCreateManyUserInput | AnalyticsLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    programId?: IntFieldUpdateOperationsInput | number
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ProfessorUpsertWithoutUserInput = {
    update: XOR<ProfessorUpdateWithoutUserInput, ProfessorUncheckedUpdateWithoutUserInput>
    create: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutUserInput, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUpdateWithoutUserInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUpdateManyWithoutProfessorNestedInput
    grades?: GradeUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutProfessorNestedInput
    grades?: GradeUncheckedUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type AnalyticsLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AnalyticsLogWhereUniqueInput
    update: XOR<AnalyticsLogUpdateWithoutUserInput, AnalyticsLogUncheckedUpdateWithoutUserInput>
    create: XOR<AnalyticsLogCreateWithoutUserInput, AnalyticsLogUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AnalyticsLogWhereUniqueInput
    data: XOR<AnalyticsLogUpdateWithoutUserInput, AnalyticsLogUncheckedUpdateWithoutUserInput>
  }

  export type AnalyticsLogUpdateManyWithWhereWithoutUserInput = {
    where: AnalyticsLogScalarWhereInput
    data: XOR<AnalyticsLogUpdateManyMutationInput, AnalyticsLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AnalyticsLogScalarWhereInput = {
    AND?: AnalyticsLogScalarWhereInput | AnalyticsLogScalarWhereInput[]
    OR?: AnalyticsLogScalarWhereInput[]
    NOT?: AnalyticsLogScalarWhereInput | AnalyticsLogScalarWhereInput[]
    id?: IntFilter<"AnalyticsLog"> | number
    userId?: IntFilter<"AnalyticsLog"> | number
    action?: StringFilter<"AnalyticsLog"> | string
    description?: StringNullableFilter<"AnalyticsLog"> | string | null
    timestamp?: DateTimeFilter<"AnalyticsLog"> | Date | string
  }

  export type UserCreateWithoutStudentInput = {
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    professor?: ProfessorCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: number
    email: string
    password: string
    roleId: number
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type ProgramCreateWithoutStudentsInput = {
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: SubjectCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutStudentsInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
  }

  export type EnrollmentCreateWithoutStudentInput = {
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    term: AcademicTermCreateNestedOneWithoutEnrollmentsInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutEnrollmentInput
  }

  export type EnrollmentUncheckedCreateWithoutStudentInput = {
    id?: number
    termId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutEnrollmentInput
  }

  export type EnrollmentCreateOrConnectWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentCreateManyStudentInputEnvelope = {
    data: EnrollmentCreateManyStudentInput | EnrollmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type IncResolutionCreateWithoutStudentInput = {
    oldGrade: string
    newGrade: $Enums.GradeValue
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutIncResolutionsInput
    professor: ProfessorCreateNestedOneWithoutIncResolutionsInput
  }

  export type IncResolutionUncheckedCreateWithoutStudentInput = {
    id?: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionCreateOrConnectWithoutStudentInput = {
    where: IncResolutionWhereUniqueInput
    create: XOR<IncResolutionCreateWithoutStudentInput, IncResolutionUncheckedCreateWithoutStudentInput>
  }

  export type IncResolutionCreateManyStudentInputEnvelope = {
    data: IncResolutionCreateManyStudentInput | IncResolutionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    professor?: ProfessorUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProgramUpsertWithoutStudentsInput = {
    update: XOR<ProgramUpdateWithoutStudentsInput, ProgramUncheckedUpdateWithoutStudentsInput>
    create: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutStudentsInput, ProgramUncheckedUpdateWithoutStudentsInput>
  }

  export type ProgramUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutStudentInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    OR?: EnrollmentScalarWhereInput[]
    NOT?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    id?: IntFilter<"Enrollment"> | number
    studentId?: IntFilter<"Enrollment"> | number
    termId?: IntFilter<"Enrollment"> | number
    dateEnrolled?: DateTimeFilter<"Enrollment"> | Date | string
    totalUnits?: IntFilter<"Enrollment"> | number
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
  }

  export type IncResolutionUpsertWithWhereUniqueWithoutStudentInput = {
    where: IncResolutionWhereUniqueInput
    update: XOR<IncResolutionUpdateWithoutStudentInput, IncResolutionUncheckedUpdateWithoutStudentInput>
    create: XOR<IncResolutionCreateWithoutStudentInput, IncResolutionUncheckedCreateWithoutStudentInput>
  }

  export type IncResolutionUpdateWithWhereUniqueWithoutStudentInput = {
    where: IncResolutionWhereUniqueInput
    data: XOR<IncResolutionUpdateWithoutStudentInput, IncResolutionUncheckedUpdateWithoutStudentInput>
  }

  export type IncResolutionUpdateManyWithWhereWithoutStudentInput = {
    where: IncResolutionScalarWhereInput
    data: XOR<IncResolutionUpdateManyMutationInput, IncResolutionUncheckedUpdateManyWithoutStudentInput>
  }

  export type IncResolutionScalarWhereInput = {
    AND?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
    OR?: IncResolutionScalarWhereInput[]
    NOT?: IncResolutionScalarWhereInput | IncResolutionScalarWhereInput[]
    id?: IntFilter<"IncResolution"> | number
    studentId?: IntFilter<"IncResolution"> | number
    subjectId?: IntFilter<"IncResolution"> | number
    oldGrade?: StringFilter<"IncResolution"> | string
    newGrade?: EnumGradeValueFilter<"IncResolution"> | $Enums.GradeValue
    professorId?: IntFilter<"IncResolution"> | number
    approvedByRegistrar?: BoolFilter<"IncResolution"> | boolean
    dateSubmitted?: DateTimeFilter<"IncResolution"> | Date | string
    createdAt?: DateTimeFilter<"IncResolution"> | Date | string
    updatedAt?: DateTimeFilter<"IncResolution"> | Date | string
  }

  export type UserCreateWithoutProfessorInput = {
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    student?: StudentCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfessorInput = {
    id?: number
    email: string
    password: string
    roleId: number
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    analyticsLogs?: AnalyticsLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfessorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
  }

  export type SectionCreateWithoutProfessorInput = {
    name: string
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutSectionsInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutProfessorInput = {
    id?: number
    name: string
    subjectId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutProfessorInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutProfessorInput, SectionUncheckedCreateWithoutProfessorInput>
  }

  export type SectionCreateManyProfessorInputEnvelope = {
    data: SectionCreateManyProfessorInput | SectionCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutProfessorInput = {
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubject: EnrollmentSubjectCreateNestedOneWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutProfessorInput = {
    id?: number
    enrollmentSubjectId: number
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutProfessorInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutProfessorInput, GradeUncheckedCreateWithoutProfessorInput>
  }

  export type GradeCreateManyProfessorInputEnvelope = {
    data: GradeCreateManyProfessorInput | GradeCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type IncResolutionCreateWithoutProfessorInput = {
    oldGrade: string
    newGrade: $Enums.GradeValue
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutIncResolutionsInput
    subject: SubjectCreateNestedOneWithoutIncResolutionsInput
  }

  export type IncResolutionUncheckedCreateWithoutProfessorInput = {
    id?: number
    studentId: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionCreateOrConnectWithoutProfessorInput = {
    where: IncResolutionWhereUniqueInput
    create: XOR<IncResolutionCreateWithoutProfessorInput, IncResolutionUncheckedCreateWithoutProfessorInput>
  }

  export type IncResolutionCreateManyProfessorInputEnvelope = {
    data: IncResolutionCreateManyProfessorInput | IncResolutionCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfessorInput = {
    update: XOR<UserUpdateWithoutProfessorInput, UserUncheckedUpdateWithoutProfessorInput>
    create: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessorInput, UserUncheckedUpdateWithoutProfessorInput>
  }

  export type UserUpdateWithoutProfessorInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SectionUpsertWithWhereUniqueWithoutProfessorInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutProfessorInput, SectionUncheckedUpdateWithoutProfessorInput>
    create: XOR<SectionCreateWithoutProfessorInput, SectionUncheckedCreateWithoutProfessorInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutProfessorInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutProfessorInput, SectionUncheckedUpdateWithoutProfessorInput>
  }

  export type SectionUpdateManyWithWhereWithoutProfessorInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutProfessorInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: IntFilter<"Section"> | number
    name?: StringFilter<"Section"> | string
    subjectId?: IntFilter<"Section"> | number
    professorId?: IntFilter<"Section"> | number
    maxSlots?: IntFilter<"Section"> | number
    availableSlots?: IntFilter<"Section"> | number
    semester?: EnumSemesterTypeFilter<"Section"> | $Enums.SemesterType
    schoolYear?: StringFilter<"Section"> | string
    schedule?: StringNullableFilter<"Section"> | string | null
    status?: EnumSectionStatusFilter<"Section"> | $Enums.SectionStatus
    createdAt?: DateTimeFilter<"Section"> | Date | string
    updatedAt?: DateTimeFilter<"Section"> | Date | string
  }

  export type GradeUpsertWithWhereUniqueWithoutProfessorInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutProfessorInput, GradeUncheckedUpdateWithoutProfessorInput>
    create: XOR<GradeCreateWithoutProfessorInput, GradeUncheckedCreateWithoutProfessorInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutProfessorInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutProfessorInput, GradeUncheckedUpdateWithoutProfessorInput>
  }

  export type GradeUpdateManyWithWhereWithoutProfessorInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutProfessorInput>
  }

  export type GradeScalarWhereInput = {
    AND?: GradeScalarWhereInput | GradeScalarWhereInput[]
    OR?: GradeScalarWhereInput[]
    NOT?: GradeScalarWhereInput | GradeScalarWhereInput[]
    id?: IntFilter<"Grade"> | number
    enrollmentSubjectId?: IntFilter<"Grade"> | number
    gradeValue?: EnumGradeValueFilter<"Grade"> | $Enums.GradeValue
    remarks?: StringNullableFilter<"Grade"> | string | null
    encodedBy?: IntFilter<"Grade"> | number
    approved?: BoolFilter<"Grade"> | boolean
    dateEncoded?: DateTimeFilter<"Grade"> | Date | string
    repeatEligibleDate?: DateTimeNullableFilter<"Grade"> | Date | string | null
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
  }

  export type IncResolutionUpsertWithWhereUniqueWithoutProfessorInput = {
    where: IncResolutionWhereUniqueInput
    update: XOR<IncResolutionUpdateWithoutProfessorInput, IncResolutionUncheckedUpdateWithoutProfessorInput>
    create: XOR<IncResolutionCreateWithoutProfessorInput, IncResolutionUncheckedCreateWithoutProfessorInput>
  }

  export type IncResolutionUpdateWithWhereUniqueWithoutProfessorInput = {
    where: IncResolutionWhereUniqueInput
    data: XOR<IncResolutionUpdateWithoutProfessorInput, IncResolutionUncheckedUpdateWithoutProfessorInput>
  }

  export type IncResolutionUpdateManyWithWhereWithoutProfessorInput = {
    where: IncResolutionScalarWhereInput
    data: XOR<IncResolutionUpdateManyMutationInput, IncResolutionUncheckedUpdateManyWithoutProfessorInput>
  }

  export type StudentCreateWithoutProgramInput = {
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    incResolutions?: IncResolutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutProgramInput = {
    id?: number
    userId: number
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutProgramInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput>
  }

  export type StudentCreateManyProgramInputEnvelope = {
    data: StudentCreateManyProgramInput | StudentCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutProgramInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisite?: SubjectCreateNestedOneWithoutPrerequisitesInput
    prerequisites?: SubjectCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutProgramInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionUncheckedCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutProgramInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutProgramInput, SubjectUncheckedCreateWithoutProgramInput>
  }

  export type SubjectCreateManyProgramInputEnvelope = {
    data: SubjectCreateManyProgramInput | SubjectCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutProgramInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutProgramInput, StudentUncheckedUpdateWithoutProgramInput>
    create: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutProgramInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutProgramInput, StudentUncheckedUpdateWithoutProgramInput>
  }

  export type StudentUpdateManyWithWhereWithoutProgramInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutProgramInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    userId?: IntFilter<"Student"> | number
    studentNo?: StringFilter<"Student"> | string
    programId?: IntFilter<"Student"> | number
    yearLevel?: IntFilter<"Student"> | number
    gpa?: DecimalNullableFilter<"Student"> | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFilter<"Student"> | boolean
    status?: EnumStudentStatusFilter<"Student"> | $Enums.StudentStatus
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
  }

  export type SubjectUpsertWithWhereUniqueWithoutProgramInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutProgramInput, SubjectUncheckedUpdateWithoutProgramInput>
    create: XOR<SubjectCreateWithoutProgramInput, SubjectUncheckedCreateWithoutProgramInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutProgramInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutProgramInput, SubjectUncheckedUpdateWithoutProgramInput>
  }

  export type SubjectUpdateManyWithWhereWithoutProgramInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutProgramInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: IntFilter<"Subject"> | number
    code?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    units?: IntFilter<"Subject"> | number
    subjectType?: EnumSubjectTypeFilter<"Subject"> | $Enums.SubjectType
    yearStanding?: EnumYearLevelNullableFilter<"Subject"> | $Enums.YearLevel | null
    recommendedYear?: EnumYearLevelNullableFilter<"Subject"> | $Enums.YearLevel | null
    recommendedSemester?: EnumSemesterTypeNullableFilter<"Subject"> | $Enums.SemesterType | null
    programId?: IntFilter<"Subject"> | number
    prerequisiteId?: IntNullableFilter<"Subject"> | number | null
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updatedAt?: DateTimeFilter<"Subject"> | Date | string
  }

  export type ProgramCreateWithoutSubjectsInput = {
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutSubjectsInput = {
    id?: number
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutSubjectsInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutSubjectsInput, ProgramUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectCreateWithoutPrerequisitesInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutSubjectsInput
    prerequisite?: SubjectCreateNestedOneWithoutPrerequisitesInput
    sections?: SectionCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutPrerequisitesInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutPrerequisitesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutPrerequisitesInput, SubjectUncheckedCreateWithoutPrerequisitesInput>
  }

  export type SubjectCreateWithoutPrerequisiteInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutSubjectsInput
    prerequisites?: SubjectCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutPrerequisiteInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionUncheckedCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutPrerequisiteInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutPrerequisiteInput, SubjectUncheckedCreateWithoutPrerequisiteInput>
  }

  export type SubjectCreateManyPrerequisiteInputEnvelope = {
    data: SubjectCreateManyPrerequisiteInput | SubjectCreateManyPrerequisiteInput[]
    skipDuplicates?: boolean
  }

  export type SectionCreateWithoutSubjectInput = {
    name: string
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    professor: ProfessorCreateNestedOneWithoutSectionsInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutSubjectInput = {
    id?: number
    name: string
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutSubjectInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutSubjectInput, SectionUncheckedCreateWithoutSubjectInput>
  }

  export type SectionCreateManySubjectInputEnvelope = {
    data: SectionCreateManySubjectInput | SectionCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentSubjectCreateWithoutSubjectInput = {
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollment: EnrollmentCreateNestedOneWithoutEnrollmentSubjectsInput
    section: SectionCreateNestedOneWithoutEnrollmentSubjectsInput
    grade?: GradeCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectUncheckedCreateWithoutSubjectInput = {
    id?: number
    enrollmentId: number
    sectionId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    grade?: GradeUncheckedCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectCreateOrConnectWithoutSubjectInput = {
    where: EnrollmentSubjectWhereUniqueInput
    create: XOR<EnrollmentSubjectCreateWithoutSubjectInput, EnrollmentSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type EnrollmentSubjectCreateManySubjectInputEnvelope = {
    data: EnrollmentSubjectCreateManySubjectInput | EnrollmentSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type IncResolutionCreateWithoutSubjectInput = {
    oldGrade: string
    newGrade: $Enums.GradeValue
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutIncResolutionsInput
    professor: ProfessorCreateNestedOneWithoutIncResolutionsInput
  }

  export type IncResolutionUncheckedCreateWithoutSubjectInput = {
    id?: number
    studentId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionCreateOrConnectWithoutSubjectInput = {
    where: IncResolutionWhereUniqueInput
    create: XOR<IncResolutionCreateWithoutSubjectInput, IncResolutionUncheckedCreateWithoutSubjectInput>
  }

  export type IncResolutionCreateManySubjectInputEnvelope = {
    data: IncResolutionCreateManySubjectInput | IncResolutionCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ProgramUpsertWithoutSubjectsInput = {
    update: XOR<ProgramUpdateWithoutSubjectsInput, ProgramUncheckedUpdateWithoutSubjectsInput>
    create: XOR<ProgramCreateWithoutSubjectsInput, ProgramUncheckedCreateWithoutSubjectsInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutSubjectsInput, ProgramUncheckedUpdateWithoutSubjectsInput>
  }

  export type ProgramUpdateWithoutSubjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type SubjectUpsertWithoutPrerequisitesInput = {
    update: XOR<SubjectUpdateWithoutPrerequisitesInput, SubjectUncheckedUpdateWithoutPrerequisitesInput>
    create: XOR<SubjectCreateWithoutPrerequisitesInput, SubjectUncheckedCreateWithoutPrerequisitesInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutPrerequisitesInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutPrerequisitesInput, SubjectUncheckedUpdateWithoutPrerequisitesInput>
  }

  export type SubjectUpdateWithoutPrerequisitesInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutSubjectsNestedInput
    prerequisite?: SubjectUpdateOneWithoutPrerequisitesNestedInput
    sections?: SectionUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutPrerequisitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUpsertWithWhereUniqueWithoutPrerequisiteInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutPrerequisiteInput, SubjectUncheckedUpdateWithoutPrerequisiteInput>
    create: XOR<SubjectCreateWithoutPrerequisiteInput, SubjectUncheckedCreateWithoutPrerequisiteInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutPrerequisiteInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutPrerequisiteInput, SubjectUncheckedUpdateWithoutPrerequisiteInput>
  }

  export type SubjectUpdateManyWithWhereWithoutPrerequisiteInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutPrerequisiteInput>
  }

  export type SectionUpsertWithWhereUniqueWithoutSubjectInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutSubjectInput, SectionUncheckedUpdateWithoutSubjectInput>
    create: XOR<SectionCreateWithoutSubjectInput, SectionUncheckedCreateWithoutSubjectInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutSubjectInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutSubjectInput, SectionUncheckedUpdateWithoutSubjectInput>
  }

  export type SectionUpdateManyWithWhereWithoutSubjectInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutSubjectInput>
  }

  export type EnrollmentSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: EnrollmentSubjectWhereUniqueInput
    update: XOR<EnrollmentSubjectUpdateWithoutSubjectInput, EnrollmentSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<EnrollmentSubjectCreateWithoutSubjectInput, EnrollmentSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type EnrollmentSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: EnrollmentSubjectWhereUniqueInput
    data: XOR<EnrollmentSubjectUpdateWithoutSubjectInput, EnrollmentSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type EnrollmentSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: EnrollmentSubjectScalarWhereInput
    data: XOR<EnrollmentSubjectUpdateManyMutationInput, EnrollmentSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type EnrollmentSubjectScalarWhereInput = {
    AND?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
    OR?: EnrollmentSubjectScalarWhereInput[]
    NOT?: EnrollmentSubjectScalarWhereInput | EnrollmentSubjectScalarWhereInput[]
    id?: IntFilter<"EnrollmentSubject"> | number
    enrollmentId?: IntFilter<"EnrollmentSubject"> | number
    sectionId?: IntFilter<"EnrollmentSubject"> | number
    subjectId?: IntFilter<"EnrollmentSubject"> | number
    units?: IntFilter<"EnrollmentSubject"> | number
    createdAt?: DateTimeFilter<"EnrollmentSubject"> | Date | string
    updatedAt?: DateTimeFilter<"EnrollmentSubject"> | Date | string
  }

  export type IncResolutionUpsertWithWhereUniqueWithoutSubjectInput = {
    where: IncResolutionWhereUniqueInput
    update: XOR<IncResolutionUpdateWithoutSubjectInput, IncResolutionUncheckedUpdateWithoutSubjectInput>
    create: XOR<IncResolutionCreateWithoutSubjectInput, IncResolutionUncheckedCreateWithoutSubjectInput>
  }

  export type IncResolutionUpdateWithWhereUniqueWithoutSubjectInput = {
    where: IncResolutionWhereUniqueInput
    data: XOR<IncResolutionUpdateWithoutSubjectInput, IncResolutionUncheckedUpdateWithoutSubjectInput>
  }

  export type IncResolutionUpdateManyWithWhereWithoutSubjectInput = {
    where: IncResolutionScalarWhereInput
    data: XOR<IncResolutionUpdateManyMutationInput, IncResolutionUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SubjectCreateWithoutSectionsInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutSubjectsInput
    prerequisite?: SubjectCreateNestedOneWithoutPrerequisitesInput
    prerequisites?: SubjectCreateNestedManyWithoutPrerequisiteInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutSectionsInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutSectionsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutSectionsInput, SubjectUncheckedCreateWithoutSectionsInput>
  }

  export type ProfessorCreateWithoutSectionsInput = {
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfessorInput
    grades?: GradeCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutSectionsInput = {
    id?: number
    userId: number
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    grades?: GradeUncheckedCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutSectionsInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutSectionsInput, ProfessorUncheckedCreateWithoutSectionsInput>
  }

  export type EnrollmentSubjectCreateWithoutSectionInput = {
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollment: EnrollmentCreateNestedOneWithoutEnrollmentSubjectsInput
    subject: SubjectCreateNestedOneWithoutEnrollmentSubjectsInput
    grade?: GradeCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectUncheckedCreateWithoutSectionInput = {
    id?: number
    enrollmentId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    grade?: GradeUncheckedCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectCreateOrConnectWithoutSectionInput = {
    where: EnrollmentSubjectWhereUniqueInput
    create: XOR<EnrollmentSubjectCreateWithoutSectionInput, EnrollmentSubjectUncheckedCreateWithoutSectionInput>
  }

  export type EnrollmentSubjectCreateManySectionInputEnvelope = {
    data: EnrollmentSubjectCreateManySectionInput | EnrollmentSubjectCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithoutSectionsInput = {
    update: XOR<SubjectUpdateWithoutSectionsInput, SubjectUncheckedUpdateWithoutSectionsInput>
    create: XOR<SubjectCreateWithoutSectionsInput, SubjectUncheckedCreateWithoutSectionsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutSectionsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutSectionsInput, SubjectUncheckedUpdateWithoutSectionsInput>
  }

  export type SubjectUpdateWithoutSectionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutSubjectsNestedInput
    prerequisite?: SubjectUpdateOneWithoutPrerequisitesNestedInput
    prerequisites?: SubjectUpdateManyWithoutPrerequisiteNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutSectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type ProfessorUpsertWithoutSectionsInput = {
    update: XOR<ProfessorUpdateWithoutSectionsInput, ProfessorUncheckedUpdateWithoutSectionsInput>
    create: XOR<ProfessorCreateWithoutSectionsInput, ProfessorUncheckedCreateWithoutSectionsInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutSectionsInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutSectionsInput, ProfessorUncheckedUpdateWithoutSectionsInput>
  }

  export type ProfessorUpdateWithoutSectionsInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfessorNestedInput
    grades?: GradeUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutSectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: GradeUncheckedUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type EnrollmentSubjectUpsertWithWhereUniqueWithoutSectionInput = {
    where: EnrollmentSubjectWhereUniqueInput
    update: XOR<EnrollmentSubjectUpdateWithoutSectionInput, EnrollmentSubjectUncheckedUpdateWithoutSectionInput>
    create: XOR<EnrollmentSubjectCreateWithoutSectionInput, EnrollmentSubjectUncheckedCreateWithoutSectionInput>
  }

  export type EnrollmentSubjectUpdateWithWhereUniqueWithoutSectionInput = {
    where: EnrollmentSubjectWhereUniqueInput
    data: XOR<EnrollmentSubjectUpdateWithoutSectionInput, EnrollmentSubjectUncheckedUpdateWithoutSectionInput>
  }

  export type EnrollmentSubjectUpdateManyWithWhereWithoutSectionInput = {
    where: EnrollmentSubjectScalarWhereInput
    data: XOR<EnrollmentSubjectUpdateManyMutationInput, EnrollmentSubjectUncheckedUpdateManyWithoutSectionInput>
  }

  export type EnrollmentCreateWithoutTermInput = {
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutEnrollmentsInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutEnrollmentInput
  }

  export type EnrollmentUncheckedCreateWithoutTermInput = {
    id?: number
    studentId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutEnrollmentInput
  }

  export type EnrollmentCreateOrConnectWithoutTermInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutTermInput, EnrollmentUncheckedCreateWithoutTermInput>
  }

  export type EnrollmentCreateManyTermInputEnvelope = {
    data: EnrollmentCreateManyTermInput | EnrollmentCreateManyTermInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutTermInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutTermInput, EnrollmentUncheckedUpdateWithoutTermInput>
    create: XOR<EnrollmentCreateWithoutTermInput, EnrollmentUncheckedCreateWithoutTermInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutTermInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutTermInput, EnrollmentUncheckedUpdateWithoutTermInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutTermInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutTermInput>
  }

  export type StudentCreateWithoutEnrollmentsInput = {
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    program: ProgramCreateNestedOneWithoutStudentsInput
    incResolutions?: IncResolutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutEnrollmentsInput = {
    id?: number
    userId: number
    studentNo: string
    programId: number
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutEnrollmentsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutEnrollmentsInput, StudentUncheckedCreateWithoutEnrollmentsInput>
  }

  export type AcademicTermCreateWithoutEnrollmentsInput = {
    schoolYear: string
    semester: $Enums.SemesterType
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicTermUncheckedCreateWithoutEnrollmentsInput = {
    id?: number
    schoolYear: string
    semester: $Enums.SemesterType
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicTermCreateOrConnectWithoutEnrollmentsInput = {
    where: AcademicTermWhereUniqueInput
    create: XOR<AcademicTermCreateWithoutEnrollmentsInput, AcademicTermUncheckedCreateWithoutEnrollmentsInput>
  }

  export type EnrollmentSubjectCreateWithoutEnrollmentInput = {
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    section: SectionCreateNestedOneWithoutEnrollmentSubjectsInput
    subject: SubjectCreateNestedOneWithoutEnrollmentSubjectsInput
    grade?: GradeCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput = {
    id?: number
    sectionId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    grade?: GradeUncheckedCreateNestedOneWithoutEnrollmentSubjectInput
  }

  export type EnrollmentSubjectCreateOrConnectWithoutEnrollmentInput = {
    where: EnrollmentSubjectWhereUniqueInput
    create: XOR<EnrollmentSubjectCreateWithoutEnrollmentInput, EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput>
  }

  export type EnrollmentSubjectCreateManyEnrollmentInputEnvelope = {
    data: EnrollmentSubjectCreateManyEnrollmentInput | EnrollmentSubjectCreateManyEnrollmentInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithoutEnrollmentsInput = {
    update: XOR<StudentUpdateWithoutEnrollmentsInput, StudentUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<StudentCreateWithoutEnrollmentsInput, StudentUncheckedCreateWithoutEnrollmentsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutEnrollmentsInput, StudentUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type StudentUpdateWithoutEnrollmentsInput = {
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutEnrollmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    programId?: IntFieldUpdateOperationsInput | number
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AcademicTermUpsertWithoutEnrollmentsInput = {
    update: XOR<AcademicTermUpdateWithoutEnrollmentsInput, AcademicTermUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<AcademicTermCreateWithoutEnrollmentsInput, AcademicTermUncheckedCreateWithoutEnrollmentsInput>
    where?: AcademicTermWhereInput
  }

  export type AcademicTermUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: AcademicTermWhereInput
    data: XOR<AcademicTermUpdateWithoutEnrollmentsInput, AcademicTermUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type AcademicTermUpdateWithoutEnrollmentsInput = {
    schoolYear?: StringFieldUpdateOperationsInput | string
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicTermUncheckedUpdateWithoutEnrollmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    schoolYear?: StringFieldUpdateOperationsInput | string
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectUpsertWithWhereUniqueWithoutEnrollmentInput = {
    where: EnrollmentSubjectWhereUniqueInput
    update: XOR<EnrollmentSubjectUpdateWithoutEnrollmentInput, EnrollmentSubjectUncheckedUpdateWithoutEnrollmentInput>
    create: XOR<EnrollmentSubjectCreateWithoutEnrollmentInput, EnrollmentSubjectUncheckedCreateWithoutEnrollmentInput>
  }

  export type EnrollmentSubjectUpdateWithWhereUniqueWithoutEnrollmentInput = {
    where: EnrollmentSubjectWhereUniqueInput
    data: XOR<EnrollmentSubjectUpdateWithoutEnrollmentInput, EnrollmentSubjectUncheckedUpdateWithoutEnrollmentInput>
  }

  export type EnrollmentSubjectUpdateManyWithWhereWithoutEnrollmentInput = {
    where: EnrollmentSubjectScalarWhereInput
    data: XOR<EnrollmentSubjectUpdateManyMutationInput, EnrollmentSubjectUncheckedUpdateManyWithoutEnrollmentInput>
  }

  export type EnrollmentCreateWithoutEnrollmentSubjectsInput = {
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutEnrollmentsInput
    term: AcademicTermCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutEnrollmentSubjectsInput = {
    id?: number
    studentId: number
    termId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutEnrollmentSubjectsInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutEnrollmentSubjectsInput, EnrollmentUncheckedCreateWithoutEnrollmentSubjectsInput>
  }

  export type SectionCreateWithoutEnrollmentSubjectsInput = {
    name: string
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    subject: SubjectCreateNestedOneWithoutSectionsInput
    professor: ProfessorCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutEnrollmentSubjectsInput = {
    id?: number
    name: string
    subjectId: number
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateOrConnectWithoutEnrollmentSubjectsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutEnrollmentSubjectsInput, SectionUncheckedCreateWithoutEnrollmentSubjectsInput>
  }

  export type SubjectCreateWithoutEnrollmentSubjectsInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutSubjectsInput
    prerequisite?: SubjectCreateNestedOneWithoutPrerequisitesInput
    prerequisites?: SubjectCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutEnrollmentSubjectsInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionUncheckedCreateNestedManyWithoutSubjectInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutEnrollmentSubjectsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutEnrollmentSubjectsInput, SubjectUncheckedCreateWithoutEnrollmentSubjectsInput>
  }

  export type GradeCreateWithoutEnrollmentSubjectInput = {
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    professor: ProfessorCreateNestedOneWithoutGradesInput
  }

  export type GradeUncheckedCreateWithoutEnrollmentSubjectInput = {
    id?: number
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    encodedBy: number
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutEnrollmentSubjectInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutEnrollmentSubjectInput, GradeUncheckedCreateWithoutEnrollmentSubjectInput>
  }

  export type EnrollmentUpsertWithoutEnrollmentSubjectsInput = {
    update: XOR<EnrollmentUpdateWithoutEnrollmentSubjectsInput, EnrollmentUncheckedUpdateWithoutEnrollmentSubjectsInput>
    create: XOR<EnrollmentCreateWithoutEnrollmentSubjectsInput, EnrollmentUncheckedCreateWithoutEnrollmentSubjectsInput>
    where?: EnrollmentWhereInput
  }

  export type EnrollmentUpdateToOneWithWhereWithoutEnrollmentSubjectsInput = {
    where?: EnrollmentWhereInput
    data: XOR<EnrollmentUpdateWithoutEnrollmentSubjectsInput, EnrollmentUncheckedUpdateWithoutEnrollmentSubjectsInput>
  }

  export type EnrollmentUpdateWithoutEnrollmentSubjectsInput = {
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutEnrollmentsNestedInput
    term?: AcademicTermUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutEnrollmentSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUpsertWithoutEnrollmentSubjectsInput = {
    update: XOR<SectionUpdateWithoutEnrollmentSubjectsInput, SectionUncheckedUpdateWithoutEnrollmentSubjectsInput>
    create: XOR<SectionCreateWithoutEnrollmentSubjectsInput, SectionUncheckedCreateWithoutEnrollmentSubjectsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutEnrollmentSubjectsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutEnrollmentSubjectsInput, SectionUncheckedUpdateWithoutEnrollmentSubjectsInput>
  }

  export type SectionUpdateWithoutEnrollmentSubjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutSectionsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutEnrollmentSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    professorId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUpsertWithoutEnrollmentSubjectsInput = {
    update: XOR<SubjectUpdateWithoutEnrollmentSubjectsInput, SubjectUncheckedUpdateWithoutEnrollmentSubjectsInput>
    create: XOR<SubjectCreateWithoutEnrollmentSubjectsInput, SubjectUncheckedCreateWithoutEnrollmentSubjectsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutEnrollmentSubjectsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutEnrollmentSubjectsInput, SubjectUncheckedUpdateWithoutEnrollmentSubjectsInput>
  }

  export type SubjectUpdateWithoutEnrollmentSubjectsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutSubjectsNestedInput
    prerequisite?: SubjectUpdateOneWithoutPrerequisitesNestedInput
    prerequisites?: SubjectUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutEnrollmentSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type GradeUpsertWithoutEnrollmentSubjectInput = {
    update: XOR<GradeUpdateWithoutEnrollmentSubjectInput, GradeUncheckedUpdateWithoutEnrollmentSubjectInput>
    create: XOR<GradeCreateWithoutEnrollmentSubjectInput, GradeUncheckedCreateWithoutEnrollmentSubjectInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutEnrollmentSubjectInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutEnrollmentSubjectInput, GradeUncheckedUpdateWithoutEnrollmentSubjectInput>
  }

  export type GradeUpdateWithoutEnrollmentSubjectInput = {
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneRequiredWithoutGradesNestedInput
  }

  export type GradeUncheckedUpdateWithoutEnrollmentSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    encodedBy?: IntFieldUpdateOperationsInput | number
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectCreateWithoutGradeInput = {
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollment: EnrollmentCreateNestedOneWithoutEnrollmentSubjectsInput
    section: SectionCreateNestedOneWithoutEnrollmentSubjectsInput
    subject: SubjectCreateNestedOneWithoutEnrollmentSubjectsInput
  }

  export type EnrollmentSubjectUncheckedCreateWithoutGradeInput = {
    id?: number
    enrollmentId: number
    sectionId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentSubjectCreateOrConnectWithoutGradeInput = {
    where: EnrollmentSubjectWhereUniqueInput
    create: XOR<EnrollmentSubjectCreateWithoutGradeInput, EnrollmentSubjectUncheckedCreateWithoutGradeInput>
  }

  export type ProfessorCreateWithoutGradesInput = {
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfessorInput
    sections?: SectionCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutGradesInput = {
    id?: number
    userId: number
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutProfessorInput
    incResolutions?: IncResolutionUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutGradesInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutGradesInput, ProfessorUncheckedCreateWithoutGradesInput>
  }

  export type EnrollmentSubjectUpsertWithoutGradeInput = {
    update: XOR<EnrollmentSubjectUpdateWithoutGradeInput, EnrollmentSubjectUncheckedUpdateWithoutGradeInput>
    create: XOR<EnrollmentSubjectCreateWithoutGradeInput, EnrollmentSubjectUncheckedCreateWithoutGradeInput>
    where?: EnrollmentSubjectWhereInput
  }

  export type EnrollmentSubjectUpdateToOneWithWhereWithoutGradeInput = {
    where?: EnrollmentSubjectWhereInput
    data: XOR<EnrollmentSubjectUpdateWithoutGradeInput, EnrollmentSubjectUncheckedUpdateWithoutGradeInput>
  }

  export type EnrollmentSubjectUpdateWithoutGradeInput = {
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollment?: EnrollmentUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    section?: SectionUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorUpsertWithoutGradesInput = {
    update: XOR<ProfessorUpdateWithoutGradesInput, ProfessorUncheckedUpdateWithoutGradesInput>
    create: XOR<ProfessorCreateWithoutGradesInput, ProfessorUncheckedCreateWithoutGradesInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutGradesInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutGradesInput, ProfessorUncheckedUpdateWithoutGradesInput>
  }

  export type ProfessorUpdateWithoutGradesInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfessorNestedInput
    sections?: SectionUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutGradesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutProfessorNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type StudentCreateWithoutIncResolutionsInput = {
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStudentInput
    program: ProgramCreateNestedOneWithoutStudentsInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutIncResolutionsInput = {
    id?: number
    userId: number
    studentNo: string
    programId: number
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutIncResolutionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutIncResolutionsInput, StudentUncheckedCreateWithoutIncResolutionsInput>
  }

  export type SubjectCreateWithoutIncResolutionsInput = {
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    createdAt?: Date | string
    updatedAt?: Date | string
    program: ProgramCreateNestedOneWithoutSubjectsInput
    prerequisite?: SubjectCreateNestedOneWithoutPrerequisitesInput
    prerequisites?: SubjectCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutIncResolutionsInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: SubjectUncheckedCreateNestedManyWithoutPrerequisiteInput
    sections?: SectionUncheckedCreateNestedManyWithoutSubjectInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutIncResolutionsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutIncResolutionsInput, SubjectUncheckedCreateWithoutIncResolutionsInput>
  }

  export type ProfessorCreateWithoutIncResolutionsInput = {
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfessorInput
    sections?: SectionCreateNestedManyWithoutProfessorInput
    grades?: GradeCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutIncResolutionsInput = {
    id?: number
    userId: number
    department?: string | null
    employmentStatus?: $Enums.EmploymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutProfessorInput
    grades?: GradeUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutIncResolutionsInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutIncResolutionsInput, ProfessorUncheckedCreateWithoutIncResolutionsInput>
  }

  export type StudentUpsertWithoutIncResolutionsInput = {
    update: XOR<StudentUpdateWithoutIncResolutionsInput, StudentUncheckedUpdateWithoutIncResolutionsInput>
    create: XOR<StudentCreateWithoutIncResolutionsInput, StudentUncheckedCreateWithoutIncResolutionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutIncResolutionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutIncResolutionsInput, StudentUncheckedUpdateWithoutIncResolutionsInput>
  }

  export type StudentUpdateWithoutIncResolutionsInput = {
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutIncResolutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    programId?: IntFieldUpdateOperationsInput | number
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SubjectUpsertWithoutIncResolutionsInput = {
    update: XOR<SubjectUpdateWithoutIncResolutionsInput, SubjectUncheckedUpdateWithoutIncResolutionsInput>
    create: XOR<SubjectCreateWithoutIncResolutionsInput, SubjectUncheckedCreateWithoutIncResolutionsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutIncResolutionsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutIncResolutionsInput, SubjectUncheckedUpdateWithoutIncResolutionsInput>
  }

  export type SubjectUpdateWithoutIncResolutionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutSubjectsNestedInput
    prerequisite?: SubjectUpdateOneWithoutPrerequisitesNestedInput
    prerequisites?: SubjectUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutIncResolutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type ProfessorUpsertWithoutIncResolutionsInput = {
    update: XOR<ProfessorUpdateWithoutIncResolutionsInput, ProfessorUncheckedUpdateWithoutIncResolutionsInput>
    create: XOR<ProfessorCreateWithoutIncResolutionsInput, ProfessorUncheckedCreateWithoutIncResolutionsInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutIncResolutionsInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutIncResolutionsInput, ProfessorUncheckedUpdateWithoutIncResolutionsInput>
  }

  export type ProfessorUpdateWithoutIncResolutionsInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfessorNestedInput
    sections?: SectionUpdateManyWithoutProfessorNestedInput
    grades?: GradeUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutIncResolutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutProfessorNestedInput
    grades?: GradeUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type UserCreateWithoutAnalyticsLogsInput = {
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    role: RoleCreateNestedOneWithoutUsersInput
    student?: StudentCreateNestedOneWithoutUserInput
    professor?: ProfessorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnalyticsLogsInput = {
    id?: number
    email: string
    password: string
    roleId: number
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnalyticsLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnalyticsLogsInput, UserUncheckedCreateWithoutAnalyticsLogsInput>
  }

  export type UserUpsertWithoutAnalyticsLogsInput = {
    update: XOR<UserUpdateWithoutAnalyticsLogsInput, UserUncheckedUpdateWithoutAnalyticsLogsInput>
    create: XOR<UserCreateWithoutAnalyticsLogsInput, UserUncheckedCreateWithoutAnalyticsLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnalyticsLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnalyticsLogsInput, UserUncheckedUpdateWithoutAnalyticsLogsInput>
  }

  export type UserUpdateWithoutAnalyticsLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    professor?: ProfessorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnalyticsLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyRoleInput = {
    id?: number
    email: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutRoleInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneWithoutUserNestedInput
    professor?: ProfessorUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
    analyticsLogs?: AnalyticsLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsLogCreateManyUserInput = {
    id?: number
    action: string
    description?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyStudentInput = {
    id?: number
    termId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionCreateManyStudentInput = {
    id?: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateWithoutStudentInput = {
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: AcademicTermUpdateOneRequiredWithoutEnrollmentsNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUpdateWithoutStudentInput = {
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutIncResolutionsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutIncResolutionsNestedInput
  }

  export type IncResolutionUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    professorId?: IntFieldUpdateOperationsInput | number
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    professorId?: IntFieldUpdateOperationsInput | number
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateManyProfessorInput = {
    id?: number
    name: string
    subjectId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateManyProfessorInput = {
    id?: number
    enrollmentSubjectId: number
    gradeValue: $Enums.GradeValue
    remarks?: string | null
    approved?: boolean
    dateEncoded?: Date | string
    repeatEligibleDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionCreateManyProfessorInput = {
    id?: number
    studentId: number
    subjectId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionUpdateWithoutProfessorInput = {
    name?: StringFieldUpdateOperationsInput | string
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutSectionsNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subjectId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUpdateWithoutProfessorInput = {
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubject?: EnrollmentSubjectUpdateOneRequiredWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentSubjectId?: IntFieldUpdateOperationsInput | number
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentSubjectId?: IntFieldUpdateOperationsInput | number
    gradeValue?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    dateEncoded?: DateTimeFieldUpdateOperationsInput | Date | string
    repeatEligibleDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUpdateWithoutProfessorInput = {
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutIncResolutionsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutIncResolutionsNestedInput
  }

  export type IncResolutionUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateManyProgramInput = {
    id?: number
    userId: number
    studentNo: string
    yearLevel: number
    gpa?: Decimal | DecimalJsLike | number | string | null
    hasInc?: boolean
    status?: $Enums.StudentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectCreateManyProgramInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    prerequisiteId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateWithoutProgramInput = {
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    studentNo?: StringFieldUpdateOperationsInput | string
    yearLevel?: IntFieldUpdateOperationsInput | number
    gpa?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    hasInc?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStudentStatusFieldUpdateOperationsInput | $Enums.StudentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUpdateWithoutProgramInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisite?: SubjectUpdateOneWithoutPrerequisitesNestedInput
    prerequisites?: SubjectUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    prerequisiteId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateManyPrerequisiteInput = {
    id?: number
    code: string
    name: string
    units: number
    subjectType: $Enums.SubjectType
    yearStanding?: $Enums.YearLevel | null
    recommendedYear?: $Enums.YearLevel | null
    recommendedSemester?: $Enums.SemesterType | null
    programId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SectionCreateManySubjectInput = {
    id?: number
    name: string
    professorId: number
    maxSlots: number
    availableSlots: number
    semester: $Enums.SemesterType
    schoolYear: string
    schedule?: string | null
    status?: $Enums.SectionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentSubjectCreateManySubjectInput = {
    id?: number
    enrollmentId: number
    sectionId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IncResolutionCreateManySubjectInput = {
    id?: number
    studentId: number
    oldGrade: string
    newGrade: $Enums.GradeValue
    professorId: number
    approvedByRegistrar?: boolean
    dateSubmitted?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectUpdateWithoutPrerequisiteInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    program?: ProgramUpdateOneRequiredWithoutSubjectsNestedInput
    prerequisites?: SubjectUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutPrerequisiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: SubjectUncheckedUpdateManyWithoutPrerequisiteNestedInput
    sections?: SectionUncheckedUpdateManyWithoutSubjectNestedInput
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSubjectNestedInput
    incResolutions?: IncResolutionUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutPrerequisiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    subjectType?: EnumSubjectTypeFieldUpdateOperationsInput | $Enums.SubjectType
    yearStanding?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedYear?: NullableEnumYearLevelFieldUpdateOperationsInput | $Enums.YearLevel | null
    recommendedSemester?: NullableEnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType | null
    programId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionUpdateWithoutSubjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneRequiredWithoutSectionsNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professorId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professorId?: IntFieldUpdateOperationsInput | number
    maxSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterTypeFieldUpdateOperationsInput | $Enums.SemesterType
    schoolYear?: StringFieldUpdateOperationsInput | string
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSectionStatusFieldUpdateOperationsInput | $Enums.SectionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectUpdateWithoutSubjectInput = {
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollment?: EnrollmentUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    section?: SectionUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    grade?: GradeUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grade?: GradeUncheckedUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUpdateWithoutSubjectInput = {
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutIncResolutionsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutIncResolutionsNestedInput
  }

  export type IncResolutionUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    professorId?: IntFieldUpdateOperationsInput | number
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncResolutionUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    oldGrade?: StringFieldUpdateOperationsInput | string
    newGrade?: EnumGradeValueFieldUpdateOperationsInput | $Enums.GradeValue
    professorId?: IntFieldUpdateOperationsInput | number
    approvedByRegistrar?: BoolFieldUpdateOperationsInput | boolean
    dateSubmitted?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectCreateManySectionInput = {
    id?: number
    enrollmentId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentSubjectUpdateWithoutSectionInput = {
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollment?: EnrollmentUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    grade?: GradeUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grade?: GradeUncheckedUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateManyWithoutSectionInput = {
    id?: IntFieldUpdateOperationsInput | number
    enrollmentId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyTermInput = {
    id?: number
    studentId: number
    dateEnrolled?: Date | string
    totalUnits?: number
    status?: $Enums.EnrollmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateWithoutTermInput = {
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutEnrollmentsNestedInput
    enrollmentSubjects?: EnrollmentSubjectUpdateManyWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentSubjects?: EnrollmentSubjectUncheckedUpdateManyWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateManyWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    dateEnrolled?: DateTimeFieldUpdateOperationsInput | Date | string
    totalUnits?: IntFieldUpdateOperationsInput | number
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentSubjectCreateManyEnrollmentInput = {
    id?: number
    sectionId: number
    subjectId: number
    units: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentSubjectUpdateWithoutEnrollmentInput = {
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    section?: SectionUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutEnrollmentSubjectsNestedInput
    grade?: GradeUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateWithoutEnrollmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grade?: GradeUncheckedUpdateOneWithoutEnrollmentSubjectNestedInput
  }

  export type EnrollmentSubjectUncheckedUpdateManyWithoutEnrollmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sectionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    units?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}