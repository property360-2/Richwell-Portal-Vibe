
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  roleId: 'roleId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentNo: 'studentNo',
  programId: 'programId',
  yearLevel: 'yearLevel',
  gpa: 'gpa',
  hasInc: 'hasInc',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department',
  employmentStatus: 'employmentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  units: 'units',
  subjectType: 'subjectType',
  yearStanding: 'yearStanding',
  recommendedYear: 'recommendedYear',
  recommendedSemester: 'recommendedSemester',
  programId: 'programId',
  prerequisiteId: 'prerequisiteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subjectId: 'subjectId',
  professorId: 'professorId',
  maxSlots: 'maxSlots',
  availableSlots: 'availableSlots',
  semester: 'semester',
  schoolYear: 'schoolYear',
  schedule: 'schedule',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AcademicTermScalarFieldEnum = {
  id: 'id',
  schoolYear: 'schoolYear',
  semester: 'semester',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  termId: 'termId',
  dateEnrolled: 'dateEnrolled',
  totalUnits: 'totalUnits',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentSubjectScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  sectionId: 'sectionId',
  subjectId: 'subjectId',
  units: 'units',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  enrollmentSubjectId: 'enrollmentSubjectId',
  gradeValue: 'gradeValue',
  remarks: 'remarks',
  encodedBy: 'encodedBy',
  approved: 'approved',
  dateEncoded: 'dateEncoded',
  repeatEligibleDate: 'repeatEligibleDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IncResolutionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  oldGrade: 'oldGrade',
  newGrade: 'newGrade',
  professorId: 'professorId',
  approvedByRegistrar: 'approvedByRegistrar',
  dateSubmitted: 'dateSubmitted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  description: 'description',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.StudentStatus = exports.$Enums.StudentStatus = {
  regular: 'regular',
  irregular: 'irregular',
  inactive: 'inactive'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  full_time: 'full_time',
  part_time: 'part_time'
};

exports.SubjectType = exports.$Enums.SubjectType = {
  major: 'major',
  minor: 'minor'
};

exports.YearLevel = exports.$Enums.YearLevel = {
  first: 'first',
  second: 'second',
  third: 'third',
  fourth: 'fourth'
};

exports.SemesterType = exports.$Enums.SemesterType = {
  first: 'first',
  second: 'second',
  summer: 'summer'
};

exports.SectionStatus = exports.$Enums.SectionStatus = {
  open: 'open',
  closed: 'closed'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled'
};

exports.GradeValue = exports.$Enums.GradeValue = {
  grade_1_0: 'grade_1_0',
  grade_1_25: 'grade_1_25',
  grade_1_5: 'grade_1_5',
  grade_1_75: 'grade_1_75',
  grade_2_0: 'grade_2_0',
  grade_2_25: 'grade_2_25',
  grade_2_5: 'grade_2_5',
  grade_2_75: 'grade_2_75',
  grade_3_0: 'grade_3_0',
  grade_4_0: 'grade_4_0',
  grade_5_0: 'grade_5_0',
  INC: 'INC',
  DRP: 'DRP'
};

exports.Prisma.ModelName = {
  Role: 'Role',
  User: 'User',
  Student: 'Student',
  Professor: 'Professor',
  Program: 'Program',
  Subject: 'Subject',
  Section: 'Section',
  AcademicTerm: 'AcademicTerm',
  Enrollment: 'Enrollment',
  EnrollmentSubject: 'EnrollmentSubject',
  Grade: 'Grade',
  IncResolution: 'IncResolution',
  AnalyticsLog: 'AnalyticsLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
