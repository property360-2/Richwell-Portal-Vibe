// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========== A. USER & ROLE MANAGEMENT ==========

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique @db.VarChar(100)
  password  String     @db.VarChar(255)
  roleId    Int
  status    UserStatus @default(active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  role          Role           @relation(fields: [roleId], references: [id])
  student       Student?
  professor     Professor?
  analyticsLogs AnalyticsLog[]

  @@map("users")
}

enum UserStatus {
  active
  inactive
}

// ========== B. STUDENT & PROFESSOR INFO ==========

model Student {
  id        Int           @id @default(autoincrement())
  userId    Int           @unique
  studentNo String        @unique @db.VarChar(50)
  programId Int
  yearLevel Int
  gpa       Decimal?      @db.Decimal(3, 2)
  hasInc    Boolean       @default(false)
  status    StudentStatus @default(regular)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  program        Program         @relation(fields: [programId], references: [id])
  enrollments    Enrollment[]
  incResolutions IncResolution[]

  @@map("students")
}

enum StudentStatus {
  regular
  irregular
  inactive
}

model Professor {
  id               Int              @id @default(autoincrement())
  userId           Int              @unique
  department       String?          @db.VarChar(100)
  employmentStatus EmploymentStatus @default(full_time)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  sections       Section[]
  grades         Grade[]
  incResolutions IncResolution[]

  @@map("professors")
}

enum EmploymentStatus {
  full_time
  part_time
}

// ========== C. ACADEMIC & CURRICULUM DATA ==========

model Program {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(150)
  code        String   @unique @db.VarChar(20)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  students Student[]
  subjects Subject[]

  @@map("programs")
}

model Subject {
  id                  Int           @id @default(autoincrement())
  code                String        @unique @db.VarChar(20)
  name                String        @db.VarChar(150)
  units               Int
  subjectType         SubjectType
  yearStanding        YearLevel?
  recommendedYear     YearLevel?
  recommendedSemester SemesterType?
  programId           Int
  prerequisiteId      Int?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  program            Program             @relation(fields: [programId], references: [id])
  prerequisite       Subject?            @relation("SubjectPrerequisite", fields: [prerequisiteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prerequisites      Subject[]           @relation("SubjectPrerequisite")
  sections           Section[]
  enrollmentSubjects EnrollmentSubject[]
  incResolutions     IncResolution[]

  @@map("subjects")
}

enum SubjectType {
  major
  minor
}

enum YearLevel {
  first
  second
  third
  fourth
}

model Section {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(50)
  subjectId      Int
  professorId    Int
  maxSlots       Int
  availableSlots Int
  semester       SemesterType
  schoolYear     String        @db.VarChar(20)
  schedule       String?       @db.VarChar(200)
  status         SectionStatus @default(open)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  subject            Subject             @relation(fields: [subjectId], references: [id])
  professor          Professor           @relation(fields: [professorId], references: [id])
  enrollmentSubjects EnrollmentSubject[]

  @@map("sections")
}

enum SectionStatus {
  open
  closed
}

enum SemesterType {
  first
  second
  summer
}

model AcademicTerm {
  id         Int          @id @default(autoincrement())
  schoolYear String       @db.VarChar(20)
  semester   SemesterType
  isActive   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  enrollments Enrollment[]

  @@unique([schoolYear, semester])
  @@map("academic_terms")
}

// ========== D. ENROLLMENT & GRADES ==========

model Enrollment {
  id           Int              @id @default(autoincrement())
  studentId    Int
  termId       Int
  dateEnrolled DateTime         @default(now())
  totalUnits   Int              @default(0)
  status       EnrollmentStatus @default(pending)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  student            Student             @relation(fields: [studentId], references: [id])
  term               AcademicTerm        @relation(fields: [termId], references: [id])
  enrollmentSubjects EnrollmentSubject[]

  @@map("enrollments")
}

enum EnrollmentStatus {
  pending
  confirmed
  cancelled
}

model EnrollmentSubject {
  id           Int      @id @default(autoincrement())
  enrollmentId Int
  sectionId    Int
  subjectId    Int
  units        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
  section    Section    @relation(fields: [sectionId], references: [id])
  subject    Subject    @relation(fields: [subjectId], references: [id])
  grade      Grade?

  @@map("enrollment_subjects")
}

model Grade {
  id                  Int        @id @default(autoincrement())
  enrollmentSubjectId Int        @unique
  gradeValue          GradeValue
  remarks             String?    @db.VarChar(255)
  encodedBy           Int
  approved            Boolean    @default(false)
  dateEncoded         DateTime   @default(now())
  repeatEligibleDate  DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  enrollmentSubject EnrollmentSubject @relation(fields: [enrollmentSubjectId], references: [id])
  professor         Professor         @relation(fields: [encodedBy], references: [id])

  @@map("grades")
}

enum GradeValue {
  grade_1_0
  grade_1_25
  grade_1_5
  grade_1_75
  grade_2_0
  grade_2_25
  grade_2_5
  grade_2_75
  grade_3_0
  grade_4_0
  grade_5_0
  INC
  DRP
}

model IncResolution {
  id                  Int        @id @default(autoincrement())
  studentId           Int
  subjectId           Int
  oldGrade            String     @db.VarChar(10)
  newGrade            GradeValue
  professorId         Int
  approvedByRegistrar Boolean    @default(false)
  dateSubmitted       DateTime   @default(now())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  student   Student   @relation(fields: [studentId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])
  professor Professor @relation(fields: [professorId], references: [id])

  @@map("inc_resolutions")
}

// ========== E. ANALYTICS & LOGS ==========

model AnalyticsLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String   @db.VarChar(100)
  description String?  @db.Text
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("analytics_logs")
}
