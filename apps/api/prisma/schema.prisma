generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admission
  registrar
  dean
  professor
}

enum StudentStatus {
  new
  current
  transferee
  irregular
  dropped
}

enum AssignedBy {
  system
  registrar
  dean
}

enum EnrollmentStatus {
  pending
  enrolled
  completed
}

enum SubjectType {
  major
  minor
}

enum IncStatus {
  pending
  for_registrar
  resolved
  expired
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique @db.VarChar(100)
  password       String           @db.VarChar(255)
  role           UserRole
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deanCourses    Course[]         @relation("CourseDean")
  createdSections Section[]       @relation("SectionCreatedBy")
  professorSections Section[]     @relation("SectionProfessor")
  archivedStudents Student[]      @relation("StudentArchivedBy")
  archivedCourses  Course[]       @relation("CourseArchivedBy")
  archivedSubjects Subject[]      @relation("SubjectArchivedBy")
  archivedSections Section[]      @relation("SectionArchivedBy")
  teachingAssignments AssignedSubject[] @relation("AssignmentProfessor")
  archivedAssignments AssignedSubject[] @relation("AssignedSubjectArchivedBy")
  archivedEnrollments Enrollment[] @relation("EnrollmentArchivedBy")
  issuedIncRecords IncRecord[]    @relation("IncIssuedBy")
  resolvedIncRecords IncRecord[]  @relation("IncResolvedBy")
  archivedIncRecords IncRecord[]  @relation("IncArchivedBy")
  auditLogs       AuditTrail[]
  @@map("users")
}

model Student {
  id          Int              @id @default(autoincrement())
  studentNumber String         @unique @map("student_number") @db.VarChar(50)
  name        String           @db.VarChar(255)
  sex         String?          @db.VarChar(10)
  address     String?
  contactNo   String?          @map("contact_no") @db.VarChar(30)
  courseId    Int?             @map("course_id")
  yearLevel   Int?             @map("year_level")
  status      StudentStatus    @default(new)
  documents   Json?
  archived    Boolean          @default(false)
  archivedAt  DateTime?        @map("archived_at")
  archivedById Int?            @map("archived_by")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  course      Course?          @relation(fields: [courseId], references: [id])
  archivedBy  User?            @relation("StudentArchivedBy", fields: [archivedById], references: [id])
  enrollments Enrollment[]

  @@index([courseId])
  @@map("students")
}

model Course {
  id          Int        @id @default(autoincrement())
  code        String     @unique @db.VarChar(20)
  name        String     @db.VarChar(100)
  deanId      Int?       @map("dean_id")
  archived    Boolean    @default(false)
  archivedAt  DateTime?  @map("archived_at")
  archivedById Int?      @map("archived_by")
  createdAt   DateTime   @default(now()) @map("created_at")

  dean        User?      @relation("CourseDean", fields: [deanId], references: [id])
  archivedBy  User?      @relation("CourseArchivedBy", fields: [archivedById], references: [id])
  subjects    Subject[]
  sections    Section[]
  students    Student[]

  @@map("courses")
}

model Subject {
  id            Int        @id @default(autoincrement())
  code          String     @unique @db.VarChar(20)
  title         String     @db.VarChar(255)
  units         Int
  courseId      Int        @map("course_id")
  yearLevel     Int?       @map("year_level")
  semester      Int?
  subjectType   SubjectType @map("subject_type")
  prerequisiteId Int?      @map("prerequisite_id")
  active        Boolean    @default(true)
  archived      Boolean    @default(false)
  archivedAt    DateTime?  @map("archived_at")
  archivedById  Int?       @map("archived_by")
  createdAt     DateTime   @default(now()) @map("created_at")

  course        Course     @relation(fields: [courseId], references: [id])
  prerequisite  Subject?   @relation("SubjectPrerequisite", fields: [prerequisiteId], references: [id])
  dependents    Subject[]  @relation("SubjectPrerequisite")
  archivedBy    User?      @relation("SubjectArchivedBy", fields: [archivedById], references: [id])
  assignedSubjects AssignedSubject[]
  enrollments   Enrollment[]

  @@index([courseId])
  @@map("subjects")
}

model Section {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  courseId     Int        @map("course_id")
  yearLevel    Int        @map("year_level")
  semester     Int
  professorId  Int?       @map("professor_id")
  slots        Int        @default(30)
  isSpecial    Boolean    @default(false) @map("is_special")
  createdById  Int        @map("created_by")
  archived     Boolean    @default(false)
  archivedAt   DateTime?  @map("archived_at")
  archivedById Int?       @map("archived_by")
  createdAt    DateTime   @default(now()) @map("created_at")

  course       Course     @relation(fields: [courseId], references: [id])
  professor    User?      @relation("SectionProfessor", fields: [professorId], references: [id])
  createdBy    User       @relation("SectionCreatedBy", fields: [createdById], references: [id])
  archivedBy   User?      @relation("SectionArchivedBy", fields: [archivedById], references: [id])
  assignedSubjects AssignedSubject[]
  enrollments  Enrollment[]

  @@index([courseId])
  @@index([professorId])
  @@map("sections")
}

model AssignedSubject {
  id           Int        @id @default(autoincrement())
  professorId  Int        @map("professor_id")
  sectionId    Int        @map("section_id")
  subjectId    Int        @map("subject_id")
  term         String?    @db.VarChar(20)
  year         String?    @db.VarChar(9)
  archived     Boolean    @default(false)
  archivedAt   DateTime?  @map("archived_at")
  archivedById Int?       @map("archived_by")
  createdAt    DateTime   @default(now()) @map("created_at")

  professor    User       @relation("AssignmentProfessor", fields: [professorId], references: [id])
  section      Section    @relation(fields: [sectionId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  archivedBy   User?      @relation("AssignedSubjectArchivedBy", fields: [archivedById], references: [id])

  @@index([professorId])
  @@index([sectionId])
  @@index([subjectId])
  @@unique([sectionId, subjectId, term, year])
  @@map("assigned_subjects")
}

model Enrollment {
  id           Int              @id @default(autoincrement())
  studentId    Int              @map("student_id")
  subjectId    Int              @map("subject_id")
  sectionId    Int?             @map("section_id")
  assignedBy   AssignedBy       @default(system) @map("assigned_by")
  term         String?          @db.VarChar(20)
  year         String?          @db.VarChar(9)
  grade        Decimal?         @db.Decimal(3, 2)
  remarks      String?          @db.VarChar(50)
  status       EnrollmentStatus @default(pending)
  archived     Boolean          @default(false)
  archivedAt   DateTime?        @map("archived_at")
  archivedById Int?             @map("archived_by")
  createdAt    DateTime         @default(now()) @map("created_at")

  student      Student          @relation(fields: [studentId], references: [id])
  subject      Subject          @relation(fields: [subjectId], references: [id])
  section      Section?         @relation(fields: [sectionId], references: [id])
  archivedBy   User?            @relation("EnrollmentArchivedBy", fields: [archivedById], references: [id])
  incRecords   IncRecord[]

  @@index([studentId])
  @@index([subjectId])
  @@index([sectionId])
  @@unique([studentId, subjectId, term, year])
  @@map("enrollments")
}

model IncRecord {
  id            Int        @id @default(autoincrement())
  enrollmentId  Int        @map("enrollment_id")
  issuedById    Int        @map("issued_by")
  issuedAt      DateTime?  @map("issued_at")
  deadline      DateTime?
  resolvedById  Int?       @map("resolved_by")
  resolvedAt    DateTime?  @map("resolved_at")
  status        IncStatus  @default(pending)
  archived      Boolean    @default(false)
  archivedAt    DateTime?  @map("archived_at")
  archivedById  Int?       @map("archived_by")
  createdAt     DateTime   @default(now()) @map("created_at")

  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  issuedBy      User       @relation("IncIssuedBy", fields: [issuedById], references: [id])
  resolvedBy    User?      @relation("IncResolvedBy", fields: [resolvedById], references: [id])
  archivedBy    User?      @relation("IncArchivedBy", fields: [archivedById], references: [id])

  @@index([enrollmentId])
  @@map("inc_records")
}

model AuditTrail {
  id         Int       @id @default(autoincrement())
  actorId    Int       @map("actor_id")
  action     String    @db.VarChar(50)
  tableName  String?   @map("table_name") @db.VarChar(50)
  recordId   Int?      @map("record_id")
  oldValue   String?   @map("old_value")
  newValue   String?   @map("new_value")
  createdAt  DateTime  @default(now()) @map("timestamp")

  actor      User      @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@map("audit_trail")
}

model SchoolTerm {
  id          Int       @id @default(autoincrement())
  schoolYear  String?   @map("school_year") @db.VarChar(9)
  semester    Int?
  active      Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("school_terms")
}
